# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Product

    Product(;
        id=nothing,
        name=nothing,
        description=nothing,
        price_per_seat=nothing,
        add_ons=nothing,
    )

    - id::String
    - name::String
    - description::String
    - price_per_seat::String
    - add_ons::Vector{AddOn}
"""
Base.@kwdef mutable struct Product <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    price_per_seat::Union{Nothing, String} = nothing
    add_ons::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{AddOn} }

    function Product(id, name, description, price_per_seat, add_ons, )
        OpenAPI.validate_property(Product, Symbol("id"), id)
        OpenAPI.validate_property(Product, Symbol("name"), name)
        OpenAPI.validate_property(Product, Symbol("description"), description)
        OpenAPI.validate_property(Product, Symbol("price_per_seat"), price_per_seat)
        OpenAPI.validate_property(Product, Symbol("add_ons"), add_ons)
        return new(id, name, description, price_per_seat, add_ons, )
    end
end # type Product

const _property_types_Product = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("price_per_seat")=>"String", Symbol("add_ons")=>"Vector{AddOn}", )
OpenAPI.property_type(::Type{ Product }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Product[name]))}

function check_required(o::Product)
    true
end

function OpenAPI.validate_property(::Type{ Product }, name::Symbol, val)
end
