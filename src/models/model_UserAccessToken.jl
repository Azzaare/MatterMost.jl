# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UserAccessToken

    UserAccessToken(;
        id=nothing,
        token=nothing,
        user_id=nothing,
        description=nothing,
    )

    - id::String : Unique identifier for the token
    - token::String : The token used for authentication
    - user_id::String : The user the token authenticates for
    - description::String : A description of the token usage
"""
Base.@kwdef mutable struct UserAccessToken <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    token::Union{Nothing, String} = nothing
    user_id::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing

    function UserAccessToken(id, token, user_id, description, )
        OpenAPI.validate_property(UserAccessToken, Symbol("id"), id)
        OpenAPI.validate_property(UserAccessToken, Symbol("token"), token)
        OpenAPI.validate_property(UserAccessToken, Symbol("user_id"), user_id)
        OpenAPI.validate_property(UserAccessToken, Symbol("description"), description)
        return new(id, token, user_id, description, )
    end
end # type UserAccessToken

const _property_types_UserAccessToken = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("token")=>"String", Symbol("user_id")=>"String", Symbol("description")=>"String", )
OpenAPI.property_type(::Type{ UserAccessToken }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UserAccessToken[name]))}

function check_required(o::UserAccessToken)
    true
end

function OpenAPI.validate_property(::Type{ UserAccessToken }, name::Symbol, val)
end
