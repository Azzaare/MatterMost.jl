# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TopDM

    TopDM(;
        post_count=nothing,
        outgoing_message_count=nothing,
        second_participant=nothing,
    )

    - post_count::Int64
    - outgoing_message_count::Int64
    - second_participant::TopDMInsightUserInformation
"""
Base.@kwdef mutable struct TopDM <: OpenAPI.APIModel
    post_count::Union{Nothing, Int64} = nothing
    outgoing_message_count::Union{Nothing, Int64} = nothing
    second_participant = nothing # spec type: Union{ Nothing, TopDMInsightUserInformation }

    function TopDM(post_count, outgoing_message_count, second_participant, )
        OpenAPI.validate_property(TopDM, Symbol("post_count"), post_count)
        OpenAPI.validate_property(TopDM, Symbol("outgoing_message_count"), outgoing_message_count)
        OpenAPI.validate_property(TopDM, Symbol("second_participant"), second_participant)
        return new(post_count, outgoing_message_count, second_participant, )
    end
end # type TopDM

const _property_types_TopDM = Dict{Symbol,String}(Symbol("post_count")=>"Int64", Symbol("outgoing_message_count")=>"Int64", Symbol("second_participant")=>"TopDMInsightUserInformation", )
OpenAPI.property_type(::Type{ TopDM }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TopDM[name]))}

function check_required(o::TopDM)
    true
end

function OpenAPI.validate_property(::Type{ TopDM }, name::Symbol, val)
    if name === Symbol("post_count")
        OpenAPI.validate_param(name, "TopDM", :format, val, "int64")
    end
    if name === Symbol("outgoing_message_count")
        OpenAPI.validate_param(name, "TopDM", :format, val, "int64")
    end
end
