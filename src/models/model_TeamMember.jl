# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TeamMember

    TeamMember(;
        team_id=nothing,
        user_id=nothing,
        roles=nothing,
        delete_at=nothing,
        scheme_user=nothing,
        scheme_admin=nothing,
        explicit_roles=nothing,
    )

    - team_id::String : The ID of the team this member belongs to.
    - user_id::String : The ID of the user this member relates to.
    - roles::String : The complete list of roles assigned to this team member, as a space-separated list of role names, including any roles granted implicitly through permissions schemes.
    - delete_at::Int64 : The time in milliseconds that this team member was deleted.
    - scheme_user::Bool : Whether this team member holds the default user role defined by the team&#39;s permissions scheme.
    - scheme_admin::Bool : Whether this team member holds the default admin role defined by the team&#39;s permissions scheme.
    - explicit_roles::String : The list of roles explicitly assigned to this team member, as a space separated list of role names. This list does *not* include any roles granted implicitly through permissions schemes.
"""
Base.@kwdef mutable struct TeamMember <: OpenAPI.APIModel
    team_id::Union{Nothing, String} = nothing
    user_id::Union{Nothing, String} = nothing
    roles::Union{Nothing, String} = nothing
    delete_at::Union{Nothing, Int64} = nothing
    scheme_user::Union{Nothing, Bool} = nothing
    scheme_admin::Union{Nothing, Bool} = nothing
    explicit_roles::Union{Nothing, String} = nothing

    function TeamMember(team_id, user_id, roles, delete_at, scheme_user, scheme_admin, explicit_roles, )
        OpenAPI.validate_property(TeamMember, Symbol("team_id"), team_id)
        OpenAPI.validate_property(TeamMember, Symbol("user_id"), user_id)
        OpenAPI.validate_property(TeamMember, Symbol("roles"), roles)
        OpenAPI.validate_property(TeamMember, Symbol("delete_at"), delete_at)
        OpenAPI.validate_property(TeamMember, Symbol("scheme_user"), scheme_user)
        OpenAPI.validate_property(TeamMember, Symbol("scheme_admin"), scheme_admin)
        OpenAPI.validate_property(TeamMember, Symbol("explicit_roles"), explicit_roles)
        return new(team_id, user_id, roles, delete_at, scheme_user, scheme_admin, explicit_roles, )
    end
end # type TeamMember

const _property_types_TeamMember = Dict{Symbol,String}(Symbol("team_id")=>"String", Symbol("user_id")=>"String", Symbol("roles")=>"String", Symbol("delete_at")=>"Int64", Symbol("scheme_user")=>"Bool", Symbol("scheme_admin")=>"Bool", Symbol("explicit_roles")=>"String", )
OpenAPI.property_type(::Type{ TeamMember }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TeamMember[name]))}

function check_required(o::TeamMember)
    true
end

function OpenAPI.validate_property(::Type{ TeamMember }, name::Symbol, val)
end
