# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Command

    Command(;
        id=nothing,
        token=nothing,
        create_at=nothing,
        update_at=nothing,
        delete_at=nothing,
        creator_id=nothing,
        team_id=nothing,
        trigger=nothing,
        method=nothing,
        username=nothing,
        icon_url=nothing,
        auto_complete=nothing,
        auto_complete_desc=nothing,
        auto_complete_hint=nothing,
        display_name=nothing,
        description=nothing,
        url=nothing,
    )

    - id::String : The ID of the slash command
    - token::String : The token which is used to verify the source of the payload
    - create_at::Int64 : The time in milliseconds the command was created
    - update_at::Int64 : The time in milliseconds the command was last updated
    - delete_at::Int64 : The time in milliseconds the command was deleted, 0 if never deleted
    - creator_id::String : The user id for the commands creator
    - team_id::String : The team id for which this command is configured
    - trigger::String : The string that triggers this command
    - method::String : Is the trigger done with HTTP Get (&#39;G&#39;) or HTTP Post (&#39;P&#39;)
    - username::String : What is the username for the response post
    - icon_url::String : The url to find the icon for this users avatar
    - auto_complete::Bool : Use auto complete for this command
    - auto_complete_desc::String : The description for this command shown when selecting the command
    - auto_complete_hint::String : The hint for this command
    - display_name::String : Display name for the command
    - description::String : Description for this command
    - url::String : The URL that is triggered
"""
Base.@kwdef mutable struct Command <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    token::Union{Nothing, String} = nothing
    create_at::Union{Nothing, Int64} = nothing
    update_at::Union{Nothing, Int64} = nothing
    delete_at::Union{Nothing, Int64} = nothing
    creator_id::Union{Nothing, String} = nothing
    team_id::Union{Nothing, String} = nothing
    trigger::Union{Nothing, String} = nothing
    method::Union{Nothing, String} = nothing
    username::Union{Nothing, String} = nothing
    icon_url::Union{Nothing, String} = nothing
    auto_complete::Union{Nothing, Bool} = nothing
    auto_complete_desc::Union{Nothing, String} = nothing
    auto_complete_hint::Union{Nothing, String} = nothing
    display_name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing

    function Command(id, token, create_at, update_at, delete_at, creator_id, team_id, trigger, method, username, icon_url, auto_complete, auto_complete_desc, auto_complete_hint, display_name, description, url, )
        OpenAPI.validate_property(Command, Symbol("id"), id)
        OpenAPI.validate_property(Command, Symbol("token"), token)
        OpenAPI.validate_property(Command, Symbol("create_at"), create_at)
        OpenAPI.validate_property(Command, Symbol("update_at"), update_at)
        OpenAPI.validate_property(Command, Symbol("delete_at"), delete_at)
        OpenAPI.validate_property(Command, Symbol("creator_id"), creator_id)
        OpenAPI.validate_property(Command, Symbol("team_id"), team_id)
        OpenAPI.validate_property(Command, Symbol("trigger"), trigger)
        OpenAPI.validate_property(Command, Symbol("method"), method)
        OpenAPI.validate_property(Command, Symbol("username"), username)
        OpenAPI.validate_property(Command, Symbol("icon_url"), icon_url)
        OpenAPI.validate_property(Command, Symbol("auto_complete"), auto_complete)
        OpenAPI.validate_property(Command, Symbol("auto_complete_desc"), auto_complete_desc)
        OpenAPI.validate_property(Command, Symbol("auto_complete_hint"), auto_complete_hint)
        OpenAPI.validate_property(Command, Symbol("display_name"), display_name)
        OpenAPI.validate_property(Command, Symbol("description"), description)
        OpenAPI.validate_property(Command, Symbol("url"), url)
        return new(id, token, create_at, update_at, delete_at, creator_id, team_id, trigger, method, username, icon_url, auto_complete, auto_complete_desc, auto_complete_hint, display_name, description, url, )
    end
end # type Command

const _property_types_Command = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("token")=>"String", Symbol("create_at")=>"Int64", Symbol("update_at")=>"Int64", Symbol("delete_at")=>"Int64", Symbol("creator_id")=>"String", Symbol("team_id")=>"String", Symbol("trigger")=>"String", Symbol("method")=>"String", Symbol("username")=>"String", Symbol("icon_url")=>"String", Symbol("auto_complete")=>"Bool", Symbol("auto_complete_desc")=>"String", Symbol("auto_complete_hint")=>"String", Symbol("display_name")=>"String", Symbol("description")=>"String", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ Command }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Command[name]))}

function check_required(o::Command)
    true
end

function OpenAPI.validate_property(::Type{ Command }, name::Symbol, val)
    if name === Symbol("update_at")
        OpenAPI.validate_param(name, "Command", :format, val, "int64")
    end
    if name === Symbol("delete_at")
        OpenAPI.validate_param(name, "Command", :format, val, "int64")
    end
end
