# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Emoji

    Emoji(;
        id=nothing,
        creator_id=nothing,
        name=nothing,
        create_at=nothing,
        update_at=nothing,
        delete_at=nothing,
    )

    - id::String : The ID of the emoji
    - creator_id::String : The ID of the user that made the emoji
    - name::String : The name of the emoji
    - create_at::Int64 : The time in milliseconds the emoji was made
    - update_at::Int64 : The time in milliseconds the emoji was last updated
    - delete_at::Int64 : The time in milliseconds the emoji was deleted
"""
Base.@kwdef mutable struct Emoji <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    creator_id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    create_at::Union{Nothing, Int64} = nothing
    update_at::Union{Nothing, Int64} = nothing
    delete_at::Union{Nothing, Int64} = nothing

    function Emoji(id, creator_id, name, create_at, update_at, delete_at, )
        OpenAPI.validate_property(Emoji, Symbol("id"), id)
        OpenAPI.validate_property(Emoji, Symbol("creator_id"), creator_id)
        OpenAPI.validate_property(Emoji, Symbol("name"), name)
        OpenAPI.validate_property(Emoji, Symbol("create_at"), create_at)
        OpenAPI.validate_property(Emoji, Symbol("update_at"), update_at)
        OpenAPI.validate_property(Emoji, Symbol("delete_at"), delete_at)
        return new(id, creator_id, name, create_at, update_at, delete_at, )
    end
end # type Emoji

const _property_types_Emoji = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("creator_id")=>"String", Symbol("name")=>"String", Symbol("create_at")=>"Int64", Symbol("update_at")=>"Int64", Symbol("delete_at")=>"Int64", )
OpenAPI.property_type(::Type{ Emoji }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Emoji[name]))}

function check_required(o::Emoji)
    true
end

function OpenAPI.validate_property(::Type{ Emoji }, name::Symbol, val)
    if name === Symbol("create_at")
        OpenAPI.validate_param(name, "Emoji", :format, val, "int64")
    end
    if name === Symbol("update_at")
        OpenAPI.validate_param(name, "Emoji", :format, val, "int64")
    end
    if name === Symbol("delete_at")
        OpenAPI.validate_param(name, "Emoji", :format, val, "int64")
    end
end
