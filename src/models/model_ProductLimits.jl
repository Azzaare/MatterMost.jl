# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProductLimits

    ProductLimits(;
        boards=nothing,
        files=nothing,
        integrations=nothing,
        messages=nothing,
        teams=nothing,
    )

    - boards::BoardsLimits
    - files::FilesLimits
    - integrations::IntegrationsLimits
    - messages::MessagesLimits
    - teams::TeamsLimits
"""
Base.@kwdef mutable struct ProductLimits <: OpenAPI.APIModel
    boards = nothing # spec type: Union{ Nothing, BoardsLimits }
    files = nothing # spec type: Union{ Nothing, FilesLimits }
    integrations = nothing # spec type: Union{ Nothing, IntegrationsLimits }
    messages = nothing # spec type: Union{ Nothing, MessagesLimits }
    teams = nothing # spec type: Union{ Nothing, TeamsLimits }

    function ProductLimits(boards, files, integrations, messages, teams, )
        OpenAPI.validate_property(ProductLimits, Symbol("boards"), boards)
        OpenAPI.validate_property(ProductLimits, Symbol("files"), files)
        OpenAPI.validate_property(ProductLimits, Symbol("integrations"), integrations)
        OpenAPI.validate_property(ProductLimits, Symbol("messages"), messages)
        OpenAPI.validate_property(ProductLimits, Symbol("teams"), teams)
        return new(boards, files, integrations, messages, teams, )
    end
end # type ProductLimits

const _property_types_ProductLimits = Dict{Symbol,String}(Symbol("boards")=>"BoardsLimits", Symbol("files")=>"FilesLimits", Symbol("integrations")=>"IntegrationsLimits", Symbol("messages")=>"MessagesLimits", Symbol("teams")=>"TeamsLimits", )
OpenAPI.property_type(::Type{ ProductLimits }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProductLimits[name]))}

function check_required(o::ProductLimits)
    true
end

function OpenAPI.validate_property(::Type{ ProductLimits }, name::Symbol, val)
end
