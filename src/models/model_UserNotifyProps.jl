# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UserNotifyProps

    UserNotifyProps(;
        email=nothing,
        push=nothing,
        desktop=nothing,
        desktop_sound=nothing,
        mention_keys=nothing,
        channel=nothing,
        first_name=nothing,
    )

    - email::String : Set to \&quot;true\&quot; to enable email notifications, \&quot;false\&quot; to disable. Defaults to \&quot;true\&quot;.
    - push::String : Set to \&quot;all\&quot; to receive push notifications for all activity, \&quot;mention\&quot; for mentions and direct messages only, and \&quot;none\&quot; to disable. Defaults to \&quot;mention\&quot;.
    - desktop::String : Set to \&quot;all\&quot; to receive desktop notifications for all activity, \&quot;mention\&quot; for mentions and direct messages only, and \&quot;none\&quot; to disable. Defaults to \&quot;all\&quot;.
    - desktop_sound::String : Set to \&quot;true\&quot; to enable sound on desktop notifications, \&quot;false\&quot; to disable. Defaults to \&quot;true\&quot;.
    - mention_keys::String : A comma-separated list of words to count as mentions. Defaults to username and @username.
    - channel::String : Set to \&quot;true\&quot; to enable channel-wide notifications (@channel, @all, etc.), \&quot;false\&quot; to disable. Defaults to \&quot;true\&quot;.
    - first_name::String : Set to \&quot;true\&quot; to enable mentions for first name. Defaults to \&quot;true\&quot; if a first name is set, \&quot;false\&quot; otherwise.
"""
Base.@kwdef mutable struct UserNotifyProps <: OpenAPI.APIModel
    email::Union{Nothing, String} = nothing
    push::Union{Nothing, String} = nothing
    desktop::Union{Nothing, String} = nothing
    desktop_sound::Union{Nothing, String} = nothing
    mention_keys::Union{Nothing, String} = nothing
    channel::Union{Nothing, String} = nothing
    first_name::Union{Nothing, String} = nothing

    function UserNotifyProps(email, push, desktop, desktop_sound, mention_keys, channel, first_name, )
        OpenAPI.validate_property(UserNotifyProps, Symbol("email"), email)
        OpenAPI.validate_property(UserNotifyProps, Symbol("push"), push)
        OpenAPI.validate_property(UserNotifyProps, Symbol("desktop"), desktop)
        OpenAPI.validate_property(UserNotifyProps, Symbol("desktop_sound"), desktop_sound)
        OpenAPI.validate_property(UserNotifyProps, Symbol("mention_keys"), mention_keys)
        OpenAPI.validate_property(UserNotifyProps, Symbol("channel"), channel)
        OpenAPI.validate_property(UserNotifyProps, Symbol("first_name"), first_name)
        return new(email, push, desktop, desktop_sound, mention_keys, channel, first_name, )
    end
end # type UserNotifyProps

const _property_types_UserNotifyProps = Dict{Symbol,String}(Symbol("email")=>"String", Symbol("push")=>"String", Symbol("desktop")=>"String", Symbol("desktop_sound")=>"String", Symbol("mention_keys")=>"String", Symbol("channel")=>"String", Symbol("first_name")=>"String", )
OpenAPI.property_type(::Type{ UserNotifyProps }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UserNotifyProps[name]))}

function check_required(o::UserNotifyProps)
    true
end

function OpenAPI.validate_property(::Type{ UserNotifyProps }, name::Symbol, val)
end
