# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Session

    Session(;
        create_at=nothing,
        device_id=nothing,
        expires_at=nothing,
        id=nothing,
        is_oauth=nothing,
        last_activity_at=nothing,
        props=nothing,
        roles=nothing,
        team_members=nothing,
        token=nothing,
        user_id=nothing,
    )

    - create_at::Int64 : The time in milliseconds a session was created
    - device_id::String
    - expires_at::Int64 : The time in milliseconds a session will expire
    - id::String
    - is_oauth::Bool
    - last_activity_at::Int64 : The time in milliseconds of the last activity of a session
    - props::Any
    - roles::String
    - team_members::Vector{TeamMember}
    - token::String
    - user_id::String
"""
Base.@kwdef mutable struct Session <: OpenAPI.APIModel
    create_at::Union{Nothing, Int64} = nothing
    device_id::Union{Nothing, String} = nothing
    expires_at::Union{Nothing, Int64} = nothing
    id::Union{Nothing, String} = nothing
    is_oauth::Union{Nothing, Bool} = nothing
    last_activity_at::Union{Nothing, Int64} = nothing
    props::Union{Nothing, Any} = nothing
    roles::Union{Nothing, String} = nothing
    team_members::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TeamMember} }
    token::Union{Nothing, String} = nothing
    user_id::Union{Nothing, String} = nothing

    function Session(create_at, device_id, expires_at, id, is_oauth, last_activity_at, props, roles, team_members, token, user_id, )
        OpenAPI.validate_property(Session, Symbol("create_at"), create_at)
        OpenAPI.validate_property(Session, Symbol("device_id"), device_id)
        OpenAPI.validate_property(Session, Symbol("expires_at"), expires_at)
        OpenAPI.validate_property(Session, Symbol("id"), id)
        OpenAPI.validate_property(Session, Symbol("is_oauth"), is_oauth)
        OpenAPI.validate_property(Session, Symbol("last_activity_at"), last_activity_at)
        OpenAPI.validate_property(Session, Symbol("props"), props)
        OpenAPI.validate_property(Session, Symbol("roles"), roles)
        OpenAPI.validate_property(Session, Symbol("team_members"), team_members)
        OpenAPI.validate_property(Session, Symbol("token"), token)
        OpenAPI.validate_property(Session, Symbol("user_id"), user_id)
        return new(create_at, device_id, expires_at, id, is_oauth, last_activity_at, props, roles, team_members, token, user_id, )
    end
end # type Session

const _property_types_Session = Dict{Symbol,String}(Symbol("create_at")=>"Int64", Symbol("device_id")=>"String", Symbol("expires_at")=>"Int64", Symbol("id")=>"String", Symbol("is_oauth")=>"Bool", Symbol("last_activity_at")=>"Int64", Symbol("props")=>"Any", Symbol("roles")=>"String", Symbol("team_members")=>"Vector{TeamMember}", Symbol("token")=>"String", Symbol("user_id")=>"String", )
OpenAPI.property_type(::Type{ Session }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Session[name]))}

function check_required(o::Session)
    true
end

function OpenAPI.validate_property(::Type{ Session }, name::Symbol, val)
    if name === Symbol("create_at")
        OpenAPI.validate_param(name, "Session", :format, val, "int64")
    end
    if name === Symbol("expires_at")
        OpenAPI.validate_param(name, "Session", :format, val, "int64")
    end
    if name === Symbol("last_activity_at")
        OpenAPI.validate_param(name, "Session", :format, val, "int64")
    end
end
