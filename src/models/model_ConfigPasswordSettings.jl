# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Config_PasswordSettings

    ConfigPasswordSettings(;
        MinimumLength=nothing,
        Lowercase=nothing,
        Number=nothing,
        Uppercase=nothing,
        Symbol=nothing,
    )

    - MinimumLength::Int64
    - Lowercase::Bool
    - Number::Bool
    - Uppercase::Bool
    - Symbol::Bool
"""
Base.@kwdef mutable struct ConfigPasswordSettings <: OpenAPI.APIModel
    MinimumLength::Union{Nothing, Int64} = nothing
    Lowercase::Union{Nothing, Bool} = nothing
    Number::Union{Nothing, Bool} = nothing
    Uppercase::Union{Nothing, Bool} = nothing
    Symbol::Union{Nothing, Bool} = nothing

    function ConfigPasswordSettings(MinimumLength, Lowercase, Number, Uppercase, Symbol, )
        OpenAPI.validate_property(ConfigPasswordSettings, Symbol("MinimumLength"), MinimumLength)
        OpenAPI.validate_property(ConfigPasswordSettings, Symbol("Lowercase"), Lowercase)
        OpenAPI.validate_property(ConfigPasswordSettings, Symbol("Number"), Number)
        OpenAPI.validate_property(ConfigPasswordSettings, Symbol("Uppercase"), Uppercase)
        OpenAPI.validate_property(ConfigPasswordSettings, Symbol("Symbol"), Symbol)
        return new(MinimumLength, Lowercase, Number, Uppercase, Symbol, )
    end
end # type ConfigPasswordSettings

const _property_types_ConfigPasswordSettings = Dict{Symbol,String}(Symbol("MinimumLength")=>"Int64", Symbol("Lowercase")=>"Bool", Symbol("Number")=>"Bool", Symbol("Uppercase")=>"Bool", Symbol("Symbol")=>"Bool", )
OpenAPI.property_type(::Type{ ConfigPasswordSettings }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConfigPasswordSettings[name]))}

function check_required(o::ConfigPasswordSettings)
    true
end

function OpenAPI.validate_property(::Type{ ConfigPasswordSettings }, name::Symbol, val)
end
