# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PostListWithSearchMatches

    PostListWithSearchMatches(;
        order=nothing,
        posts=nothing,
        matches=nothing,
    )

    - order::Vector{String}
    - posts::Dict{String, Post}
    - matches::Dict{String, Vector{String}} : A mapping of post IDs to a list of matched terms within the post. This field will only be populated on servers running version 5.1 or greater with Elasticsearch enabled.
"""
Base.@kwdef mutable struct PostListWithSearchMatches <: OpenAPI.APIModel
    order::Union{Nothing, Vector{String}} = nothing
    posts::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Post} }
    matches::Union{Nothing, Dict{String, Vector{String}}} = nothing

    function PostListWithSearchMatches(order, posts, matches, )
        OpenAPI.validate_property(PostListWithSearchMatches, Symbol("order"), order)
        OpenAPI.validate_property(PostListWithSearchMatches, Symbol("posts"), posts)
        OpenAPI.validate_property(PostListWithSearchMatches, Symbol("matches"), matches)
        return new(order, posts, matches, )
    end
end # type PostListWithSearchMatches

const _property_types_PostListWithSearchMatches = Dict{Symbol,String}(Symbol("order")=>"Vector{String}", Symbol("posts")=>"Dict{String, Post}", Symbol("matches")=>"Dict{String, Vector{String}}", )
OpenAPI.property_type(::Type{ PostListWithSearchMatches }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PostListWithSearchMatches[name]))}

function check_required(o::PostListWithSearchMatches)
    true
end

function OpenAPI.validate_property(::Type{ PostListWithSearchMatches }, name::Symbol, val)
end
