# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateTeam_request

    CreateTeamRequest(;
        name=nothing,
        display_name=nothing,
        type=nothing,
    )

    - name::String : Unique handler for a team, will be present in the team URL
    - display_name::String : Non-unique UI name for the team
    - type::String : &#x60;&#39;O&#39;&#x60; for open, &#x60;&#39;I&#39;&#x60; for invite only
"""
Base.@kwdef mutable struct CreateTeamRequest <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    display_name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function CreateTeamRequest(name, display_name, type, )
        OpenAPI.validate_property(CreateTeamRequest, Symbol("name"), name)
        OpenAPI.validate_property(CreateTeamRequest, Symbol("display_name"), display_name)
        OpenAPI.validate_property(CreateTeamRequest, Symbol("type"), type)
        return new(name, display_name, type, )
    end
end # type CreateTeamRequest

const _property_types_CreateTeamRequest = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("display_name")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ CreateTeamRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateTeamRequest[name]))}

function check_required(o::CreateTeamRequest)
    o.name === nothing && (return false)
    o.display_name === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateTeamRequest }, name::Symbol, val)
end
