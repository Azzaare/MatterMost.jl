# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""User

    User(;
        id=nothing,
        create_at=nothing,
        update_at=nothing,
        delete_at=nothing,
        username=nothing,
        first_name=nothing,
        last_name=nothing,
        nickname=nothing,
        email=nothing,
        email_verified=nothing,
        auth_service=nothing,
        roles=nothing,
        locale=nothing,
        notify_props=nothing,
        props=nothing,
        last_password_update=nothing,
        last_picture_update=nothing,
        failed_attempts=nothing,
        mfa_active=nothing,
        timezone=nothing,
        terms_of_service_id=nothing,
        terms_of_service_create_at=nothing,
    )

    - id::String
    - create_at::Int64 : The time in milliseconds a user was created
    - update_at::Int64 : The time in milliseconds a user was last updated
    - delete_at::Int64 : The time in milliseconds a user was deleted
    - username::String
    - first_name::String
    - last_name::String
    - nickname::String
    - email::String
    - email_verified::Bool
    - auth_service::String
    - roles::String
    - locale::String
    - notify_props::UserNotifyProps
    - props::Any
    - last_password_update::Int64
    - last_picture_update::Int64
    - failed_attempts::Int64
    - mfa_active::Bool
    - timezone::Timezone
    - terms_of_service_id::String : ID of accepted terms of service, if any. This field is not present if empty.
    - terms_of_service_create_at::Int64 : The time in milliseconds the user accepted the terms of service
"""
Base.@kwdef mutable struct User <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    create_at::Union{Nothing, Int64} = nothing
    update_at::Union{Nothing, Int64} = nothing
    delete_at::Union{Nothing, Int64} = nothing
    username::Union{Nothing, String} = nothing
    first_name::Union{Nothing, String} = nothing
    last_name::Union{Nothing, String} = nothing
    nickname::Union{Nothing, String} = nothing
    email::Union{Nothing, String} = nothing
    email_verified::Union{Nothing, Bool} = nothing
    auth_service::Union{Nothing, String} = nothing
    roles::Union{Nothing, String} = nothing
    locale::Union{Nothing, String} = nothing
    notify_props = nothing # spec type: Union{ Nothing, UserNotifyProps }
    props::Union{Nothing, Any} = nothing
    last_password_update::Union{Nothing, Int64} = nothing
    last_picture_update::Union{Nothing, Int64} = nothing
    failed_attempts::Union{Nothing, Int64} = nothing
    mfa_active::Union{Nothing, Bool} = nothing
    timezone = nothing # spec type: Union{ Nothing, Timezone }
    terms_of_service_id::Union{Nothing, String} = nothing
    terms_of_service_create_at::Union{Nothing, Int64} = nothing

    function User(id, create_at, update_at, delete_at, username, first_name, last_name, nickname, email, email_verified, auth_service, roles, locale, notify_props, props, last_password_update, last_picture_update, failed_attempts, mfa_active, timezone, terms_of_service_id, terms_of_service_create_at, )
        OpenAPI.validate_property(User, Symbol("id"), id)
        OpenAPI.validate_property(User, Symbol("create_at"), create_at)
        OpenAPI.validate_property(User, Symbol("update_at"), update_at)
        OpenAPI.validate_property(User, Symbol("delete_at"), delete_at)
        OpenAPI.validate_property(User, Symbol("username"), username)
        OpenAPI.validate_property(User, Symbol("first_name"), first_name)
        OpenAPI.validate_property(User, Symbol("last_name"), last_name)
        OpenAPI.validate_property(User, Symbol("nickname"), nickname)
        OpenAPI.validate_property(User, Symbol("email"), email)
        OpenAPI.validate_property(User, Symbol("email_verified"), email_verified)
        OpenAPI.validate_property(User, Symbol("auth_service"), auth_service)
        OpenAPI.validate_property(User, Symbol("roles"), roles)
        OpenAPI.validate_property(User, Symbol("locale"), locale)
        OpenAPI.validate_property(User, Symbol("notify_props"), notify_props)
        OpenAPI.validate_property(User, Symbol("props"), props)
        OpenAPI.validate_property(User, Symbol("last_password_update"), last_password_update)
        OpenAPI.validate_property(User, Symbol("last_picture_update"), last_picture_update)
        OpenAPI.validate_property(User, Symbol("failed_attempts"), failed_attempts)
        OpenAPI.validate_property(User, Symbol("mfa_active"), mfa_active)
        OpenAPI.validate_property(User, Symbol("timezone"), timezone)
        OpenAPI.validate_property(User, Symbol("terms_of_service_id"), terms_of_service_id)
        OpenAPI.validate_property(User, Symbol("terms_of_service_create_at"), terms_of_service_create_at)
        return new(id, create_at, update_at, delete_at, username, first_name, last_name, nickname, email, email_verified, auth_service, roles, locale, notify_props, props, last_password_update, last_picture_update, failed_attempts, mfa_active, timezone, terms_of_service_id, terms_of_service_create_at, )
    end
end # type User

const _property_types_User = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("create_at")=>"Int64", Symbol("update_at")=>"Int64", Symbol("delete_at")=>"Int64", Symbol("username")=>"String", Symbol("first_name")=>"String", Symbol("last_name")=>"String", Symbol("nickname")=>"String", Symbol("email")=>"String", Symbol("email_verified")=>"Bool", Symbol("auth_service")=>"String", Symbol("roles")=>"String", Symbol("locale")=>"String", Symbol("notify_props")=>"UserNotifyProps", Symbol("props")=>"Any", Symbol("last_password_update")=>"Int64", Symbol("last_picture_update")=>"Int64", Symbol("failed_attempts")=>"Int64", Symbol("mfa_active")=>"Bool", Symbol("timezone")=>"Timezone", Symbol("terms_of_service_id")=>"String", Symbol("terms_of_service_create_at")=>"Int64", )
OpenAPI.property_type(::Type{ User }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_User[name]))}

function check_required(o::User)
    true
end

function OpenAPI.validate_property(::Type{ User }, name::Symbol, val)
    if name === Symbol("create_at")
        OpenAPI.validate_param(name, "User", :format, val, "int64")
    end
    if name === Symbol("update_at")
        OpenAPI.validate_param(name, "User", :format, val, "int64")
    end
    if name === Symbol("delete_at")
        OpenAPI.validate_param(name, "User", :format, val, "int64")
    end
    if name === Symbol("terms_of_service_create_at")
        OpenAPI.validate_param(name, "User", :format, val, "int64")
    end
end
