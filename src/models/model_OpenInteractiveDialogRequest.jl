# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OpenInteractiveDialog_request

    OpenInteractiveDialogRequest(;
        trigger_id=nothing,
        url=nothing,
        dialog=nothing,
    )

    - trigger_id::String : Trigger ID provided by other action
    - url::String : The URL to send the submitted dialog payload to
    - dialog::OpenInteractiveDialogRequestDialog
"""
Base.@kwdef mutable struct OpenInteractiveDialogRequest <: OpenAPI.APIModel
    trigger_id::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    dialog = nothing # spec type: Union{ Nothing, OpenInteractiveDialogRequestDialog }

    function OpenInteractiveDialogRequest(trigger_id, url, dialog, )
        OpenAPI.validate_property(OpenInteractiveDialogRequest, Symbol("trigger_id"), trigger_id)
        OpenAPI.validate_property(OpenInteractiveDialogRequest, Symbol("url"), url)
        OpenAPI.validate_property(OpenInteractiveDialogRequest, Symbol("dialog"), dialog)
        return new(trigger_id, url, dialog, )
    end
end # type OpenInteractiveDialogRequest

const _property_types_OpenInteractiveDialogRequest = Dict{Symbol,String}(Symbol("trigger_id")=>"String", Symbol("url")=>"String", Symbol("dialog")=>"OpenInteractiveDialogRequestDialog", )
OpenAPI.property_type(::Type{ OpenInteractiveDialogRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OpenInteractiveDialogRequest[name]))}

function check_required(o::OpenInteractiveDialogRequest)
    o.trigger_id === nothing && (return false)
    o.url === nothing && (return false)
    o.dialog === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OpenInteractiveDialogRequest }, name::Symbol, val)
end
