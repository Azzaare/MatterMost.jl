# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OpenGraph
OpenGraph metadata of a webpage

    OpenGraph(;
        type=nothing,
        url=nothing,
        title=nothing,
        description=nothing,
        determiner=nothing,
        site_name=nothing,
        locale=nothing,
        locales_alternate=nothing,
        images=nothing,
        videos=nothing,
        audios=nothing,
        article=nothing,
        book=nothing,
        profile=nothing,
    )

    - type::String
    - url::String
    - title::String
    - description::String
    - determiner::String
    - site_name::String
    - locale::String
    - locales_alternate::Vector{String}
    - images::Vector{OpenGraphImagesInner}
    - videos::Vector{OpenGraphVideosInner}
    - audios::Vector{OpenGraphAudiosInner}
    - article::OpenGraphArticle
    - book::OpenGraphBook
    - profile::OpenGraphArticleAuthorsInner
"""
Base.@kwdef mutable struct OpenGraph <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    determiner::Union{Nothing, String} = nothing
    site_name::Union{Nothing, String} = nothing
    locale::Union{Nothing, String} = nothing
    locales_alternate::Union{Nothing, Vector{String}} = nothing
    images::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OpenGraphImagesInner} }
    videos::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OpenGraphVideosInner} }
    audios::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OpenGraphAudiosInner} }
    article = nothing # spec type: Union{ Nothing, OpenGraphArticle }
    book = nothing # spec type: Union{ Nothing, OpenGraphBook }
    profile = nothing # spec type: Union{ Nothing, OpenGraphArticleAuthorsInner }

    function OpenGraph(type, url, title, description, determiner, site_name, locale, locales_alternate, images, videos, audios, article, book, profile, )
        OpenAPI.validate_property(OpenGraph, Symbol("type"), type)
        OpenAPI.validate_property(OpenGraph, Symbol("url"), url)
        OpenAPI.validate_property(OpenGraph, Symbol("title"), title)
        OpenAPI.validate_property(OpenGraph, Symbol("description"), description)
        OpenAPI.validate_property(OpenGraph, Symbol("determiner"), determiner)
        OpenAPI.validate_property(OpenGraph, Symbol("site_name"), site_name)
        OpenAPI.validate_property(OpenGraph, Symbol("locale"), locale)
        OpenAPI.validate_property(OpenGraph, Symbol("locales_alternate"), locales_alternate)
        OpenAPI.validate_property(OpenGraph, Symbol("images"), images)
        OpenAPI.validate_property(OpenGraph, Symbol("videos"), videos)
        OpenAPI.validate_property(OpenGraph, Symbol("audios"), audios)
        OpenAPI.validate_property(OpenGraph, Symbol("article"), article)
        OpenAPI.validate_property(OpenGraph, Symbol("book"), book)
        OpenAPI.validate_property(OpenGraph, Symbol("profile"), profile)
        return new(type, url, title, description, determiner, site_name, locale, locales_alternate, images, videos, audios, article, book, profile, )
    end
end # type OpenGraph

const _property_types_OpenGraph = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("url")=>"String", Symbol("title")=>"String", Symbol("description")=>"String", Symbol("determiner")=>"String", Symbol("site_name")=>"String", Symbol("locale")=>"String", Symbol("locales_alternate")=>"Vector{String}", Symbol("images")=>"Vector{OpenGraphImagesInner}", Symbol("videos")=>"Vector{OpenGraphVideosInner}", Symbol("audios")=>"Vector{OpenGraphAudiosInner}", Symbol("article")=>"OpenGraphArticle", Symbol("book")=>"OpenGraphBook", Symbol("profile")=>"OpenGraphArticleAuthorsInner", )
OpenAPI.property_type(::Type{ OpenGraph }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OpenGraph[name]))}

function check_required(o::OpenGraph)
    true
end

function OpenAPI.validate_property(::Type{ OpenGraph }, name::Symbol, val)
end
