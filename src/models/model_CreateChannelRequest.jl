# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateChannel_request

    CreateChannelRequest(;
        team_id=nothing,
        name=nothing,
        display_name=nothing,
        purpose=nothing,
        header=nothing,
        type=nothing,
    )

    - team_id::String : The team ID of the team to create the channel on
    - name::String : The unique handle for the channel, will be present in the channel URL
    - display_name::String : The non-unique UI name for the channel
    - purpose::String : A short description of the purpose of the channel
    - header::String : Markdown-formatted text to display in the header of the channel
    - type::String : &#39;O&#39; for a public channel, &#39;P&#39; for a private channel
"""
Base.@kwdef mutable struct CreateChannelRequest <: OpenAPI.APIModel
    team_id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    display_name::Union{Nothing, String} = nothing
    purpose::Union{Nothing, String} = nothing
    header::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function CreateChannelRequest(team_id, name, display_name, purpose, header, type, )
        OpenAPI.validate_property(CreateChannelRequest, Symbol("team_id"), team_id)
        OpenAPI.validate_property(CreateChannelRequest, Symbol("name"), name)
        OpenAPI.validate_property(CreateChannelRequest, Symbol("display_name"), display_name)
        OpenAPI.validate_property(CreateChannelRequest, Symbol("purpose"), purpose)
        OpenAPI.validate_property(CreateChannelRequest, Symbol("header"), header)
        OpenAPI.validate_property(CreateChannelRequest, Symbol("type"), type)
        return new(team_id, name, display_name, purpose, header, type, )
    end
end # type CreateChannelRequest

const _property_types_CreateChannelRequest = Dict{Symbol,String}(Symbol("team_id")=>"String", Symbol("name")=>"String", Symbol("display_name")=>"String", Symbol("purpose")=>"String", Symbol("header")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ CreateChannelRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateChannelRequest[name]))}

function check_required(o::CreateChannelRequest)
    o.team_id === nothing && (return false)
    o.name === nothing && (return false)
    o.display_name === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateChannelRequest }, name::Symbol, val)
end
