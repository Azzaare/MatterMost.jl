# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PostMetadata
Additional information used to display a post.

    PostMetadata(;
        embeds=nothing,
        emojis=nothing,
        files=nothing,
        images=nothing,
        reactions=nothing,
    )

    - embeds::Vector{PostMetadataEmbedsInner} : Information about content embedded in the post including OpenGraph previews, image link previews, and message attachments. This field will be null if the post does not contain embedded content. 
    - emojis::Vector{Emoji} : The custom emojis that appear in this point or have been used in reactions to this post. This field will be null if the post does not contain custom emojis. 
    - files::Vector{FileInfo} : The FileInfo objects for any files attached to the post. This field will be null if the post does not have any file attachments. 
    - images::Vector{PostMetadataImagesInner} : An object mapping the URL of an external image to an object containing the dimensions of that image. This field will be null if the post or its embedded content does not reference any external images. 
    - reactions::Vector{Reaction} : Any reactions made to this point. This field will be null if no reactions have been made to this post. 
"""
Base.@kwdef mutable struct PostMetadata <: OpenAPI.APIModel
    embeds::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PostMetadataEmbedsInner} }
    emojis::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Emoji} }
    files::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{FileInfo} }
    images::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PostMetadataImagesInner} }
    reactions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Reaction} }

    function PostMetadata(embeds, emojis, files, images, reactions, )
        OpenAPI.validate_property(PostMetadata, Symbol("embeds"), embeds)
        OpenAPI.validate_property(PostMetadata, Symbol("emojis"), emojis)
        OpenAPI.validate_property(PostMetadata, Symbol("files"), files)
        OpenAPI.validate_property(PostMetadata, Symbol("images"), images)
        OpenAPI.validate_property(PostMetadata, Symbol("reactions"), reactions)
        return new(embeds, emojis, files, images, reactions, )
    end
end # type PostMetadata

const _property_types_PostMetadata = Dict{Symbol,String}(Symbol("embeds")=>"Vector{PostMetadataEmbedsInner}", Symbol("emojis")=>"Vector{Emoji}", Symbol("files")=>"Vector{FileInfo}", Symbol("images")=>"Vector{PostMetadataImagesInner}", Symbol("reactions")=>"Vector{Reaction}", )
OpenAPI.property_type(::Type{ PostMetadata }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PostMetadata[name]))}

function check_required(o::PostMetadata)
    true
end

function OpenAPI.validate_property(::Type{ PostMetadata }, name::Symbol, val)
end
