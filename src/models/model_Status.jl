# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Status

    Status(;
        user_id=nothing,
        status=nothing,
        manual=nothing,
        last_activity_at=nothing,
    )

    - user_id::String
    - status::String
    - manual::Bool
    - last_activity_at::Int64
"""
Base.@kwdef mutable struct Status <: OpenAPI.APIModel
    user_id::Union{Nothing, String} = nothing
    status::Union{Nothing, String} = nothing
    manual::Union{Nothing, Bool} = nothing
    last_activity_at::Union{Nothing, Int64} = nothing

    function Status(user_id, status, manual, last_activity_at, )
        OpenAPI.validate_property(Status, Symbol("user_id"), user_id)
        OpenAPI.validate_property(Status, Symbol("status"), status)
        OpenAPI.validate_property(Status, Symbol("manual"), manual)
        OpenAPI.validate_property(Status, Symbol("last_activity_at"), last_activity_at)
        return new(user_id, status, manual, last_activity_at, )
    end
end # type Status

const _property_types_Status = Dict{Symbol,String}(Symbol("user_id")=>"String", Symbol("status")=>"String", Symbol("manual")=>"Bool", Symbol("last_activity_at")=>"Int64", )
OpenAPI.property_type(::Type{ Status }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Status[name]))}

function check_required(o::Status)
    true
end

function OpenAPI.validate_property(::Type{ Status }, name::Symbol, val)
    if name === Symbol("last_activity_at")
        OpenAPI.validate_param(name, "Status", :format, val, "int64")
    end
end
