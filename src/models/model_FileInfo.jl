# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FileInfo

    FileInfo(;
        id=nothing,
        user_id=nothing,
        post_id=nothing,
        create_at=nothing,
        update_at=nothing,
        delete_at=nothing,
        name=nothing,
        extension=nothing,
        size=nothing,
        mime_type=nothing,
        width=nothing,
        height=nothing,
        has_preview_image=nothing,
    )

    - id::String : The unique identifier for this file
    - user_id::String : The ID of the user that uploaded this file
    - post_id::String : If this file is attached to a post, the ID of that post
    - create_at::Int64 : The time in milliseconds a file was created
    - update_at::Int64 : The time in milliseconds a file was last updated
    - delete_at::Int64 : The time in milliseconds a file was deleted
    - name::String : The name of the file
    - extension::String : The extension at the end of the file name
    - size::Int64 : The size of the file in bytes
    - mime_type::String : The MIME type of the file
    - width::Int64 : If this file is an image, the width of the file
    - height::Int64 : If this file is an image, the height of the file
    - has_preview_image::Bool : If this file is an image, whether or not it has a preview-sized version
"""
Base.@kwdef mutable struct FileInfo <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    user_id::Union{Nothing, String} = nothing
    post_id::Union{Nothing, String} = nothing
    create_at::Union{Nothing, Int64} = nothing
    update_at::Union{Nothing, Int64} = nothing
    delete_at::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    extension::Union{Nothing, String} = nothing
    size::Union{Nothing, Int64} = nothing
    mime_type::Union{Nothing, String} = nothing
    width::Union{Nothing, Int64} = nothing
    height::Union{Nothing, Int64} = nothing
    has_preview_image::Union{Nothing, Bool} = nothing

    function FileInfo(id, user_id, post_id, create_at, update_at, delete_at, name, extension, size, mime_type, width, height, has_preview_image, )
        OpenAPI.validate_property(FileInfo, Symbol("id"), id)
        OpenAPI.validate_property(FileInfo, Symbol("user_id"), user_id)
        OpenAPI.validate_property(FileInfo, Symbol("post_id"), post_id)
        OpenAPI.validate_property(FileInfo, Symbol("create_at"), create_at)
        OpenAPI.validate_property(FileInfo, Symbol("update_at"), update_at)
        OpenAPI.validate_property(FileInfo, Symbol("delete_at"), delete_at)
        OpenAPI.validate_property(FileInfo, Symbol("name"), name)
        OpenAPI.validate_property(FileInfo, Symbol("extension"), extension)
        OpenAPI.validate_property(FileInfo, Symbol("size"), size)
        OpenAPI.validate_property(FileInfo, Symbol("mime_type"), mime_type)
        OpenAPI.validate_property(FileInfo, Symbol("width"), width)
        OpenAPI.validate_property(FileInfo, Symbol("height"), height)
        OpenAPI.validate_property(FileInfo, Symbol("has_preview_image"), has_preview_image)
        return new(id, user_id, post_id, create_at, update_at, delete_at, name, extension, size, mime_type, width, height, has_preview_image, )
    end
end # type FileInfo

const _property_types_FileInfo = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("user_id")=>"String", Symbol("post_id")=>"String", Symbol("create_at")=>"Int64", Symbol("update_at")=>"Int64", Symbol("delete_at")=>"Int64", Symbol("name")=>"String", Symbol("extension")=>"String", Symbol("size")=>"Int64", Symbol("mime_type")=>"String", Symbol("width")=>"Int64", Symbol("height")=>"Int64", Symbol("has_preview_image")=>"Bool", )
OpenAPI.property_type(::Type{ FileInfo }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FileInfo[name]))}

function check_required(o::FileInfo)
    true
end

function OpenAPI.validate_property(::Type{ FileInfo }, name::Symbol, val)
    if name === Symbol("create_at")
        OpenAPI.validate_param(name, "FileInfo", :format, val, "int64")
    end
    if name === Symbol("update_at")
        OpenAPI.validate_param(name, "FileInfo", :format, val, "int64")
    end
    if name === Symbol("delete_at")
        OpenAPI.validate_param(name, "FileInfo", :format, val, "int64")
    end
end
