# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateIncomingWebhook_request

    CreateIncomingWebhookRequest(;
        channel_id=nothing,
        user_id=nothing,
        display_name=nothing,
        description=nothing,
        username=nothing,
        icon_url=nothing,
    )

    - channel_id::String : The ID of a public channel or private group that receives the webhook payloads.
    - user_id::String : The ID of the owner of the webhook if different than the requester. Required for [local mode](https://docs.mattermost.com/administration/mmctl-cli-tool.html#local-mode).
    - display_name::String : The display name for this incoming webhook
    - description::String : The description for this incoming webhook
    - username::String : The username this incoming webhook will post as.
    - icon_url::String : The profile picture this incoming webhook will use when posting.
"""
Base.@kwdef mutable struct CreateIncomingWebhookRequest <: OpenAPI.APIModel
    channel_id::Union{Nothing, String} = nothing
    user_id::Union{Nothing, String} = nothing
    display_name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    username::Union{Nothing, String} = nothing
    icon_url::Union{Nothing, String} = nothing

    function CreateIncomingWebhookRequest(channel_id, user_id, display_name, description, username, icon_url, )
        OpenAPI.validate_property(CreateIncomingWebhookRequest, Symbol("channel_id"), channel_id)
        OpenAPI.validate_property(CreateIncomingWebhookRequest, Symbol("user_id"), user_id)
        OpenAPI.validate_property(CreateIncomingWebhookRequest, Symbol("display_name"), display_name)
        OpenAPI.validate_property(CreateIncomingWebhookRequest, Symbol("description"), description)
        OpenAPI.validate_property(CreateIncomingWebhookRequest, Symbol("username"), username)
        OpenAPI.validate_property(CreateIncomingWebhookRequest, Symbol("icon_url"), icon_url)
        return new(channel_id, user_id, display_name, description, username, icon_url, )
    end
end # type CreateIncomingWebhookRequest

const _property_types_CreateIncomingWebhookRequest = Dict{Symbol,String}(Symbol("channel_id")=>"String", Symbol("user_id")=>"String", Symbol("display_name")=>"String", Symbol("description")=>"String", Symbol("username")=>"String", Symbol("icon_url")=>"String", )
OpenAPI.property_type(::Type{ CreateIncomingWebhookRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateIncomingWebhookRequest[name]))}

function check_required(o::CreateIncomingWebhookRequest)
    o.channel_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateIncomingWebhookRequest }, name::Symbol, val)
end
