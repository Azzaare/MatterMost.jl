# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Playbook

    Playbook(;
        id=nothing,
        title=nothing,
        description=nothing,
        team_id=nothing,
        create_public_playbook_run=nothing,
        create_at=nothing,
        delete_at=nothing,
        num_stages=nothing,
        num_steps=nothing,
        checklists=nothing,
        member_ids=nothing,
    )

    - id::String : A unique, 26 characters long, alphanumeric identifier for the playbook.
    - title::String : The title of the playbook.
    - description::String : The description of the playbook.
    - team_id::String : The identifier of the team where the playbook is in.
    - create_public_playbook_run::Bool : A boolean indicating whether the playbook runs created from this playbook should be public or private.
    - create_at::Int64 : The playbook creation timestamp, formatted as the number of milliseconds since the Unix epoch.
    - delete_at::Int64 : The playbook deletion timestamp, formatted as the number of milliseconds since the Unix epoch. It equals 0 if the playbook is not deleted.
    - num_stages::Int64 : The number of stages defined in this playbook.
    - num_steps::Int64 : The total number of steps from all the stages defined in this playbook.
    - checklists::Vector{Checklist} : The stages defined in this playbook.
    - member_ids::Vector{String} : The identifiers of all the users that are members of this playbook.
"""
Base.@kwdef mutable struct Playbook <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    team_id::Union{Nothing, String} = nothing
    create_public_playbook_run::Union{Nothing, Bool} = nothing
    create_at::Union{Nothing, Int64} = nothing
    delete_at::Union{Nothing, Int64} = nothing
    num_stages::Union{Nothing, Int64} = nothing
    num_steps::Union{Nothing, Int64} = nothing
    checklists::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Checklist} }
    member_ids::Union{Nothing, Vector{String}} = nothing

    function Playbook(id, title, description, team_id, create_public_playbook_run, create_at, delete_at, num_stages, num_steps, checklists, member_ids, )
        OpenAPI.validate_property(Playbook, Symbol("id"), id)
        OpenAPI.validate_property(Playbook, Symbol("title"), title)
        OpenAPI.validate_property(Playbook, Symbol("description"), description)
        OpenAPI.validate_property(Playbook, Symbol("team_id"), team_id)
        OpenAPI.validate_property(Playbook, Symbol("create_public_playbook_run"), create_public_playbook_run)
        OpenAPI.validate_property(Playbook, Symbol("create_at"), create_at)
        OpenAPI.validate_property(Playbook, Symbol("delete_at"), delete_at)
        OpenAPI.validate_property(Playbook, Symbol("num_stages"), num_stages)
        OpenAPI.validate_property(Playbook, Symbol("num_steps"), num_steps)
        OpenAPI.validate_property(Playbook, Symbol("checklists"), checklists)
        OpenAPI.validate_property(Playbook, Symbol("member_ids"), member_ids)
        return new(id, title, description, team_id, create_public_playbook_run, create_at, delete_at, num_stages, num_steps, checklists, member_ids, )
    end
end # type Playbook

const _property_types_Playbook = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("title")=>"String", Symbol("description")=>"String", Symbol("team_id")=>"String", Symbol("create_public_playbook_run")=>"Bool", Symbol("create_at")=>"Int64", Symbol("delete_at")=>"Int64", Symbol("num_stages")=>"Int64", Symbol("num_steps")=>"Int64", Symbol("checklists")=>"Vector{Checklist}", Symbol("member_ids")=>"Vector{String}", )
OpenAPI.property_type(::Type{ Playbook }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Playbook[name]))}

function check_required(o::Playbook)
    true
end

function OpenAPI.validate_property(::Type{ Playbook }, name::Symbol, val)
    if name === Symbol("create_at")
        OpenAPI.validate_param(name, "Playbook", :format, val, "int64")
    end
    if name === Symbol("delete_at")
        OpenAPI.validate_param(name, "Playbook", :format, val, "int64")
    end
    if name === Symbol("num_stages")
        OpenAPI.validate_param(name, "Playbook", :format, val, "int64")
    end
    if name === Symbol("num_steps")
        OpenAPI.validate_param(name, "Playbook", :format, val, "int64")
    end
end
