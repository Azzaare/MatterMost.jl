# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateUpload_request

    CreateUploadRequest(;
        channel_id=nothing,
        filename=nothing,
        file_size=nothing,
    )

    - channel_id::String : The ID of the channel to upload to.
    - filename::String : The name of the file to upload.
    - file_size::Int64 : The size of the file to upload in bytes.
"""
Base.@kwdef mutable struct CreateUploadRequest <: OpenAPI.APIModel
    channel_id::Union{Nothing, String} = nothing
    filename::Union{Nothing, String} = nothing
    file_size::Union{Nothing, Int64} = nothing

    function CreateUploadRequest(channel_id, filename, file_size, )
        OpenAPI.validate_property(CreateUploadRequest, Symbol("channel_id"), channel_id)
        OpenAPI.validate_property(CreateUploadRequest, Symbol("filename"), filename)
        OpenAPI.validate_property(CreateUploadRequest, Symbol("file_size"), file_size)
        return new(channel_id, filename, file_size, )
    end
end # type CreateUploadRequest

const _property_types_CreateUploadRequest = Dict{Symbol,String}(Symbol("channel_id")=>"String", Symbol("filename")=>"String", Symbol("file_size")=>"Int64", )
OpenAPI.property_type(::Type{ CreateUploadRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateUploadRequest[name]))}

function check_required(o::CreateUploadRequest)
    o.channel_id === nothing && (return false)
    o.filename === nothing && (return false)
    o.file_size === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateUploadRequest }, name::Symbol, val)
    if name === Symbol("file_size")
        OpenAPI.validate_param(name, "CreateUploadRequest", :format, val, "int64")
    end
end
