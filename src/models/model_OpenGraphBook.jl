# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OpenGraph_book
Book object used in OpenGraph metadata of a webpage, if type is book

    OpenGraphBook(;
        isbn=nothing,
        release_date=nothing,
        tags=nothing,
        authors=nothing,
    )

    - isbn::String
    - release_date::String
    - tags::Vector{String}
    - authors::Vector{OpenGraphArticleAuthorsInner}
"""
Base.@kwdef mutable struct OpenGraphBook <: OpenAPI.APIModel
    isbn::Union{Nothing, String} = nothing
    release_date::Union{Nothing, String} = nothing
    tags::Union{Nothing, Vector{String}} = nothing
    authors::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OpenGraphArticleAuthorsInner} }

    function OpenGraphBook(isbn, release_date, tags, authors, )
        OpenAPI.validate_property(OpenGraphBook, Symbol("isbn"), isbn)
        OpenAPI.validate_property(OpenGraphBook, Symbol("release_date"), release_date)
        OpenAPI.validate_property(OpenGraphBook, Symbol("tags"), tags)
        OpenAPI.validate_property(OpenGraphBook, Symbol("authors"), authors)
        return new(isbn, release_date, tags, authors, )
    end
end # type OpenGraphBook

const _property_types_OpenGraphBook = Dict{Symbol,String}(Symbol("isbn")=>"String", Symbol("release_date")=>"String", Symbol("tags")=>"Vector{String}", Symbol("authors")=>"Vector{OpenGraphArticleAuthorsInner}", )
OpenAPI.property_type(::Type{ OpenGraphBook }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OpenGraphBook[name]))}

function check_required(o::OpenGraphBook)
    true
end

function OpenAPI.validate_property(::Type{ OpenGraphBook }, name::Symbol, val)
end
