# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PluginManifest

    PluginManifest(;
        id=nothing,
        name=nothing,
        description=nothing,
        version=nothing,
        min_server_version=nothing,
        backend=nothing,
        server=nothing,
        webapp=nothing,
        settings_schema=nothing,
    )

    - id::String : Globally unique identifier that represents the plugin.
    - name::String : Name of the plugin.
    - description::String : Description of what the plugin is and does.
    - version::String : Version number of the plugin.
    - min_server_version::String : The minimum Mattermost server version required for the plugin.  Available as server version 5.6. 
    - backend::PluginManifestBackend
    - server::PluginManifestServer
    - webapp::PluginManifestWebapp
    - settings_schema::Any : Settings schema used to define the System Console UI for the plugin.
"""
Base.@kwdef mutable struct PluginManifest <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    version::Union{Nothing, String} = nothing
    min_server_version::Union{Nothing, String} = nothing
    backend = nothing # spec type: Union{ Nothing, PluginManifestBackend }
    server = nothing # spec type: Union{ Nothing, PluginManifestServer }
    webapp = nothing # spec type: Union{ Nothing, PluginManifestWebapp }
    settings_schema::Union{Nothing, Any} = nothing

    function PluginManifest(id, name, description, version, min_server_version, backend, server, webapp, settings_schema, )
        OpenAPI.validate_property(PluginManifest, Symbol("id"), id)
        OpenAPI.validate_property(PluginManifest, Symbol("name"), name)
        OpenAPI.validate_property(PluginManifest, Symbol("description"), description)
        OpenAPI.validate_property(PluginManifest, Symbol("version"), version)
        OpenAPI.validate_property(PluginManifest, Symbol("min_server_version"), min_server_version)
        OpenAPI.validate_property(PluginManifest, Symbol("backend"), backend)
        OpenAPI.validate_property(PluginManifest, Symbol("server"), server)
        OpenAPI.validate_property(PluginManifest, Symbol("webapp"), webapp)
        OpenAPI.validate_property(PluginManifest, Symbol("settings_schema"), settings_schema)
        return new(id, name, description, version, min_server_version, backend, server, webapp, settings_schema, )
    end
end # type PluginManifest

const _property_types_PluginManifest = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("version")=>"String", Symbol("min_server_version")=>"String", Symbol("backend")=>"PluginManifestBackend", Symbol("server")=>"PluginManifestServer", Symbol("webapp")=>"PluginManifestWebapp", Symbol("settings_schema")=>"Any", )
OpenAPI.property_type(::Type{ PluginManifest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PluginManifest[name]))}

function check_required(o::PluginManifest)
    true
end

function OpenAPI.validate_property(::Type{ PluginManifest }, name::Symbol, val)
end
