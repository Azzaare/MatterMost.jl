# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TopThread

    TopThread(;
        post=nothing,
        channel_id=nothing,
        channel_display_name=nothing,
        channel_name=nothing,
        Participants=nothing,
        user_information=nothing,
    )

    - post::Post
    - channel_id::String
    - channel_display_name::String
    - channel_name::String
    - Participants::Vector{String}
    - user_information::InsightUserInformation
"""
Base.@kwdef mutable struct TopThread <: OpenAPI.APIModel
    post = nothing # spec type: Union{ Nothing, Post }
    channel_id::Union{Nothing, String} = nothing
    channel_display_name::Union{Nothing, String} = nothing
    channel_name::Union{Nothing, String} = nothing
    Participants::Union{Nothing, Vector{String}} = nothing
    user_information = nothing # spec type: Union{ Nothing, InsightUserInformation }

    function TopThread(post, channel_id, channel_display_name, channel_name, Participants, user_information, )
        OpenAPI.validate_property(TopThread, Symbol("post"), post)
        OpenAPI.validate_property(TopThread, Symbol("channel_id"), channel_id)
        OpenAPI.validate_property(TopThread, Symbol("channel_display_name"), channel_display_name)
        OpenAPI.validate_property(TopThread, Symbol("channel_name"), channel_name)
        OpenAPI.validate_property(TopThread, Symbol("Participants"), Participants)
        OpenAPI.validate_property(TopThread, Symbol("user_information"), user_information)
        return new(post, channel_id, channel_display_name, channel_name, Participants, user_information, )
    end
end # type TopThread

const _property_types_TopThread = Dict{Symbol,String}(Symbol("post")=>"Post", Symbol("channel_id")=>"String", Symbol("channel_display_name")=>"String", Symbol("channel_name")=>"String", Symbol("Participants")=>"Vector{String}", Symbol("user_information")=>"InsightUserInformation", )
OpenAPI.property_type(::Type{ TopThread }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TopThread[name]))}

function check_required(o::TopThread)
    true
end

function OpenAPI.validate_property(::Type{ TopThread }, name::Symbol, val)
end
