# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Job

    Job(;
        id=nothing,
        type=nothing,
        create_at=nothing,
        start_at=nothing,
        last_activity_at=nothing,
        status=nothing,
        progress=nothing,
        data=nothing,
    )

    - id::String : The unique id of the job
    - type::String : The type of job
    - create_at::Int64 : The time at which the job was created
    - start_at::Int64 : The time at which the job was started
    - last_activity_at::Int64 : The last time at which the job had activity
    - status::String : The status of the job
    - progress::Int64 : The progress (as a percentage) of the job
    - data::Any : A freeform data field containing additional information about the job
"""
Base.@kwdef mutable struct Job <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    create_at::Union{Nothing, Int64} = nothing
    start_at::Union{Nothing, Int64} = nothing
    last_activity_at::Union{Nothing, Int64} = nothing
    status::Union{Nothing, String} = nothing
    progress::Union{Nothing, Int64} = nothing
    data::Union{Nothing, Any} = nothing

    function Job(id, type, create_at, start_at, last_activity_at, status, progress, data, )
        OpenAPI.validate_property(Job, Symbol("id"), id)
        OpenAPI.validate_property(Job, Symbol("type"), type)
        OpenAPI.validate_property(Job, Symbol("create_at"), create_at)
        OpenAPI.validate_property(Job, Symbol("start_at"), start_at)
        OpenAPI.validate_property(Job, Symbol("last_activity_at"), last_activity_at)
        OpenAPI.validate_property(Job, Symbol("status"), status)
        OpenAPI.validate_property(Job, Symbol("progress"), progress)
        OpenAPI.validate_property(Job, Symbol("data"), data)
        return new(id, type, create_at, start_at, last_activity_at, status, progress, data, )
    end
end # type Job

const _property_types_Job = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("create_at")=>"Int64", Symbol("start_at")=>"Int64", Symbol("last_activity_at")=>"Int64", Symbol("status")=>"String", Symbol("progress")=>"Int64", Symbol("data")=>"Any", )
OpenAPI.property_type(::Type{ Job }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Job[name]))}

function check_required(o::Job)
    true
end

function OpenAPI.validate_property(::Type{ Job }, name::Symbol, val)
    if name === Symbol("create_at")
        OpenAPI.validate_param(name, "Job", :format, val, "int64")
    end
    if name === Symbol("start_at")
        OpenAPI.validate_param(name, "Job", :format, val, "int64")
    end
    if name === Symbol("last_activity_at")
        OpenAPI.validate_param(name, "Job", :format, val, "int64")
    end
end
