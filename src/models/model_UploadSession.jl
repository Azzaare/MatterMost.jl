# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UploadSession
an object containing information used to keep track of a file upload.

    UploadSession(;
        id=nothing,
        type=nothing,
        create_at=nothing,
        user_id=nothing,
        channel_id=nothing,
        filename=nothing,
        file_size=nothing,
        file_offset=nothing,
    )

    - id::String : The unique identifier for the upload.
    - type::String : The type of the upload.
    - create_at::Int64 : The time the upload was created in milliseconds.
    - user_id::String : The ID of the user performing the upload.
    - channel_id::String : The ID of the channel to upload to.
    - filename::String : The name of the file to upload.
    - file_size::Int64 : The size of the file to upload in bytes.
    - file_offset::Int64 : The amount of data uploaded in bytes.
"""
Base.@kwdef mutable struct UploadSession <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    create_at::Union{Nothing, Int64} = nothing
    user_id::Union{Nothing, String} = nothing
    channel_id::Union{Nothing, String} = nothing
    filename::Union{Nothing, String} = nothing
    file_size::Union{Nothing, Int64} = nothing
    file_offset::Union{Nothing, Int64} = nothing

    function UploadSession(id, type, create_at, user_id, channel_id, filename, file_size, file_offset, )
        OpenAPI.validate_property(UploadSession, Symbol("id"), id)
        OpenAPI.validate_property(UploadSession, Symbol("type"), type)
        OpenAPI.validate_property(UploadSession, Symbol("create_at"), create_at)
        OpenAPI.validate_property(UploadSession, Symbol("user_id"), user_id)
        OpenAPI.validate_property(UploadSession, Symbol("channel_id"), channel_id)
        OpenAPI.validate_property(UploadSession, Symbol("filename"), filename)
        OpenAPI.validate_property(UploadSession, Symbol("file_size"), file_size)
        OpenAPI.validate_property(UploadSession, Symbol("file_offset"), file_offset)
        return new(id, type, create_at, user_id, channel_id, filename, file_size, file_offset, )
    end
end # type UploadSession

const _property_types_UploadSession = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("create_at")=>"Int64", Symbol("user_id")=>"String", Symbol("channel_id")=>"String", Symbol("filename")=>"String", Symbol("file_size")=>"Int64", Symbol("file_offset")=>"Int64", )
OpenAPI.property_type(::Type{ UploadSession }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UploadSession[name]))}

function check_required(o::UploadSession)
    true
end

function OpenAPI.validate_property(::Type{ UploadSession }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "UploadSession", :enum, val, ["attachment", "import"])
    end
    if name === Symbol("create_at")
        OpenAPI.validate_param(name, "UploadSession", :format, val, "int64")
    end
    if name === Symbol("file_size")
        OpenAPI.validate_param(name, "UploadSession", :format, val, "int64")
    end
    if name === Symbol("file_offset")
        OpenAPI.validate_param(name, "UploadSession", :format, val, "int64")
    end
end
