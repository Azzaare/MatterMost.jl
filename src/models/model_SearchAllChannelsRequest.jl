# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SearchAllChannels_request

    SearchAllChannelsRequest(;
        term=nothing,
        not_associated_to_group=nothing,
        exclude_default_channels=nothing,
        team_ids=nothing,
        group_constrained=nothing,
        exclude_group_constrained=nothing,
        public=nothing,
        private=nothing,
        deleted=nothing,
        page=nothing,
        per_page=nothing,
        exclude_policy_constrained=false,
        include_search_by_id=false,
    )

    - term::String : The string to search in the channel name, display name, and purpose.
    - not_associated_to_group::String : A group id to exclude channels that are associated to that group via GroupChannel records.
    - exclude_default_channels::Bool : Exclude default channels from the results by setting this parameter to true.
    - team_ids::Vector{String} : Filters results to channels belonging to the given team ids  __Minimum server version__: 5.26 
    - group_constrained::Bool : Filters results to only return channels constrained to a group  __Minimum server version__: 5.26 
    - exclude_group_constrained::Bool : Filters results to exclude channels constrained to a group  __Minimum server version__: 5.26 
    - public::Bool : Filters results to only return Public / Open channels, can be used in conjunction with &#x60;private&#x60; to return both &#x60;public&#x60; and &#x60;private&#x60; channels  __Minimum server version__: 5.26 
    - private::Bool : Filters results to only return Private channels, can be used in conjunction with &#x60;public&#x60; to return both &#x60;private&#x60; and &#x60;public&#x60; channels  __Minimum server version__: 5.26 
    - deleted::Bool : Filters results to only return deleted / archived channels  __Minimum server version__: 5.26 
    - page::String : The page number to return, if paginated. If this parameter is not present with the &#x60;per_page&#x60; parameter then the results will be returned un-paged.
    - per_page::String : The number of entries to return per page, if paginated. If this parameter is not present with the &#x60;page&#x60; parameter then the results will be returned un-paged.
    - exclude_policy_constrained::Bool : If set to true, only channels which do not have a granular retention policy assigned to them will be returned. The &#x60;sysconsole_read_compliance_data_retention&#x60; permission is required to use this parameter. __Minimum server version__: 5.35 
    - include_search_by_id::Bool : If set to true, returns channels where given search &#39;term&#39; matches channel ID. __Minimum server version__: 5.35 
"""
Base.@kwdef mutable struct SearchAllChannelsRequest <: OpenAPI.APIModel
    term::Union{Nothing, String} = nothing
    not_associated_to_group::Union{Nothing, String} = nothing
    exclude_default_channels::Union{Nothing, Bool} = nothing
    team_ids::Union{Nothing, Vector{String}} = nothing
    group_constrained::Union{Nothing, Bool} = nothing
    exclude_group_constrained::Union{Nothing, Bool} = nothing
    public::Union{Nothing, Bool} = nothing
    private::Union{Nothing, Bool} = nothing
    deleted::Union{Nothing, Bool} = nothing
    page::Union{Nothing, String} = nothing
    per_page::Union{Nothing, String} = nothing
    exclude_policy_constrained::Union{Nothing, Bool} = false
    include_search_by_id::Union{Nothing, Bool} = false

    function SearchAllChannelsRequest(term, not_associated_to_group, exclude_default_channels, team_ids, group_constrained, exclude_group_constrained, public, private, deleted, page, per_page, exclude_policy_constrained, include_search_by_id, )
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("term"), term)
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("not_associated_to_group"), not_associated_to_group)
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("exclude_default_channels"), exclude_default_channels)
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("team_ids"), team_ids)
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("group_constrained"), group_constrained)
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("exclude_group_constrained"), exclude_group_constrained)
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("public"), public)
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("private"), private)
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("deleted"), deleted)
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("page"), page)
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("per_page"), per_page)
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("exclude_policy_constrained"), exclude_policy_constrained)
        OpenAPI.validate_property(SearchAllChannelsRequest, Symbol("include_search_by_id"), include_search_by_id)
        return new(term, not_associated_to_group, exclude_default_channels, team_ids, group_constrained, exclude_group_constrained, public, private, deleted, page, per_page, exclude_policy_constrained, include_search_by_id, )
    end
end # type SearchAllChannelsRequest

const _property_types_SearchAllChannelsRequest = Dict{Symbol,String}(Symbol("term")=>"String", Symbol("not_associated_to_group")=>"String", Symbol("exclude_default_channels")=>"Bool", Symbol("team_ids")=>"Vector{String}", Symbol("group_constrained")=>"Bool", Symbol("exclude_group_constrained")=>"Bool", Symbol("public")=>"Bool", Symbol("private")=>"Bool", Symbol("deleted")=>"Bool", Symbol("page")=>"String", Symbol("per_page")=>"String", Symbol("exclude_policy_constrained")=>"Bool", Symbol("include_search_by_id")=>"Bool", )
OpenAPI.property_type(::Type{ SearchAllChannelsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SearchAllChannelsRequest[name]))}

function check_required(o::SearchAllChannelsRequest)
    o.term === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ SearchAllChannelsRequest }, name::Symbol, val)
end
