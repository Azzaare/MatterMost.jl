# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UserThreads

    UserThreads(;
        total=nothing,
        threads=nothing,
    )

    - total::Int64 : Total number of threads (used for paging)
    - threads::Vector{UserThread} : Array of threads
"""
Base.@kwdef mutable struct UserThreads <: OpenAPI.APIModel
    total::Union{Nothing, Int64} = nothing
    threads::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UserThread} }

    function UserThreads(total, threads, )
        OpenAPI.validate_property(UserThreads, Symbol("total"), total)
        OpenAPI.validate_property(UserThreads, Symbol("threads"), threads)
        return new(total, threads, )
    end
end # type UserThreads

const _property_types_UserThreads = Dict{Symbol,String}(Symbol("total")=>"Int64", Symbol("threads")=>"Vector{UserThread}", )
OpenAPI.property_type(::Type{ UserThreads }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UserThreads[name]))}

function check_required(o::UserThreads)
    true
end

function OpenAPI.validate_property(::Type{ UserThreads }, name::Symbol, val)
end
