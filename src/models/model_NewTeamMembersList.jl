# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NewTeamMembersList

    NewTeamMembersList(;
        has_next=nothing,
        items=nothing,
        total_count=nothing,
    )

    - has_next::Bool : Indicates if there is another page of new team members that can be fetched.
    - items::Vector{NewTeamMember} : List of new team members.
    - total_count::Int64 : The total count of new team members for the given time range.
"""
Base.@kwdef mutable struct NewTeamMembersList <: OpenAPI.APIModel
    has_next::Union{Nothing, Bool} = nothing
    items::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{NewTeamMember} }
    total_count::Union{Nothing, Int64} = nothing

    function NewTeamMembersList(has_next, items, total_count, )
        OpenAPI.validate_property(NewTeamMembersList, Symbol("has_next"), has_next)
        OpenAPI.validate_property(NewTeamMembersList, Symbol("items"), items)
        OpenAPI.validate_property(NewTeamMembersList, Symbol("total_count"), total_count)
        return new(has_next, items, total_count, )
    end
end # type NewTeamMembersList

const _property_types_NewTeamMembersList = Dict{Symbol,String}(Symbol("has_next")=>"Bool", Symbol("items")=>"Vector{NewTeamMember}", Symbol("total_count")=>"Int64", )
OpenAPI.property_type(::Type{ NewTeamMembersList }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NewTeamMembersList[name]))}

function check_required(o::NewTeamMembersList)
    true
end

function OpenAPI.validate_property(::Type{ NewTeamMembersList }, name::Symbol, val)
end
