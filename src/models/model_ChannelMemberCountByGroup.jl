# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChannelMemberCountByGroup
An object describing group member information in a channel

    ChannelMemberCountByGroup(;
        group_id=nothing,
        channel_member_count=nothing,
        channel_member_timezones_count=nothing,
    )

    - group_id::String : ID of the group
    - channel_member_count::Float64 : Total number of group members in the channel
    - channel_member_timezones_count::Float64 : Total number of unique timezones for the group members in the channel
"""
Base.@kwdef mutable struct ChannelMemberCountByGroup <: OpenAPI.APIModel
    group_id::Union{Nothing, String} = nothing
    channel_member_count::Union{Nothing, Float64} = nothing
    channel_member_timezones_count::Union{Nothing, Float64} = nothing

    function ChannelMemberCountByGroup(group_id, channel_member_count, channel_member_timezones_count, )
        OpenAPI.validate_property(ChannelMemberCountByGroup, Symbol("group_id"), group_id)
        OpenAPI.validate_property(ChannelMemberCountByGroup, Symbol("channel_member_count"), channel_member_count)
        OpenAPI.validate_property(ChannelMemberCountByGroup, Symbol("channel_member_timezones_count"), channel_member_timezones_count)
        return new(group_id, channel_member_count, channel_member_timezones_count, )
    end
end # type ChannelMemberCountByGroup

const _property_types_ChannelMemberCountByGroup = Dict{Symbol,String}(Symbol("group_id")=>"String", Symbol("channel_member_count")=>"Float64", Symbol("channel_member_timezones_count")=>"Float64", )
OpenAPI.property_type(::Type{ ChannelMemberCountByGroup }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChannelMemberCountByGroup[name]))}

function check_required(o::ChannelMemberCountByGroup)
    true
end

function OpenAPI.validate_property(::Type{ ChannelMemberCountByGroup }, name::Symbol, val)
end
