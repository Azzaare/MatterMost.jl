# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PatchTeam_request

    PatchTeamRequest(;
        display_name=nothing,
        description=nothing,
        company_name=nothing,
        invite_id=nothing,
        allow_open_invite=nothing,
    )

    - display_name::String
    - description::String
    - company_name::String
    - invite_id::String
    - allow_open_invite::Bool
"""
Base.@kwdef mutable struct PatchTeamRequest <: OpenAPI.APIModel
    display_name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    company_name::Union{Nothing, String} = nothing
    invite_id::Union{Nothing, String} = nothing
    allow_open_invite::Union{Nothing, Bool} = nothing

    function PatchTeamRequest(display_name, description, company_name, invite_id, allow_open_invite, )
        OpenAPI.validate_property(PatchTeamRequest, Symbol("display_name"), display_name)
        OpenAPI.validate_property(PatchTeamRequest, Symbol("description"), description)
        OpenAPI.validate_property(PatchTeamRequest, Symbol("company_name"), company_name)
        OpenAPI.validate_property(PatchTeamRequest, Symbol("invite_id"), invite_id)
        OpenAPI.validate_property(PatchTeamRequest, Symbol("allow_open_invite"), allow_open_invite)
        return new(display_name, description, company_name, invite_id, allow_open_invite, )
    end
end # type PatchTeamRequest

const _property_types_PatchTeamRequest = Dict{Symbol,String}(Symbol("display_name")=>"String", Symbol("description")=>"String", Symbol("company_name")=>"String", Symbol("invite_id")=>"String", Symbol("allow_open_invite")=>"Bool", )
OpenAPI.property_type(::Type{ PatchTeamRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PatchTeamRequest[name]))}

function check_required(o::PatchTeamRequest)
    true
end

function OpenAPI.validate_property(::Type{ PatchTeamRequest }, name::Symbol, val)
end
