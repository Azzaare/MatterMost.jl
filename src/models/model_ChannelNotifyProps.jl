# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChannelNotifyProps

    ChannelNotifyProps(;
        email=nothing,
        push=nothing,
        desktop=nothing,
        mark_unread=nothing,
    )

    - email::String : Set to \&quot;true\&quot; to enable email notifications, \&quot;false\&quot; to disable, or \&quot;default\&quot; to use the global user notification setting.
    - push::String : Set to \&quot;all\&quot; to receive push notifications for all activity, \&quot;mention\&quot; for mentions and direct messages only, \&quot;none\&quot; to disable, or \&quot;default\&quot; to use the global user notification setting.
    - desktop::String : Set to \&quot;all\&quot; to receive desktop notifications for all activity, \&quot;mention\&quot; for mentions and direct messages only, \&quot;none\&quot; to disable, or \&quot;default\&quot; to use the global user notification setting.
    - mark_unread::String : Set to \&quot;all\&quot; to mark the channel unread for any new message, \&quot;mention\&quot; to mark unread for new mentions only. Defaults to \&quot;all\&quot;.
"""
Base.@kwdef mutable struct ChannelNotifyProps <: OpenAPI.APIModel
    email::Union{Nothing, String} = nothing
    push::Union{Nothing, String} = nothing
    desktop::Union{Nothing, String} = nothing
    mark_unread::Union{Nothing, String} = nothing

    function ChannelNotifyProps(email, push, desktop, mark_unread, )
        OpenAPI.validate_property(ChannelNotifyProps, Symbol("email"), email)
        OpenAPI.validate_property(ChannelNotifyProps, Symbol("push"), push)
        OpenAPI.validate_property(ChannelNotifyProps, Symbol("desktop"), desktop)
        OpenAPI.validate_property(ChannelNotifyProps, Symbol("mark_unread"), mark_unread)
        return new(email, push, desktop, mark_unread, )
    end
end # type ChannelNotifyProps

const _property_types_ChannelNotifyProps = Dict{Symbol,String}(Symbol("email")=>"String", Symbol("push")=>"String", Symbol("desktop")=>"String", Symbol("mark_unread")=>"String", )
OpenAPI.property_type(::Type{ ChannelNotifyProps }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChannelNotifyProps[name]))}

function check_required(o::ChannelNotifyProps)
    true
end

function OpenAPI.validate_property(::Type{ ChannelNotifyProps }, name::Symbol, val)
end
