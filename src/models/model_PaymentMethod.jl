# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PaymentMethod

    PaymentMethod(;
        type=nothing,
        last_four=nothing,
        exp_month=nothing,
        exp_year=nothing,
        card_brand=nothing,
        name=nothing,
    )

    - type::String
    - last_four::Int64
    - exp_month::Int64
    - exp_year::Int64
    - card_brand::String
    - name::String
"""
Base.@kwdef mutable struct PaymentMethod <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    last_four::Union{Nothing, Int64} = nothing
    exp_month::Union{Nothing, Int64} = nothing
    exp_year::Union{Nothing, Int64} = nothing
    card_brand::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing

    function PaymentMethod(type, last_four, exp_month, exp_year, card_brand, name, )
        OpenAPI.validate_property(PaymentMethod, Symbol("type"), type)
        OpenAPI.validate_property(PaymentMethod, Symbol("last_four"), last_four)
        OpenAPI.validate_property(PaymentMethod, Symbol("exp_month"), exp_month)
        OpenAPI.validate_property(PaymentMethod, Symbol("exp_year"), exp_year)
        OpenAPI.validate_property(PaymentMethod, Symbol("card_brand"), card_brand)
        OpenAPI.validate_property(PaymentMethod, Symbol("name"), name)
        return new(type, last_four, exp_month, exp_year, card_brand, name, )
    end
end # type PaymentMethod

const _property_types_PaymentMethod = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("last_four")=>"Int64", Symbol("exp_month")=>"Int64", Symbol("exp_year")=>"Int64", Symbol("card_brand")=>"String", Symbol("name")=>"String", )
OpenAPI.property_type(::Type{ PaymentMethod }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PaymentMethod[name]))}

function check_required(o::PaymentMethod)
    true
end

function OpenAPI.validate_property(::Type{ PaymentMethod }, name::Symbol, val)
end
