# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateCommand_request

    CreateCommandRequest(;
        team_id=nothing,
        method=nothing,
        trigger=nothing,
        url=nothing,
    )

    - team_id::String : Team ID to where the command should be created
    - method::String : &#x60;&#39;P&#39;&#x60; for post request, &#x60;&#39;G&#39;&#x60; for get request
    - trigger::String : Activation word to trigger the command
    - url::String : The URL that the command will make the request
"""
Base.@kwdef mutable struct CreateCommandRequest <: OpenAPI.APIModel
    team_id::Union{Nothing, String} = nothing
    method::Union{Nothing, String} = nothing
    trigger::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing

    function CreateCommandRequest(team_id, method, trigger, url, )
        OpenAPI.validate_property(CreateCommandRequest, Symbol("team_id"), team_id)
        OpenAPI.validate_property(CreateCommandRequest, Symbol("method"), method)
        OpenAPI.validate_property(CreateCommandRequest, Symbol("trigger"), trigger)
        OpenAPI.validate_property(CreateCommandRequest, Symbol("url"), url)
        return new(team_id, method, trigger, url, )
    end
end # type CreateCommandRequest

const _property_types_CreateCommandRequest = Dict{Symbol,String}(Symbol("team_id")=>"String", Symbol("method")=>"String", Symbol("trigger")=>"String", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ CreateCommandRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateCommandRequest[name]))}

function check_required(o::CreateCommandRequest)
    o.team_id === nothing && (return false)
    o.method === nothing && (return false)
    o.trigger === nothing && (return false)
    o.url === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateCommandRequest }, name::Symbol, val)
end
