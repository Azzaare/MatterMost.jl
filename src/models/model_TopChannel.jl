# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TopChannel

    TopChannel(;
        id=nothing,
        type=nothing,
        display_name=nothing,
        name=nothing,
        team_id=nothing,
        message_count=nothing,
    )

    - id::String
    - type::String
    - display_name::String
    - name::String
    - team_id::String
    - message_count::String : The number of messages posted in the channel by users over the given time period (not including messages posted by bots).
"""
Base.@kwdef mutable struct TopChannel <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    display_name::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    team_id::Union{Nothing, String} = nothing
    message_count::Union{Nothing, String} = nothing

    function TopChannel(id, type, display_name, name, team_id, message_count, )
        OpenAPI.validate_property(TopChannel, Symbol("id"), id)
        OpenAPI.validate_property(TopChannel, Symbol("type"), type)
        OpenAPI.validate_property(TopChannel, Symbol("display_name"), display_name)
        OpenAPI.validate_property(TopChannel, Symbol("name"), name)
        OpenAPI.validate_property(TopChannel, Symbol("team_id"), team_id)
        OpenAPI.validate_property(TopChannel, Symbol("message_count"), message_count)
        return new(id, type, display_name, name, team_id, message_count, )
    end
end # type TopChannel

const _property_types_TopChannel = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("display_name")=>"String", Symbol("name")=>"String", Symbol("team_id")=>"String", Symbol("message_count")=>"String", )
OpenAPI.property_type(::Type{ TopChannel }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TopChannel[name]))}

function check_required(o::TopChannel)
    true
end

function OpenAPI.validate_property(::Type{ TopChannel }, name::Symbol, val)
end
