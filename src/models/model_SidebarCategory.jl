# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SidebarCategory
User&#39;s sidebar category

    SidebarCategory(;
        id=nothing,
        user_id=nothing,
        team_id=nothing,
        display_name=nothing,
        type=nothing,
    )

    - id::String
    - user_id::String
    - team_id::String
    - display_name::String
    - type::String
"""
Base.@kwdef mutable struct SidebarCategory <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    user_id::Union{Nothing, String} = nothing
    team_id::Union{Nothing, String} = nothing
    display_name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function SidebarCategory(id, user_id, team_id, display_name, type, )
        OpenAPI.validate_property(SidebarCategory, Symbol("id"), id)
        OpenAPI.validate_property(SidebarCategory, Symbol("user_id"), user_id)
        OpenAPI.validate_property(SidebarCategory, Symbol("team_id"), team_id)
        OpenAPI.validate_property(SidebarCategory, Symbol("display_name"), display_name)
        OpenAPI.validate_property(SidebarCategory, Symbol("type"), type)
        return new(id, user_id, team_id, display_name, type, )
    end
end # type SidebarCategory

const _property_types_SidebarCategory = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("user_id")=>"String", Symbol("team_id")=>"String", Symbol("display_name")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ SidebarCategory }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SidebarCategory[name]))}

function check_required(o::SidebarCategory)
    true
end

function OpenAPI.validate_property(::Type{ SidebarCategory }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "SidebarCategory", :enum, val, ["channels", "custom", "direct_messages", "favorites"])
    end
end
