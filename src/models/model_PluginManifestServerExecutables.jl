# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PluginManifest_server_executables
Paths to executable binaries, specifying multiple entry points for different platforms when bundled together in a single plugin.

    PluginManifestServerExecutables(;
        var"linux-amd64"=nothing,
        var"darwin-amd64"=nothing,
        var"windows-amd64"=nothing,
    )

    - var"linux-amd64"::String
    - var"darwin-amd64"::String
    - var"windows-amd64"::String
"""
Base.@kwdef mutable struct PluginManifestServerExecutables <: OpenAPI.APIModel
    var"linux-amd64"::Union{Nothing, String} = nothing
    var"darwin-amd64"::Union{Nothing, String} = nothing
    var"windows-amd64"::Union{Nothing, String} = nothing

    function PluginManifestServerExecutables(var"linux-amd64", var"darwin-amd64", var"windows-amd64", )
        OpenAPI.validate_property(PluginManifestServerExecutables, Symbol("linux-amd64"), var"linux-amd64")
        OpenAPI.validate_property(PluginManifestServerExecutables, Symbol("darwin-amd64"), var"darwin-amd64")
        OpenAPI.validate_property(PluginManifestServerExecutables, Symbol("windows-amd64"), var"windows-amd64")
        return new(var"linux-amd64", var"darwin-amd64", var"windows-amd64", )
    end
end # type PluginManifestServerExecutables

const _property_types_PluginManifestServerExecutables = Dict{Symbol,String}(Symbol("linux-amd64")=>"String", Symbol("darwin-amd64")=>"String", Symbol("windows-amd64")=>"String", )
OpenAPI.property_type(::Type{ PluginManifestServerExecutables }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PluginManifestServerExecutables[name]))}

function check_required(o::PluginManifestServerExecutables)
    true
end

function OpenAPI.validate_property(::Type{ PluginManifestServerExecutables }, name::Symbol, val)
end
