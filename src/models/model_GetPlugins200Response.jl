# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GetPlugins_200_response

    GetPlugins200Response(;
        active=nothing,
        inactive=nothing,
    )

    - active::Vector{PluginManifest}
    - inactive::Vector{PluginManifest}
"""
Base.@kwdef mutable struct GetPlugins200Response <: OpenAPI.APIModel
    active::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PluginManifest} }
    inactive::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PluginManifest} }

    function GetPlugins200Response(active, inactive, )
        OpenAPI.validate_property(GetPlugins200Response, Symbol("active"), active)
        OpenAPI.validate_property(GetPlugins200Response, Symbol("inactive"), inactive)
        return new(active, inactive, )
    end
end # type GetPlugins200Response

const _property_types_GetPlugins200Response = Dict{Symbol,String}(Symbol("active")=>"Vector{PluginManifest}", Symbol("inactive")=>"Vector{PluginManifest}", )
OpenAPI.property_type(::Type{ GetPlugins200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GetPlugins200Response[name]))}

function check_required(o::GetPlugins200Response)
    true
end

function OpenAPI.validate_property(::Type{ GetPlugins200Response }, name::Symbol, val)
end
