# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OpenGraph_images_inner
Image object used in OpenGraph metadata of a webpage

    OpenGraphImagesInner(;
        url=nothing,
        secure_url=nothing,
        type=nothing,
        width=nothing,
        height=nothing,
    )

    - url::String
    - secure_url::String
    - type::String
    - width::Int64
    - height::Int64
"""
Base.@kwdef mutable struct OpenGraphImagesInner <: OpenAPI.APIModel
    url::Union{Nothing, String} = nothing
    secure_url::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    width::Union{Nothing, Int64} = nothing
    height::Union{Nothing, Int64} = nothing

    function OpenGraphImagesInner(url, secure_url, type, width, height, )
        OpenAPI.validate_property(OpenGraphImagesInner, Symbol("url"), url)
        OpenAPI.validate_property(OpenGraphImagesInner, Symbol("secure_url"), secure_url)
        OpenAPI.validate_property(OpenGraphImagesInner, Symbol("type"), type)
        OpenAPI.validate_property(OpenGraphImagesInner, Symbol("width"), width)
        OpenAPI.validate_property(OpenGraphImagesInner, Symbol("height"), height)
        return new(url, secure_url, type, width, height, )
    end
end # type OpenGraphImagesInner

const _property_types_OpenGraphImagesInner = Dict{Symbol,String}(Symbol("url")=>"String", Symbol("secure_url")=>"String", Symbol("type")=>"String", Symbol("width")=>"Int64", Symbol("height")=>"Int64", )
OpenAPI.property_type(::Type{ OpenGraphImagesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OpenGraphImagesInner[name]))}

function check_required(o::OpenGraphImagesInner)
    true
end

function OpenAPI.validate_property(::Type{ OpenGraphImagesInner }, name::Symbol, val)
end
