# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Address

    Address(;
        city=nothing,
        country=nothing,
        line1=nothing,
        line2=nothing,
        postal_code=nothing,
        state=nothing,
    )

    - city::String
    - country::String
    - line1::String
    - line2::String
    - postal_code::String
    - state::String
"""
Base.@kwdef mutable struct Address <: OpenAPI.APIModel
    city::Union{Nothing, String} = nothing
    country::Union{Nothing, String} = nothing
    line1::Union{Nothing, String} = nothing
    line2::Union{Nothing, String} = nothing
    postal_code::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing

    function Address(city, country, line1, line2, postal_code, state, )
        OpenAPI.validate_property(Address, Symbol("city"), city)
        OpenAPI.validate_property(Address, Symbol("country"), country)
        OpenAPI.validate_property(Address, Symbol("line1"), line1)
        OpenAPI.validate_property(Address, Symbol("line2"), line2)
        OpenAPI.validate_property(Address, Symbol("postal_code"), postal_code)
        OpenAPI.validate_property(Address, Symbol("state"), state)
        return new(city, country, line1, line2, postal_code, state, )
    end
end # type Address

const _property_types_Address = Dict{Symbol,String}(Symbol("city")=>"String", Symbol("country")=>"String", Symbol("line1")=>"String", Symbol("line2")=>"String", Symbol("postal_code")=>"String", Symbol("state")=>"String", )
OpenAPI.property_type(::Type{ Address }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Address[name]))}

function check_required(o::Address)
    true
end

function OpenAPI.validate_property(::Type{ Address }, name::Symbol, val)
end
