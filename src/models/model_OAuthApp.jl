# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OAuthApp

    OAuthApp(;
        id=nothing,
        client_secret=nothing,
        name=nothing,
        description=nothing,
        icon_url=nothing,
        callback_urls=nothing,
        homepage=nothing,
        is_trusted=nothing,
        create_at=nothing,
        update_at=nothing,
    )

    - id::String : The client id of the application
    - client_secret::String : The client secret of the application
    - name::String : The name of the client application
    - description::String : A short description of the application
    - icon_url::String : A URL to an icon to display with the application
    - callback_urls::Vector{String} : A list of callback URLs for the appliation
    - homepage::String : A link to the website of the application
    - is_trusted::Bool : Set this to &#x60;true&#x60; to skip asking users for permission
    - create_at::Int64 : The time of registration for the application
    - update_at::Int64 : The last time of update for the application
"""
Base.@kwdef mutable struct OAuthApp <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    client_secret::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    icon_url::Union{Nothing, String} = nothing
    callback_urls::Union{Nothing, Vector{String}} = nothing
    homepage::Union{Nothing, String} = nothing
    is_trusted::Union{Nothing, Bool} = nothing
    create_at::Union{Nothing, Int64} = nothing
    update_at::Union{Nothing, Int64} = nothing

    function OAuthApp(id, client_secret, name, description, icon_url, callback_urls, homepage, is_trusted, create_at, update_at, )
        OpenAPI.validate_property(OAuthApp, Symbol("id"), id)
        OpenAPI.validate_property(OAuthApp, Symbol("client_secret"), client_secret)
        OpenAPI.validate_property(OAuthApp, Symbol("name"), name)
        OpenAPI.validate_property(OAuthApp, Symbol("description"), description)
        OpenAPI.validate_property(OAuthApp, Symbol("icon_url"), icon_url)
        OpenAPI.validate_property(OAuthApp, Symbol("callback_urls"), callback_urls)
        OpenAPI.validate_property(OAuthApp, Symbol("homepage"), homepage)
        OpenAPI.validate_property(OAuthApp, Symbol("is_trusted"), is_trusted)
        OpenAPI.validate_property(OAuthApp, Symbol("create_at"), create_at)
        OpenAPI.validate_property(OAuthApp, Symbol("update_at"), update_at)
        return new(id, client_secret, name, description, icon_url, callback_urls, homepage, is_trusted, create_at, update_at, )
    end
end # type OAuthApp

const _property_types_OAuthApp = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("client_secret")=>"String", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("icon_url")=>"String", Symbol("callback_urls")=>"Vector{String}", Symbol("homepage")=>"String", Symbol("is_trusted")=>"Bool", Symbol("create_at")=>"Int64", Symbol("update_at")=>"Int64", )
OpenAPI.property_type(::Type{ OAuthApp }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OAuthApp[name]))}

function check_required(o::OAuthApp)
    true
end

function OpenAPI.validate_property(::Type{ OAuthApp }, name::Symbol, val)
    if name === Symbol("create_at")
        OpenAPI.validate_param(name, "OAuthApp", :format, val, "int64")
    end
    if name === Symbol("update_at")
        OpenAPI.validate_param(name, "OAuthApp", :format, val, "int64")
    end
end
