# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Notice

    Notice(;
        id=nothing,
        sysAdminOnly=nothing,
        teamAdminOnly=nothing,
        action=nothing,
        actionParam=nothing,
        actionText=nothing,
        description=nothing,
        image=nothing,
        title=nothing,
    )

    - id::String : Notice ID
    - sysAdminOnly::Bool : Does this notice apply only to sysadmins
    - teamAdminOnly::Bool : Does this notice apply only to team admins
    - action::String : Optional action to perform on action button click. (defaults to closing the notice)
    - actionParam::String : Optional action parameter.  Example: {\&quot;action\&quot;: \&quot;url\&quot;, actionParam: \&quot;/console/some-page\&quot;}
    - actionText::String : Optional override for the action button text (defaults to OK)
    - description::String : Notice content. Use {{Mattermost}} instead of plain text to support white-labeling. Text supports Markdown.
    - image::String : URL of image to display
    - title::String : Notice title. Use {{Mattermost}} instead of plain text to support white-labeling. Text supports Markdown.
"""
Base.@kwdef mutable struct Notice <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    sysAdminOnly::Union{Nothing, Bool} = nothing
    teamAdminOnly::Union{Nothing, Bool} = nothing
    action::Union{Nothing, String} = nothing
    actionParam::Union{Nothing, String} = nothing
    actionText::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    image::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing

    function Notice(id, sysAdminOnly, teamAdminOnly, action, actionParam, actionText, description, image, title, )
        OpenAPI.validate_property(Notice, Symbol("id"), id)
        OpenAPI.validate_property(Notice, Symbol("sysAdminOnly"), sysAdminOnly)
        OpenAPI.validate_property(Notice, Symbol("teamAdminOnly"), teamAdminOnly)
        OpenAPI.validate_property(Notice, Symbol("action"), action)
        OpenAPI.validate_property(Notice, Symbol("actionParam"), actionParam)
        OpenAPI.validate_property(Notice, Symbol("actionText"), actionText)
        OpenAPI.validate_property(Notice, Symbol("description"), description)
        OpenAPI.validate_property(Notice, Symbol("image"), image)
        OpenAPI.validate_property(Notice, Symbol("title"), title)
        return new(id, sysAdminOnly, teamAdminOnly, action, actionParam, actionText, description, image, title, )
    end
end # type Notice

const _property_types_Notice = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("sysAdminOnly")=>"Bool", Symbol("teamAdminOnly")=>"Bool", Symbol("action")=>"String", Symbol("actionParam")=>"String", Symbol("actionText")=>"String", Symbol("description")=>"String", Symbol("image")=>"String", Symbol("title")=>"String", )
OpenAPI.property_type(::Type{ Notice }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Notice[name]))}

function check_required(o::Notice)
    true
end

function OpenAPI.validate_property(::Type{ Notice }, name::Symbol, val)
end
