# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateOutgoingWebhook_request

    CreateOutgoingWebhookRequest(;
        team_id=nothing,
        channel_id=nothing,
        creator_id=nothing,
        description=nothing,
        display_name=nothing,
        trigger_words=nothing,
        trigger_when=nothing,
        callback_urls=nothing,
        content_type="application/x-www-form-urlencoded",
    )

    - team_id::String : The ID of the team that the webhook watchs
    - channel_id::String : The ID of a public channel that the webhook watchs
    - creator_id::String : The ID of the owner of the webhook if different than the requester. Required in [local mode](https://docs.mattermost.com/administration/mmctl-cli-tool.html#local-mode).
    - description::String : The description for this outgoing webhook
    - display_name::String : The display name for this outgoing webhook
    - trigger_words::Vector{String} : List of words for the webhook to trigger on
    - trigger_when::Int64 : When to trigger the webhook, &#x60;0&#x60; when a trigger word is present at all and &#x60;1&#x60; if the message starts with a trigger word
    - callback_urls::Vector{String} : The URLs to POST the payloads to when the webhook is triggered
    - content_type::String : The format to POST the data in, either &#x60;application/json&#x60; or &#x60;application/x-www-form-urlencoded&#x60;
"""
Base.@kwdef mutable struct CreateOutgoingWebhookRequest <: OpenAPI.APIModel
    team_id::Union{Nothing, String} = nothing
    channel_id::Union{Nothing, String} = nothing
    creator_id::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    display_name::Union{Nothing, String} = nothing
    trigger_words::Union{Nothing, Vector{String}} = nothing
    trigger_when::Union{Nothing, Int64} = nothing
    callback_urls::Union{Nothing, Vector{String}} = nothing
    content_type::Union{Nothing, String} = "application/x-www-form-urlencoded"

    function CreateOutgoingWebhookRequest(team_id, channel_id, creator_id, description, display_name, trigger_words, trigger_when, callback_urls, content_type, )
        OpenAPI.validate_property(CreateOutgoingWebhookRequest, Symbol("team_id"), team_id)
        OpenAPI.validate_property(CreateOutgoingWebhookRequest, Symbol("channel_id"), channel_id)
        OpenAPI.validate_property(CreateOutgoingWebhookRequest, Symbol("creator_id"), creator_id)
        OpenAPI.validate_property(CreateOutgoingWebhookRequest, Symbol("description"), description)
        OpenAPI.validate_property(CreateOutgoingWebhookRequest, Symbol("display_name"), display_name)
        OpenAPI.validate_property(CreateOutgoingWebhookRequest, Symbol("trigger_words"), trigger_words)
        OpenAPI.validate_property(CreateOutgoingWebhookRequest, Symbol("trigger_when"), trigger_when)
        OpenAPI.validate_property(CreateOutgoingWebhookRequest, Symbol("callback_urls"), callback_urls)
        OpenAPI.validate_property(CreateOutgoingWebhookRequest, Symbol("content_type"), content_type)
        return new(team_id, channel_id, creator_id, description, display_name, trigger_words, trigger_when, callback_urls, content_type, )
    end
end # type CreateOutgoingWebhookRequest

const _property_types_CreateOutgoingWebhookRequest = Dict{Symbol,String}(Symbol("team_id")=>"String", Symbol("channel_id")=>"String", Symbol("creator_id")=>"String", Symbol("description")=>"String", Symbol("display_name")=>"String", Symbol("trigger_words")=>"Vector{String}", Symbol("trigger_when")=>"Int64", Symbol("callback_urls")=>"Vector{String}", Symbol("content_type")=>"String", )
OpenAPI.property_type(::Type{ CreateOutgoingWebhookRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateOutgoingWebhookRequest[name]))}

function check_required(o::CreateOutgoingWebhookRequest)
    o.team_id === nothing && (return false)
    o.display_name === nothing && (return false)
    o.trigger_words === nothing && (return false)
    o.callback_urls === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateOutgoingWebhookRequest }, name::Symbol, val)
end
