# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Reaction

    Reaction(;
        user_id=nothing,
        post_id=nothing,
        emoji_name=nothing,
        create_at=nothing,
    )

    - user_id::String : The ID of the user that made this reaction
    - post_id::String : The ID of the post to which this reaction was made
    - emoji_name::String : The name of the emoji that was used for this reaction
    - create_at::Int64 : The time in milliseconds this reaction was made
"""
Base.@kwdef mutable struct Reaction <: OpenAPI.APIModel
    user_id::Union{Nothing, String} = nothing
    post_id::Union{Nothing, String} = nothing
    emoji_name::Union{Nothing, String} = nothing
    create_at::Union{Nothing, Int64} = nothing

    function Reaction(user_id, post_id, emoji_name, create_at, )
        OpenAPI.validate_property(Reaction, Symbol("user_id"), user_id)
        OpenAPI.validate_property(Reaction, Symbol("post_id"), post_id)
        OpenAPI.validate_property(Reaction, Symbol("emoji_name"), emoji_name)
        OpenAPI.validate_property(Reaction, Symbol("create_at"), create_at)
        return new(user_id, post_id, emoji_name, create_at, )
    end
end # type Reaction

const _property_types_Reaction = Dict{Symbol,String}(Symbol("user_id")=>"String", Symbol("post_id")=>"String", Symbol("emoji_name")=>"String", Symbol("create_at")=>"Int64", )
OpenAPI.property_type(::Type{ Reaction }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Reaction[name]))}

function check_required(o::Reaction)
    true
end

function OpenAPI.validate_property(::Type{ Reaction }, name::Symbol, val)
    if name === Symbol("create_at")
        OpenAPI.validate_param(name, "Reaction", :format, val, "int64")
    end
end
