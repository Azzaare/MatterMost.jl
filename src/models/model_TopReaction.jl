# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TopReaction

    TopReaction(;
        emoji_name=nothing,
        count=nothing,
    )

    - emoji_name::String : The name of the emoji used for this reaction.
    - count::Int64 : The number of the times this emoji has been used.
"""
Base.@kwdef mutable struct TopReaction <: OpenAPI.APIModel
    emoji_name::Union{Nothing, String} = nothing
    count::Union{Nothing, Int64} = nothing

    function TopReaction(emoji_name, count, )
        OpenAPI.validate_property(TopReaction, Symbol("emoji_name"), emoji_name)
        OpenAPI.validate_property(TopReaction, Symbol("count"), count)
        return new(emoji_name, count, )
    end
end # type TopReaction

const _property_types_TopReaction = Dict{Symbol,String}(Symbol("emoji_name")=>"String", Symbol("count")=>"Int64", )
OpenAPI.property_type(::Type{ TopReaction }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TopReaction[name]))}

function check_required(o::TopReaction)
    true
end

function OpenAPI.validate_property(::Type{ TopReaction }, name::Symbol, val)
    if name === Symbol("count")
        OpenAPI.validate_param(name, "TopReaction", :format, val, "int64")
    end
end
