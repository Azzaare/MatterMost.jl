# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RegisterTermsOfServiceAction_request

    RegisterTermsOfServiceActionRequest(;
        serviceTermsId=nothing,
        accepted=nothing,
    )

    - serviceTermsId::String : terms of service ID on which the user is acting on
    - accepted::String : true or false, indicates whether the user accepted or rejected the terms of service.
"""
Base.@kwdef mutable struct RegisterTermsOfServiceActionRequest <: OpenAPI.APIModel
    serviceTermsId::Union{Nothing, String} = nothing
    accepted::Union{Nothing, String} = nothing

    function RegisterTermsOfServiceActionRequest(serviceTermsId, accepted, )
        OpenAPI.validate_property(RegisterTermsOfServiceActionRequest, Symbol("serviceTermsId"), serviceTermsId)
        OpenAPI.validate_property(RegisterTermsOfServiceActionRequest, Symbol("accepted"), accepted)
        return new(serviceTermsId, accepted, )
    end
end # type RegisterTermsOfServiceActionRequest

const _property_types_RegisterTermsOfServiceActionRequest = Dict{Symbol,String}(Symbol("serviceTermsId")=>"String", Symbol("accepted")=>"String", )
OpenAPI.property_type(::Type{ RegisterTermsOfServiceActionRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RegisterTermsOfServiceActionRequest[name]))}

function check_required(o::RegisterTermsOfServiceActionRequest)
    o.serviceTermsId === nothing && (return false)
    o.accepted === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RegisterTermsOfServiceActionRequest }, name::Symbol, val)
end
