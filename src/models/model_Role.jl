# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Role

    Role(;
        id=nothing,
        name=nothing,
        display_name=nothing,
        description=nothing,
        permissions=nothing,
        scheme_managed=nothing,
    )

    - id::String : The unique identifier of the role.
    - name::String : The unique name of the role, used when assigning roles to users/groups in contexts.
    - display_name::String : The human readable name for the role.
    - description::String : A human readable description of the role.
    - permissions::Vector{String} : A list of the unique names of the permissions this role grants.
    - scheme_managed::Bool : indicates if this role is managed by a scheme (true), or is a custom stand-alone role (false).
"""
Base.@kwdef mutable struct Role <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    display_name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    permissions::Union{Nothing, Vector{String}} = nothing
    scheme_managed::Union{Nothing, Bool} = nothing

    function Role(id, name, display_name, description, permissions, scheme_managed, )
        OpenAPI.validate_property(Role, Symbol("id"), id)
        OpenAPI.validate_property(Role, Symbol("name"), name)
        OpenAPI.validate_property(Role, Symbol("display_name"), display_name)
        OpenAPI.validate_property(Role, Symbol("description"), description)
        OpenAPI.validate_property(Role, Symbol("permissions"), permissions)
        OpenAPI.validate_property(Role, Symbol("scheme_managed"), scheme_managed)
        return new(id, name, display_name, description, permissions, scheme_managed, )
    end
end # type Role

const _property_types_Role = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("display_name")=>"String", Symbol("description")=>"String", Symbol("permissions")=>"Vector{String}", Symbol("scheme_managed")=>"Bool", )
OpenAPI.property_type(::Type{ Role }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Role[name]))}

function check_required(o::Role)
    true
end

function OpenAPI.validate_property(::Type{ Role }, name::Symbol, val)
end
