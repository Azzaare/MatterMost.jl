# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CloudCustomer

    CloudCustomer(;
        id=nothing,
        creator_id=nothing,
        create_at=nothing,
        email=nothing,
        name=nothing,
        num_employees=nothing,
        contact_first_name=nothing,
        contact_last_name=nothing,
        billing_address=nothing,
        company_address=nothing,
        payment_method=nothing,
    )

    - id::String
    - creator_id::String
    - create_at::Int64
    - email::String
    - name::String
    - num_employees::String
    - contact_first_name::String
    - contact_last_name::String
    - billing_address::Address
    - company_address::Address
    - payment_method::PaymentMethod
"""
Base.@kwdef mutable struct CloudCustomer <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    creator_id::Union{Nothing, String} = nothing
    create_at::Union{Nothing, Int64} = nothing
    email::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    num_employees::Union{Nothing, String} = nothing
    contact_first_name::Union{Nothing, String} = nothing
    contact_last_name::Union{Nothing, String} = nothing
    billing_address = nothing # spec type: Union{ Nothing, Address }
    company_address = nothing # spec type: Union{ Nothing, Address }
    payment_method = nothing # spec type: Union{ Nothing, PaymentMethod }

    function CloudCustomer(id, creator_id, create_at, email, name, num_employees, contact_first_name, contact_last_name, billing_address, company_address, payment_method, )
        OpenAPI.validate_property(CloudCustomer, Symbol("id"), id)
        OpenAPI.validate_property(CloudCustomer, Symbol("creator_id"), creator_id)
        OpenAPI.validate_property(CloudCustomer, Symbol("create_at"), create_at)
        OpenAPI.validate_property(CloudCustomer, Symbol("email"), email)
        OpenAPI.validate_property(CloudCustomer, Symbol("name"), name)
        OpenAPI.validate_property(CloudCustomer, Symbol("num_employees"), num_employees)
        OpenAPI.validate_property(CloudCustomer, Symbol("contact_first_name"), contact_first_name)
        OpenAPI.validate_property(CloudCustomer, Symbol("contact_last_name"), contact_last_name)
        OpenAPI.validate_property(CloudCustomer, Symbol("billing_address"), billing_address)
        OpenAPI.validate_property(CloudCustomer, Symbol("company_address"), company_address)
        OpenAPI.validate_property(CloudCustomer, Symbol("payment_method"), payment_method)
        return new(id, creator_id, create_at, email, name, num_employees, contact_first_name, contact_last_name, billing_address, company_address, payment_method, )
    end
end # type CloudCustomer

const _property_types_CloudCustomer = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("creator_id")=>"String", Symbol("create_at")=>"Int64", Symbol("email")=>"String", Symbol("name")=>"String", Symbol("num_employees")=>"String", Symbol("contact_first_name")=>"String", Symbol("contact_last_name")=>"String", Symbol("billing_address")=>"Address", Symbol("company_address")=>"Address", Symbol("payment_method")=>"PaymentMethod", )
OpenAPI.property_type(::Type{ CloudCustomer }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CloudCustomer[name]))}

function check_required(o::CloudCustomer)
    true
end

function OpenAPI.validate_property(::Type{ CloudCustomer }, name::Symbol, val)
    if name === Symbol("create_at")
        OpenAPI.validate_param(name, "CloudCustomer", :format, val, "int64")
    end
end
