# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SearchTeams_request

    SearchTeamsRequest(;
        term=nothing,
        page=nothing,
        per_page=nothing,
        allow_open_invite=nothing,
        group_constrained=nothing,
        exclude_policy_constrained=false,
    )

    - term::String : The search term to match against the name or display name of teams
    - page::String : The page number to return, if paginated. If this parameter is not present with the &#x60;per_page&#x60; parameter then the results will be returned un-paged.
    - per_page::String : The number of entries to return per page, if paginated. If this parameter is not present with the &#x60;page&#x60; parameter then the results will be returned un-paged.
    - allow_open_invite::Bool : Filters results to teams where &#x60;allow_open_invite&#x60; is set to true or false, excludes group constrained channels if this filter option is passed. If this filter option is not passed then the query will remain unchanged. __Minimum server version__: 5.28 
    - group_constrained::Bool : Filters results to teams where &#x60;group_constrained&#x60; is set to true or false, returns the union of results when used with &#x60;allow_open_invite&#x60; If the filter option is not passed then the query will remain unchanged. __Minimum server version__: 5.28 
    - exclude_policy_constrained::Bool : If set to true, only teams which do not have a granular retention policy assigned to them will be returned. The &#x60;sysconsole_read_compliance_data_retention&#x60; permission is required to use this parameter. __Minimum server version__: 5.35 
"""
Base.@kwdef mutable struct SearchTeamsRequest <: OpenAPI.APIModel
    term::Union{Nothing, String} = nothing
    page::Union{Nothing, String} = nothing
    per_page::Union{Nothing, String} = nothing
    allow_open_invite::Union{Nothing, Bool} = nothing
    group_constrained::Union{Nothing, Bool} = nothing
    exclude_policy_constrained::Union{Nothing, Bool} = false

    function SearchTeamsRequest(term, page, per_page, allow_open_invite, group_constrained, exclude_policy_constrained, )
        OpenAPI.validate_property(SearchTeamsRequest, Symbol("term"), term)
        OpenAPI.validate_property(SearchTeamsRequest, Symbol("page"), page)
        OpenAPI.validate_property(SearchTeamsRequest, Symbol("per_page"), per_page)
        OpenAPI.validate_property(SearchTeamsRequest, Symbol("allow_open_invite"), allow_open_invite)
        OpenAPI.validate_property(SearchTeamsRequest, Symbol("group_constrained"), group_constrained)
        OpenAPI.validate_property(SearchTeamsRequest, Symbol("exclude_policy_constrained"), exclude_policy_constrained)
        return new(term, page, per_page, allow_open_invite, group_constrained, exclude_policy_constrained, )
    end
end # type SearchTeamsRequest

const _property_types_SearchTeamsRequest = Dict{Symbol,String}(Symbol("term")=>"String", Symbol("page")=>"String", Symbol("per_page")=>"String", Symbol("allow_open_invite")=>"Bool", Symbol("group_constrained")=>"Bool", Symbol("exclude_policy_constrained")=>"Bool", )
OpenAPI.property_type(::Type{ SearchTeamsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SearchTeamsRequest[name]))}

function check_required(o::SearchTeamsRequest)
    true
end

function OpenAPI.validate_property(::Type{ SearchTeamsRequest }, name::Symbol, val)
end
