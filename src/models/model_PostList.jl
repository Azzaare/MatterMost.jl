# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PostList

    PostList(;
        order=nothing,
        posts=nothing,
        next_post_id=nothing,
        prev_post_id=nothing,
        has_next=nothing,
    )

    - order::Vector{String}
    - posts::Dict{String, Post}
    - next_post_id::String : The ID of next post. Not omitted when empty or not relevant.
    - prev_post_id::String : The ID of previous post. Not omitted when empty or not relevant.
    - has_next::Bool : Whether there are more items after this page.
"""
Base.@kwdef mutable struct PostList <: OpenAPI.APIModel
    order::Union{Nothing, Vector{String}} = nothing
    posts::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Post} }
    next_post_id::Union{Nothing, String} = nothing
    prev_post_id::Union{Nothing, String} = nothing
    has_next::Union{Nothing, Bool} = nothing

    function PostList(order, posts, next_post_id, prev_post_id, has_next, )
        OpenAPI.validate_property(PostList, Symbol("order"), order)
        OpenAPI.validate_property(PostList, Symbol("posts"), posts)
        OpenAPI.validate_property(PostList, Symbol("next_post_id"), next_post_id)
        OpenAPI.validate_property(PostList, Symbol("prev_post_id"), prev_post_id)
        OpenAPI.validate_property(PostList, Symbol("has_next"), has_next)
        return new(order, posts, next_post_id, prev_post_id, has_next, )
    end
end # type PostList

const _property_types_PostList = Dict{Symbol,String}(Symbol("order")=>"Vector{String}", Symbol("posts")=>"Dict{String, Post}", Symbol("next_post_id")=>"String", Symbol("prev_post_id")=>"String", Symbol("has_next")=>"Bool", )
OpenAPI.property_type(::Type{ PostList }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PostList[name]))}

function check_required(o::PostList)
    true
end

function OpenAPI.validate_property(::Type{ PostList }, name::Symbol, val)
end
