# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SharedChannel

    SharedChannel(;
        id=nothing,
        team_id=nothing,
        home=nothing,
        readonly=nothing,
        name=nothing,
        display_name=nothing,
        purpose=nothing,
        header=nothing,
        creator_id=nothing,
        create_at=nothing,
        update_at=nothing,
        remote_id=nothing,
    )

    - id::String : Channel id of the shared channel
    - team_id::String
    - home::Bool : Is this the home cluster for the shared channel
    - readonly::Bool : Is this shared channel shared as read only
    - name::String : Channel name as it is shared (may be different than original channel name)
    - display_name::String : Channel display name as it appears locally
    - purpose::String
    - header::String
    - creator_id::String : Id of the user that shared the channel
    - create_at::Int64 : Time in milliseconds that the channel was shared
    - update_at::Int64 : Time in milliseconds that the shared channel record was last updated
    - remote_id::String : Id of the remote cluster where the shared channel is homed
"""
Base.@kwdef mutable struct SharedChannel <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    team_id::Union{Nothing, String} = nothing
    home::Union{Nothing, Bool} = nothing
    readonly::Union{Nothing, Bool} = nothing
    name::Union{Nothing, String} = nothing
    display_name::Union{Nothing, String} = nothing
    purpose::Union{Nothing, String} = nothing
    header::Union{Nothing, String} = nothing
    creator_id::Union{Nothing, String} = nothing
    create_at::Union{Nothing, Int64} = nothing
    update_at::Union{Nothing, Int64} = nothing
    remote_id::Union{Nothing, String} = nothing

    function SharedChannel(id, team_id, home, readonly, name, display_name, purpose, header, creator_id, create_at, update_at, remote_id, )
        OpenAPI.validate_property(SharedChannel, Symbol("id"), id)
        OpenAPI.validate_property(SharedChannel, Symbol("team_id"), team_id)
        OpenAPI.validate_property(SharedChannel, Symbol("home"), home)
        OpenAPI.validate_property(SharedChannel, Symbol("readonly"), readonly)
        OpenAPI.validate_property(SharedChannel, Symbol("name"), name)
        OpenAPI.validate_property(SharedChannel, Symbol("display_name"), display_name)
        OpenAPI.validate_property(SharedChannel, Symbol("purpose"), purpose)
        OpenAPI.validate_property(SharedChannel, Symbol("header"), header)
        OpenAPI.validate_property(SharedChannel, Symbol("creator_id"), creator_id)
        OpenAPI.validate_property(SharedChannel, Symbol("create_at"), create_at)
        OpenAPI.validate_property(SharedChannel, Symbol("update_at"), update_at)
        OpenAPI.validate_property(SharedChannel, Symbol("remote_id"), remote_id)
        return new(id, team_id, home, readonly, name, display_name, purpose, header, creator_id, create_at, update_at, remote_id, )
    end
end # type SharedChannel

const _property_types_SharedChannel = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("team_id")=>"String", Symbol("home")=>"Bool", Symbol("readonly")=>"Bool", Symbol("name")=>"String", Symbol("display_name")=>"String", Symbol("purpose")=>"String", Symbol("header")=>"String", Symbol("creator_id")=>"String", Symbol("create_at")=>"Int64", Symbol("update_at")=>"Int64", Symbol("remote_id")=>"String", )
OpenAPI.property_type(::Type{ SharedChannel }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SharedChannel[name]))}

function check_required(o::SharedChannel)
    true
end

function OpenAPI.validate_property(::Type{ SharedChannel }, name::Symbol, val)
end
