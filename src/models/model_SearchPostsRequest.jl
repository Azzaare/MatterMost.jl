# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SearchPosts_request

    SearchPostsRequest(;
        terms=nothing,
        is_or_search=nothing,
        time_zone_offset=0,
        include_deleted_channels=nothing,
        page=0,
        per_page=60,
    )

    - terms::String : The search terms as inputed by the user. To search for posts from a user include &#x60;from:someusername&#x60;, using a user&#39;s username. To search in a specific channel include &#x60;in:somechannel&#x60;, using the channel name (not the display name).
    - is_or_search::Bool : Set to true if an Or search should be performed vs an And search.
    - time_zone_offset::Int64 : Offset from UTC of user timezone for date searches.
    - include_deleted_channels::Bool : Set to true if deleted channels should be included in the search. (archived channels)
    - page::Int64 : The page to select. (Only works with Elasticsearch)
    - per_page::Int64 : The number of posts per page. (Only works with Elasticsearch)
"""
Base.@kwdef mutable struct SearchPostsRequest <: OpenAPI.APIModel
    terms::Union{Nothing, String} = nothing
    is_or_search::Union{Nothing, Bool} = nothing
    time_zone_offset::Union{Nothing, Int64} = 0
    include_deleted_channels::Union{Nothing, Bool} = nothing
    page::Union{Nothing, Int64} = 0
    per_page::Union{Nothing, Int64} = 60

    function SearchPostsRequest(terms, is_or_search, time_zone_offset, include_deleted_channels, page, per_page, )
        OpenAPI.validate_property(SearchPostsRequest, Symbol("terms"), terms)
        OpenAPI.validate_property(SearchPostsRequest, Symbol("is_or_search"), is_or_search)
        OpenAPI.validate_property(SearchPostsRequest, Symbol("time_zone_offset"), time_zone_offset)
        OpenAPI.validate_property(SearchPostsRequest, Symbol("include_deleted_channels"), include_deleted_channels)
        OpenAPI.validate_property(SearchPostsRequest, Symbol("page"), page)
        OpenAPI.validate_property(SearchPostsRequest, Symbol("per_page"), per_page)
        return new(terms, is_or_search, time_zone_offset, include_deleted_channels, page, per_page, )
    end
end # type SearchPostsRequest

const _property_types_SearchPostsRequest = Dict{Symbol,String}(Symbol("terms")=>"String", Symbol("is_or_search")=>"Bool", Symbol("time_zone_offset")=>"Int64", Symbol("include_deleted_channels")=>"Bool", Symbol("page")=>"Int64", Symbol("per_page")=>"Int64", )
OpenAPI.property_type(::Type{ SearchPostsRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SearchPostsRequest[name]))}

function check_required(o::SearchPostsRequest)
    o.terms === nothing && (return false)
    o.is_or_search === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ SearchPostsRequest }, name::Symbol, val)
end
