# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SearchAllChannels_200_response

    SearchAllChannels200Response(;
        channels=nothing,
        total_count=nothing,
    )

    - channels::Vector{Channel} : The channels that matched the query.
    - total_count::Float64 : The total number of results, regardless of page and per_page requested.
"""
Base.@kwdef mutable struct SearchAllChannels200Response <: OpenAPI.APIModel
    channels::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Channel} }
    total_count::Union{Nothing, Float64} = nothing

    function SearchAllChannels200Response(channels, total_count, )
        OpenAPI.validate_property(SearchAllChannels200Response, Symbol("channels"), channels)
        OpenAPI.validate_property(SearchAllChannels200Response, Symbol("total_count"), total_count)
        return new(channels, total_count, )
    end
end # type SearchAllChannels200Response

const _property_types_SearchAllChannels200Response = Dict{Symbol,String}(Symbol("channels")=>"Vector{Channel}", Symbol("total_count")=>"Float64", )
OpenAPI.property_type(::Type{ SearchAllChannels200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SearchAllChannels200Response[name]))}

function check_required(o::SearchAllChannels200Response)
    true
end

function OpenAPI.validate_property(::Type{ SearchAllChannels200Response }, name::Symbol, val)
end
