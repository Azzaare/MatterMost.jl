# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PostMetadata_embeds_inner

    PostMetadataEmbedsInner(;
        type=nothing,
        url=nothing,
        data=nothing,
    )

    - type::String : The type of content that is embedded in this point.
    - url::String : The URL of the embedded content, if one exists.
    - data::Any : Any additional information about the embedded content. Only used at this time to store OpenGraph metadata. This field will be null for non-OpenGraph embeds. 
"""
Base.@kwdef mutable struct PostMetadataEmbedsInner <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    data::Union{Nothing, Any} = nothing

    function PostMetadataEmbedsInner(type, url, data, )
        OpenAPI.validate_property(PostMetadataEmbedsInner, Symbol("type"), type)
        OpenAPI.validate_property(PostMetadataEmbedsInner, Symbol("url"), url)
        OpenAPI.validate_property(PostMetadataEmbedsInner, Symbol("data"), data)
        return new(type, url, data, )
    end
end # type PostMetadataEmbedsInner

const _property_types_PostMetadataEmbedsInner = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("url")=>"String", Symbol("data")=>"Any", )
OpenAPI.property_type(::Type{ PostMetadataEmbedsInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PostMetadataEmbedsInner[name]))}

function check_required(o::PostMetadataEmbedsInner)
    true
end

function OpenAPI.validate_property(::Type{ PostMetadataEmbedsInner }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "PostMetadataEmbedsInner", :enum, val, ["image", "message_attachment", "opengraph", "link"])
    end
end
