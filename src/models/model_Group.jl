# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Group

    Group(;
        id=nothing,
        name=nothing,
        display_name=nothing,
        description=nothing,
        source=nothing,
        remote_id=nothing,
        create_at=nothing,
        update_at=nothing,
        delete_at=nothing,
        has_syncables=nothing,
    )

    - id::String
    - name::String
    - display_name::String
    - description::String
    - source::String
    - remote_id::String
    - create_at::Int64
    - update_at::Int64
    - delete_at::Int64
    - has_syncables::Bool
"""
Base.@kwdef mutable struct Group <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    display_name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    source::Union{Nothing, String} = nothing
    remote_id::Union{Nothing, String} = nothing
    create_at::Union{Nothing, Int64} = nothing
    update_at::Union{Nothing, Int64} = nothing
    delete_at::Union{Nothing, Int64} = nothing
    has_syncables::Union{Nothing, Bool} = nothing

    function Group(id, name, display_name, description, source, remote_id, create_at, update_at, delete_at, has_syncables, )
        OpenAPI.validate_property(Group, Symbol("id"), id)
        OpenAPI.validate_property(Group, Symbol("name"), name)
        OpenAPI.validate_property(Group, Symbol("display_name"), display_name)
        OpenAPI.validate_property(Group, Symbol("description"), description)
        OpenAPI.validate_property(Group, Symbol("source"), source)
        OpenAPI.validate_property(Group, Symbol("remote_id"), remote_id)
        OpenAPI.validate_property(Group, Symbol("create_at"), create_at)
        OpenAPI.validate_property(Group, Symbol("update_at"), update_at)
        OpenAPI.validate_property(Group, Symbol("delete_at"), delete_at)
        OpenAPI.validate_property(Group, Symbol("has_syncables"), has_syncables)
        return new(id, name, display_name, description, source, remote_id, create_at, update_at, delete_at, has_syncables, )
    end
end # type Group

const _property_types_Group = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("display_name")=>"String", Symbol("description")=>"String", Symbol("source")=>"String", Symbol("remote_id")=>"String", Symbol("create_at")=>"Int64", Symbol("update_at")=>"Int64", Symbol("delete_at")=>"Int64", Symbol("has_syncables")=>"Bool", )
OpenAPI.property_type(::Type{ Group }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Group[name]))}

function check_required(o::Group)
    true
end

function OpenAPI.validate_property(::Type{ Group }, name::Symbol, val)
    if name === Symbol("create_at")
        OpenAPI.validate_param(name, "Group", :format, val, "int64")
    end
    if name === Symbol("update_at")
        OpenAPI.validate_param(name, "Group", :format, val, "int64")
    end
    if name === Symbol("delete_at")
        OpenAPI.validate_param(name, "Group", :format, val, "int64")
    end
end
