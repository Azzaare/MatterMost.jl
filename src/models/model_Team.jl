# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Team

    Team(;
        id=nothing,
        create_at=nothing,
        update_at=nothing,
        delete_at=nothing,
        display_name=nothing,
        name=nothing,
        description=nothing,
        email=nothing,
        type=nothing,
        allowed_domains=nothing,
        invite_id=nothing,
        allow_open_invite=nothing,
        policy_id=nothing,
    )

    - id::String
    - create_at::Int64 : The time in milliseconds a team was created
    - update_at::Int64 : The time in milliseconds a team was last updated
    - delete_at::Int64 : The time in milliseconds a team was deleted
    - display_name::String
    - name::String
    - description::String
    - email::String
    - type::String
    - allowed_domains::String
    - invite_id::String
    - allow_open_invite::Bool
    - policy_id::String : The data retention policy to which this team has been assigned. If no such policy exists, or the caller does not have the &#x60;sysconsole_read_compliance_data_retention&#x60; permission, this field will be null.
"""
Base.@kwdef mutable struct Team <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    create_at::Union{Nothing, Int64} = nothing
    update_at::Union{Nothing, Int64} = nothing
    delete_at::Union{Nothing, Int64} = nothing
    display_name::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    email::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    allowed_domains::Union{Nothing, String} = nothing
    invite_id::Union{Nothing, String} = nothing
    allow_open_invite::Union{Nothing, Bool} = nothing
    policy_id::Union{Nothing, String} = nothing

    function Team(id, create_at, update_at, delete_at, display_name, name, description, email, type, allowed_domains, invite_id, allow_open_invite, policy_id, )
        OpenAPI.validate_property(Team, Symbol("id"), id)
        OpenAPI.validate_property(Team, Symbol("create_at"), create_at)
        OpenAPI.validate_property(Team, Symbol("update_at"), update_at)
        OpenAPI.validate_property(Team, Symbol("delete_at"), delete_at)
        OpenAPI.validate_property(Team, Symbol("display_name"), display_name)
        OpenAPI.validate_property(Team, Symbol("name"), name)
        OpenAPI.validate_property(Team, Symbol("description"), description)
        OpenAPI.validate_property(Team, Symbol("email"), email)
        OpenAPI.validate_property(Team, Symbol("type"), type)
        OpenAPI.validate_property(Team, Symbol("allowed_domains"), allowed_domains)
        OpenAPI.validate_property(Team, Symbol("invite_id"), invite_id)
        OpenAPI.validate_property(Team, Symbol("allow_open_invite"), allow_open_invite)
        OpenAPI.validate_property(Team, Symbol("policy_id"), policy_id)
        return new(id, create_at, update_at, delete_at, display_name, name, description, email, type, allowed_domains, invite_id, allow_open_invite, policy_id, )
    end
end # type Team

const _property_types_Team = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("create_at")=>"Int64", Symbol("update_at")=>"Int64", Symbol("delete_at")=>"Int64", Symbol("display_name")=>"String", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("email")=>"String", Symbol("type")=>"String", Symbol("allowed_domains")=>"String", Symbol("invite_id")=>"String", Symbol("allow_open_invite")=>"Bool", Symbol("policy_id")=>"String", )
OpenAPI.property_type(::Type{ Team }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Team[name]))}

function check_required(o::Team)
    true
end

function OpenAPI.validate_property(::Type{ Team }, name::Symbol, val)
    if name === Symbol("create_at")
        OpenAPI.validate_param(name, "Team", :format, val, "int64")
    end
    if name === Symbol("update_at")
        OpenAPI.validate_param(name, "Team", :format, val, "int64")
    end
    if name === Symbol("delete_at")
        OpenAPI.validate_param(name, "Team", :format, val, "int64")
    end
end
