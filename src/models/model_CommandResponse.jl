# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CommandResponse

    CommandResponse(;
        ResponseType=nothing,
        Text=nothing,
        Username=nothing,
        IconURL=nothing,
        GotoLocation=nothing,
        Attachments=nothing,
    )

    - ResponseType::String : The response type either in_channel or ephemeral
    - Text::String
    - Username::String
    - IconURL::String
    - GotoLocation::String
    - Attachments::Vector{SlackAttachment}
"""
Base.@kwdef mutable struct CommandResponse <: OpenAPI.APIModel
    ResponseType::Union{Nothing, String} = nothing
    Text::Union{Nothing, String} = nothing
    Username::Union{Nothing, String} = nothing
    IconURL::Union{Nothing, String} = nothing
    GotoLocation::Union{Nothing, String} = nothing
    Attachments::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SlackAttachment} }

    function CommandResponse(ResponseType, Text, Username, IconURL, GotoLocation, Attachments, )
        OpenAPI.validate_property(CommandResponse, Symbol("ResponseType"), ResponseType)
        OpenAPI.validate_property(CommandResponse, Symbol("Text"), Text)
        OpenAPI.validate_property(CommandResponse, Symbol("Username"), Username)
        OpenAPI.validate_property(CommandResponse, Symbol("IconURL"), IconURL)
        OpenAPI.validate_property(CommandResponse, Symbol("GotoLocation"), GotoLocation)
        OpenAPI.validate_property(CommandResponse, Symbol("Attachments"), Attachments)
        return new(ResponseType, Text, Username, IconURL, GotoLocation, Attachments, )
    end
end # type CommandResponse

const _property_types_CommandResponse = Dict{Symbol,String}(Symbol("ResponseType")=>"String", Symbol("Text")=>"String", Symbol("Username")=>"String", Symbol("IconURL")=>"String", Symbol("GotoLocation")=>"String", Symbol("Attachments")=>"Vector{SlackAttachment}", )
OpenAPI.property_type(::Type{ CommandResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CommandResponse[name]))}

function check_required(o::CommandResponse)
    true
end

function OpenAPI.validate_property(::Type{ CommandResponse }, name::Symbol, val)
end
