# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct GroupsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `GroupsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ GroupsApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_add_group_members_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("501", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_add_group_members(_api::GroupsApi, group_id::String, add_group_members_request::AddGroupMembersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_add_group_members_GroupsApi, "/groups/{group_id}/members", ["bearerAuth", ], add_group_members_request)
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Adds members to a custom group

Adds members to a custom group.  ##### Permissions Must have `custom_group_manage_members` permission for the given group.  __Minimum server version__: 6.3 

Params:
- group_id::String (required)
- add_group_members_request::AddGroupMembersRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function add_group_members(_api::GroupsApi, group_id::String, add_group_members_request::AddGroupMembersRequest; _mediaType=nothing)
    _ctx = _oacinternal_add_group_members(_api, group_id, add_group_members_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function add_group_members(_api::GroupsApi, response_stream::Channel, group_id::String, add_group_members_request::AddGroupMembersRequest; _mediaType=nothing)
    _ctx = _oacinternal_add_group_members(_api, group_id, add_group_members_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_group_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_create_group(_api::GroupsApi, create_group_request::CreateGroupRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_group_GroupsApi, "/groups", ["bearerAuth", ], create_group_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a custom group

Create a `custom` type group.  #### Permission Must have `create_custom_group` permission.  __Minimum server version__: 6.3 

Params:
- create_group_request::CreateGroupRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function create_group(_api::GroupsApi, create_group_request::CreateGroupRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_group(_api, create_group_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_group(_api::GroupsApi, response_stream::Channel, create_group_request::CreateGroupRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_group(_api, create_group_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_group_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("501", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_group(_api::GroupsApi, group_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_group_GroupsApi, "/groups/{group_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a custom group

Soft deletes a custom group.  ##### Permissions Must have `custom_group_delete` permission for the given group.  __Minimum server version__: 6.3 

Params:
- group_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_group(_api::GroupsApi, group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_group(_api, group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_group(_api::GroupsApi, response_stream::Channel, group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_group(_api, group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_group_members_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("501", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_delete_group_members(_api::GroupsApi, group_id::String, delete_group_members_request::DeleteGroupMembersRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_group_members_GroupsApi, "/groups/{group_id}/members", ["bearerAuth", ], delete_group_members_request)
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Removes members from a custom group

Soft deletes a custom group members.  ##### Permissions Must have `custom_group_manage_members` permission for the given group.  __Minimum server version__: 6.3 

Params:
- group_id::String (required)
- delete_group_members_request::DeleteGroupMembersRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_group_members(_api::GroupsApi, group_id::String, delete_group_members_request::DeleteGroupMembersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_group_members(_api, group_id, delete_group_members_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_group_members(_api::GroupsApi, response_stream::Channel, group_id::String, delete_group_members_request::DeleteGroupMembersRequest; _mediaType=nothing)
    _ctx = _oacinternal_delete_group_members(_api, group_id, delete_group_members_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_group_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Group,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_group(_api::GroupsApi, group_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_group_GroupsApi, "/groups/{group_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a group

Get group from the provided group id string  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)

Return: Group, OpenAPI.Clients.ApiResponse
"""
function get_group(_api::GroupsApi, group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group(_api, group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_group(_api::GroupsApi, response_stream::Channel, group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group(_api, group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_group_stats_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetGroupStats200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_group_stats(_api::GroupsApi, group_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_group_stats_GroupsApi, "/groups/{group_id}/stats", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get group stats

Retrieve the stats of a given group.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.26 

Params:
- group_id::String (required)

Return: GetGroupStats200Response, OpenAPI.Clients.ApiResponse
"""
function get_group_stats(_api::GroupsApi, group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group_stats(_api, group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_group_stats(_api::GroupsApi, response_stream::Channel, group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group_stats(_api, group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_group_syncable_for_channel_id_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GroupSyncableChannel,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_group_syncable_for_channel_id(_api::GroupsApi, group_id::String, channel_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_group_syncable_for_channel_id_GroupsApi, "/groups/{group_id}/channels/{channel_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get GroupSyncable from channel ID

Get the GroupSyncable object with group_id and channel_id from params ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)
- channel_id::String (required)

Return: GroupSyncableChannel, OpenAPI.Clients.ApiResponse
"""
function get_group_syncable_for_channel_id(_api::GroupsApi, group_id::String, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group_syncable_for_channel_id(_api, group_id, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_group_syncable_for_channel_id(_api::GroupsApi, response_stream::Channel, group_id::String, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group_syncable_for_channel_id(_api, group_id, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_group_syncable_for_team_id_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GroupSyncableTeam,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_group_syncable_for_team_id(_api::GroupsApi, group_id::String, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_group_syncable_for_team_id_GroupsApi, "/groups/{group_id}/teams/{team_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get GroupSyncable from Team ID

Get the GroupSyncable object with group_id and team_id from params ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)
- team_id::String (required)

Return: GroupSyncableTeam, OpenAPI.Clients.ApiResponse
"""
function get_group_syncable_for_team_id(_api::GroupsApi, group_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group_syncable_for_team_id(_api, group_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_group_syncable_for_team_id(_api::GroupsApi, response_stream::Channel, group_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group_syncable_for_team_id(_api, group_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_group_syncables_channels_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{GroupSyncableChannels},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_group_syncables_channels(_api::GroupsApi, group_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_group_syncables_channels_GroupsApi, "/groups/{group_id}/channels", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get group channels

Retrieve the list of channels associated to the group ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)

Return: Vector{GroupSyncableChannels}, OpenAPI.Clients.ApiResponse
"""
function get_group_syncables_channels(_api::GroupsApi, group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group_syncables_channels(_api, group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_group_syncables_channels(_api::GroupsApi, response_stream::Channel, group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group_syncables_channels(_api, group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_group_syncables_teams_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{GroupSyncableTeams},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_group_syncables_teams(_api::GroupsApi, group_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_group_syncables_teams_GroupsApi, "/groups/{group_id}/teams", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get group teams

Retrieve the list of teams associated to the group ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)

Return: Vector{GroupSyncableTeams}, OpenAPI.Clients.ApiResponse
"""
function get_group_syncables_teams(_api::GroupsApi, group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group_syncables_teams(_api, group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_group_syncables_teams(_api::GroupsApi, response_stream::Channel, group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_group_syncables_teams(_api, group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_group_users_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetGroupUsers200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_group_users(_api::GroupsApi, group_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_group_users_GroupsApi, "/groups/{group_id}/members", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get group users

Retrieve the list of users associated with a given group.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)
- page::Int64
- per_page::Int64

Return: GetGroupUsers200Response, OpenAPI.Clients.ApiResponse
"""
function get_group_users(_api::GroupsApi, group_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_group_users(_api, group_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_group_users(_api::GroupsApi, response_stream::Channel, group_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_group_users(_api, group_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_groups_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Group},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_groups(_api::GroupsApi, not_associated_to_team::String, not_associated_to_channel::String; page=nothing, per_page=nothing, q=nothing, include_member_count=nothing, since=nothing, filter_allow_reference=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_groups_GroupsApi, "/groups", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "q", q)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_member_count", include_member_count)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "not_associated_to_team", not_associated_to_team)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "not_associated_to_channel", not_associated_to_channel)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "since", since)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "filter_allow_reference", filter_allow_reference)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get groups

Retrieve a list of all groups not associated to a particular channel or team.  `not_associated_to_team` **OR** `not_associated_to_channel` is required.  If you use `not_associated_to_team`, you must be a team admin for that particular team (permission to manage that team).  If you use `not_associated_to_channel`, you must be a channel admin for that particular channel (permission to manage that channel).  __Minimum server version__: 5.11 

Params:
- not_associated_to_team::String (required)
- not_associated_to_channel::String (required)
- page::Int64
- per_page::Int64
- q::String
- include_member_count::Bool
- since::Int64
- filter_allow_reference::Bool

Return: Vector{Group}, OpenAPI.Clients.ApiResponse
"""
function get_groups(_api::GroupsApi, not_associated_to_team::String, not_associated_to_channel::String; page=nothing, per_page=nothing, q=nothing, include_member_count=nothing, since=nothing, filter_allow_reference=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_groups(_api, not_associated_to_team, not_associated_to_channel; page=page, per_page=per_page, q=q, include_member_count=include_member_count, since=since, filter_allow_reference=filter_allow_reference, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_groups(_api::GroupsApi, response_stream::Channel, not_associated_to_team::String, not_associated_to_channel::String; page=nothing, per_page=nothing, q=nothing, include_member_count=nothing, since=nothing, filter_allow_reference=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_groups(_api, not_associated_to_team, not_associated_to_channel; page=page, per_page=per_page, q=q, include_member_count=include_member_count, since=since, filter_allow_reference=filter_allow_reference, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_groups_associated_to_channels_by_team_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Dict},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_groups_associated_to_channels_by_team(_api::GroupsApi, team_id::String; page=nothing, per_page=nothing, filter_allow_reference=nothing, paginate=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_groups_associated_to_channels_by_team_GroupsApi, "/teams/{team_id}/groups_by_channels", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "filter_allow_reference", filter_allow_reference)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "paginate", paginate)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get team groups by channels

Retrieve the set of groups associated with the channels in the given team grouped by channel.  ##### Permissions Must have `manage_system` permission or can access only for current user  __Minimum server version__: 5.11 

Params:
- team_id::String (required)
- page::Int64
- per_page::Int64
- filter_allow_reference::Bool
- paginate::Bool

Return: Vector{Dict}, OpenAPI.Clients.ApiResponse
"""
function get_groups_associated_to_channels_by_team(_api::GroupsApi, team_id::String; page=nothing, per_page=nothing, filter_allow_reference=nothing, paginate=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_groups_associated_to_channels_by_team(_api, team_id; page=page, per_page=per_page, filter_allow_reference=filter_allow_reference, paginate=paginate, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_groups_associated_to_channels_by_team(_api::GroupsApi, response_stream::Channel, team_id::String; page=nothing, per_page=nothing, filter_allow_reference=nothing, paginate=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_groups_associated_to_channels_by_team(_api, team_id; page=page, per_page=per_page, filter_allow_reference=filter_allow_reference, paginate=paginate, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_groups_by_channel_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Group},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_groups_by_channel(_api::GroupsApi, channel_id::String; page=nothing, per_page=nothing, filter_allow_reference=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_groups_by_channel_GroupsApi, "/channels/{channel_id}/groups", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "filter_allow_reference", filter_allow_reference)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get channel groups

Retrieve the list of groups associated with a given channel.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 

Params:
- channel_id::String (required)
- page::Int64
- per_page::Int64
- filter_allow_reference::Bool

Return: Vector{Group}, OpenAPI.Clients.ApiResponse
"""
function get_groups_by_channel(_api::GroupsApi, channel_id::String; page=nothing, per_page=nothing, filter_allow_reference=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_groups_by_channel(_api, channel_id; page=page, per_page=per_page, filter_allow_reference=filter_allow_reference, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_groups_by_channel(_api::GroupsApi, response_stream::Channel, channel_id::String; page=nothing, per_page=nothing, filter_allow_reference=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_groups_by_channel(_api, channel_id; page=page, per_page=per_page, filter_allow_reference=filter_allow_reference, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_groups_by_team_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Group},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_groups_by_team(_api::GroupsApi, team_id::String; page=nothing, per_page=nothing, filter_allow_reference=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_groups_by_team_GroupsApi, "/teams/{team_id}/groups", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "filter_allow_reference", filter_allow_reference)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get team groups

Retrieve the list of groups associated with a given team.  __Minimum server version__: 5.11 

Params:
- team_id::String (required)
- page::Int64
- per_page::Int64
- filter_allow_reference::Bool

Return: Vector{Group}, OpenAPI.Clients.ApiResponse
"""
function get_groups_by_team(_api::GroupsApi, team_id::String; page=nothing, per_page=nothing, filter_allow_reference=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_groups_by_team(_api, team_id; page=page, per_page=per_page, filter_allow_reference=filter_allow_reference, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_groups_by_team(_api::GroupsApi, response_stream::Channel, team_id::String; page=nothing, per_page=nothing, filter_allow_reference=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_groups_by_team(_api, team_id; page=page, per_page=per_page, filter_allow_reference=filter_allow_reference, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_groups_by_user_id_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Group},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_groups_by_user_id(_api::GroupsApi, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_groups_by_user_id_GroupsApi, "/users/{user_id}/groups", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get groups for a userId

Retrieve the list of groups associated to the user  __Minimum server version__: 5.24 

Params:
- user_id::String (required)

Return: Vector{Group}, OpenAPI.Clients.ApiResponse
"""
function get_groups_by_user_id(_api::GroupsApi, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_groups_by_user_id(_api, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_groups_by_user_id(_api::GroupsApi, response_stream::Channel, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_groups_by_user_id(_api, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_link_group_syncable_for_channel_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => GroupSyncableChannel,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_link_group_syncable_for_channel(_api::GroupsApi, group_id::String, channel_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_link_group_syncable_for_channel_GroupsApi, "/groups/{group_id}/channels/{channel_id}/link", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Link a channel to a group

Link a channel to a group ##### Permissions If the channel is private, you must have `manage_private_channel_members` permission. Otherwise, you must have the `manage_public_channel_members` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)
- channel_id::String (required)

Return: GroupSyncableChannel, OpenAPI.Clients.ApiResponse
"""
function link_group_syncable_for_channel(_api::GroupsApi, group_id::String, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_link_group_syncable_for_channel(_api, group_id, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function link_group_syncable_for_channel(_api::GroupsApi, response_stream::Channel, group_id::String, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_link_group_syncable_for_channel(_api, group_id, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_link_group_syncable_for_team_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => GroupSyncableTeam,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_link_group_syncable_for_team(_api::GroupsApi, group_id::String, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_link_group_syncable_for_team_GroupsApi, "/groups/{group_id}/teams/{team_id}/link", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Link a team to a group

Link a team to a group ##### Permissions Must have `manage_team` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)
- team_id::String (required)

Return: GroupSyncableTeam, OpenAPI.Clients.ApiResponse
"""
function link_group_syncable_for_team(_api::GroupsApi, group_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_link_group_syncable_for_team(_api, group_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function link_group_syncable_for_team(_api::GroupsApi, response_stream::Channel, group_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_link_group_syncable_for_team(_api, group_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_group_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Group,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_patch_group(_api::GroupsApi, group_id::String, patch_group_request::PatchGroupRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_patch_group_GroupsApi, "/groups/{group_id}/patch", ["bearerAuth", ], patch_group_request)
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Patch a group

Partially update a group by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)
- patch_group_request::PatchGroupRequest (required)

Return: Group, OpenAPI.Clients.ApiResponse
"""
function patch_group(_api::GroupsApi, group_id::String, patch_group_request::PatchGroupRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_group(_api, group_id, patch_group_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_group(_api::GroupsApi, response_stream::Channel, group_id::String, patch_group_request::PatchGroupRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_group(_api, group_id, patch_group_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_group_syncable_for_channel_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GroupSyncableChannel,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_patch_group_syncable_for_channel(_api::GroupsApi, group_id::String, channel_id::String, patch_group_syncable_for_team_request::PatchGroupSyncableForTeamRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_patch_group_syncable_for_channel_GroupsApi, "/groups/{group_id}/channels/{channel_id}/patch", ["bearerAuth", ], patch_group_syncable_for_team_request)
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Patch a GroupSyncable associated to Channel

Partially update a GroupSyncable by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)
- channel_id::String (required)
- patch_group_syncable_for_team_request::PatchGroupSyncableForTeamRequest (required)

Return: GroupSyncableChannel, OpenAPI.Clients.ApiResponse
"""
function patch_group_syncable_for_channel(_api::GroupsApi, group_id::String, channel_id::String, patch_group_syncable_for_team_request::PatchGroupSyncableForTeamRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_group_syncable_for_channel(_api, group_id, channel_id, patch_group_syncable_for_team_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_group_syncable_for_channel(_api::GroupsApi, response_stream::Channel, group_id::String, channel_id::String, patch_group_syncable_for_team_request::PatchGroupSyncableForTeamRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_group_syncable_for_channel(_api, group_id, channel_id, patch_group_syncable_for_team_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_group_syncable_for_team_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GroupSyncableTeam,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_patch_group_syncable_for_team(_api::GroupsApi, group_id::String, team_id::String, patch_group_syncable_for_team_request::PatchGroupSyncableForTeamRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_patch_group_syncable_for_team_GroupsApi, "/groups/{group_id}/teams/{team_id}/patch", ["bearerAuth", ], patch_group_syncable_for_team_request)
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Patch a GroupSyncable associated to Team

Partially update a GroupSyncable by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)
- team_id::String (required)
- patch_group_syncable_for_team_request::PatchGroupSyncableForTeamRequest (required)

Return: GroupSyncableTeam, OpenAPI.Clients.ApiResponse
"""
function patch_group_syncable_for_team(_api::GroupsApi, group_id::String, team_id::String, patch_group_syncable_for_team_request::PatchGroupSyncableForTeamRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_group_syncable_for_team(_api, group_id, team_id, patch_group_syncable_for_team_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_group_syncable_for_team(_api::GroupsApi, response_stream::Channel, group_id::String, team_id::String, patch_group_syncable_for_team_request::PatchGroupSyncableForTeamRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_group_syncable_for_team(_api, group_id, team_id, patch_group_syncable_for_team_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unlink_group_syncable_for_channel_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_unlink_group_syncable_for_channel(_api::GroupsApi, group_id::String, channel_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_unlink_group_syncable_for_channel_GroupsApi, "/groups/{group_id}/channels/{channel_id}/link", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a link from a channel to a group

Delete a link from a channel to a group ##### Permissions If the channel is private, you must have `manage_private_channel_members` permission. Otherwise, you must have the `manage_public_channel_members` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)
- channel_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function unlink_group_syncable_for_channel(_api::GroupsApi, group_id::String, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_unlink_group_syncable_for_channel(_api, group_id, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unlink_group_syncable_for_channel(_api::GroupsApi, response_stream::Channel, group_id::String, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_unlink_group_syncable_for_channel(_api, group_id, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unlink_group_syncable_for_team_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_unlink_group_syncable_for_team(_api::GroupsApi, group_id::String, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_unlink_group_syncable_for_team_GroupsApi, "/groups/{group_id}/teams/{team_id}/link", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "group_id", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a link from a team to a group

Delete a link from a team to a group ##### Permissions Must have `manage_team` permission.  __Minimum server version__: 5.11 

Params:
- group_id::String (required)
- team_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function unlink_group_syncable_for_team(_api::GroupsApi, group_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_unlink_group_syncable_for_team(_api, group_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unlink_group_syncable_for_team(_api::GroupsApi, response_stream::Channel, group_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_unlink_group_syncable_for_team(_api, group_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_unlink_ldap_group_GroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_unlink_ldap_group(_api::GroupsApi, remote_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_unlink_ldap_group_GroupsApi, "/ldap/groups/{remote_id}/link", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "remote_id", remote_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a link for LDAP group

##### Permissions Must have `manage_system` permission. __Minimum server version__: 5.11 

Params:
- remote_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function unlink_ldap_group(_api::GroupsApi, remote_id::String; _mediaType=nothing)
    _ctx = _oacinternal_unlink_ldap_group(_api, remote_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function unlink_ldap_group(_api::GroupsApi, response_stream::Channel, remote_id::String; _mediaType=nothing)
    _ctx = _oacinternal_unlink_ldap_group(_api, remote_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export add_group_members
export create_group
export delete_group
export delete_group_members
export get_group
export get_group_stats
export get_group_syncable_for_channel_id
export get_group_syncable_for_team_id
export get_group_syncables_channels
export get_group_syncables_teams
export get_group_users
export get_groups
export get_groups_associated_to_channels_by_team
export get_groups_by_channel
export get_groups_by_team
export get_groups_by_user_id
export link_group_syncable_for_channel
export link_group_syncable_for_team
export patch_group
export patch_group_syncable_for_channel
export patch_group_syncable_for_team
export unlink_group_syncable_for_channel
export unlink_group_syncable_for_team
export unlink_ldap_group
