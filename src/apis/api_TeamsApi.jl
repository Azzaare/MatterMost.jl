# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct TeamsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `TeamsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ TeamsApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_add_team_member_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => TeamMember,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_add_team_member(_api::TeamsApi, team_id::String, add_team_member_request::AddTeamMemberRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_add_team_member_TeamsApi, "/teams/{team_id}/members", ["bearerAuth", ], add_team_member_request)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add user to team

Add user to the team by user_id. ##### Permissions Must be authenticated and team be open to add self. For adding another user, authenticated user must have the `add_user_to_team` permission. 

Params:
- team_id::String (required)
- add_team_member_request::AddTeamMemberRequest (required)

Return: TeamMember, OpenAPI.Clients.ApiResponse
"""
function add_team_member(_api::TeamsApi, team_id::String, add_team_member_request::AddTeamMemberRequest; _mediaType=nothing)
    _ctx = _oacinternal_add_team_member(_api, team_id, add_team_member_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function add_team_member(_api::TeamsApi, response_stream::Channel, team_id::String, add_team_member_request::AddTeamMemberRequest; _mediaType=nothing)
    _ctx = _oacinternal_add_team_member(_api, team_id, add_team_member_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_add_team_member_from_invite_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => TeamMember,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_add_team_member_from_invite(_api::TeamsApi, token::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_add_team_member_from_invite_TeamsApi, "/teams/members/invite", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "token", token)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Add user to team from invite

Using either an invite id or hash/data pair from an email invite link, add a user to a team. ##### Permissions Must be authenticated. 

Params:
- token::String (required)

Return: TeamMember, OpenAPI.Clients.ApiResponse
"""
function add_team_member_from_invite(_api::TeamsApi, token::String; _mediaType=nothing)
    _ctx = _oacinternal_add_team_member_from_invite(_api, token; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function add_team_member_from_invite(_api::TeamsApi, response_stream::Channel, token::String; _mediaType=nothing)
    _ctx = _oacinternal_add_team_member_from_invite(_api, token; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_add_team_members_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Vector{TeamMember},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_add_team_members(_api::TeamsApi, team_id::String, team_member::Vector{TeamMember}; graceful=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_add_team_members_TeamsApi, "/teams/{team_id}/members/batch", ["bearerAuth", ], team_member)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "graceful", graceful)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add multiple users to team

Add a number of users to the team by user_id. ##### Permissions Must be authenticated. Authenticated user must have the `add_user_to_team` permission. 

Params:
- team_id::String (required)
- team_member::Vector{TeamMember} (required)
- graceful::Bool

Return: Vector{TeamMember}, OpenAPI.Clients.ApiResponse
"""
function add_team_members(_api::TeamsApi, team_id::String, team_member::Vector{TeamMember}; graceful=nothing, _mediaType=nothing)
    _ctx = _oacinternal_add_team_members(_api, team_id, team_member; graceful=graceful, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function add_team_members(_api::TeamsApi, response_stream::Channel, team_id::String, team_member::Vector{TeamMember}; graceful=nothing, _mediaType=nothing)
    _ctx = _oacinternal_add_team_members(_api, team_id, team_member; graceful=graceful, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_team_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Team,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_team(_api::TeamsApi, create_team_request::CreateTeamRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_team_TeamsApi, "/teams", ["bearerAuth", ], create_team_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a team

Create a new team on the system. ##### Permissions Must be authenticated and have the `create_team` permission. 

Params:
- create_team_request::CreateTeamRequest (required)

Return: Team, OpenAPI.Clients.ApiResponse
"""
function create_team(_api::TeamsApi, create_team_request::CreateTeamRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_team(_api, create_team_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_team(_api::TeamsApi, response_stream::Channel, create_team_request::CreateTeamRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_team(_api, create_team_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_all_teams_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Team},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_all_teams(_api::TeamsApi; page=nothing, per_page=nothing, include_total_count=nothing, exclude_policy_constrained=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_all_teams_TeamsApi, "/teams", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "include_total_count", include_total_count)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "exclude_policy_constrained", exclude_policy_constrained)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get teams

For regular users only returns open teams. Users with the \"manage_system\" permission will return teams regardless of type. The result is based on query string parameters - page and per_page. ##### Permissions Must be authenticated. \"manage_system\" permission is required to show all teams. 

Params:
- page::Int64
- per_page::Int64
- include_total_count::Bool
- exclude_policy_constrained::Bool

Return: Vector{Team}, OpenAPI.Clients.ApiResponse
"""
function get_all_teams(_api::TeamsApi; page=nothing, per_page=nothing, include_total_count=nothing, exclude_policy_constrained=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_all_teams(_api; page=page, per_page=per_page, include_total_count=include_total_count, exclude_policy_constrained=exclude_policy_constrained, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_all_teams(_api::TeamsApi, response_stream::Channel; page=nothing, per_page=nothing, include_total_count=nothing, exclude_policy_constrained=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_all_teams(_api; page=page, per_page=per_page, include_total_count=include_total_count, exclude_policy_constrained=exclude_policy_constrained, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_team_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Team,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_team(_api::TeamsApi, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_team_TeamsApi, "/teams/{team_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a team

Get a team on the system. ##### Permissions Must be authenticated and have the `view_team` permission. 

Params:
- team_id::String (required)

Return: Team, OpenAPI.Clients.ApiResponse
"""
function get_team(_api::TeamsApi, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_team(_api::TeamsApi, response_stream::Channel, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_team_by_name_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Team,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_team_by_name(_api::TeamsApi, name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_team_by_name_TeamsApi, "/teams/name/{name}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a team by name

Get a team based on provided name string ##### Permissions Must be authenticated, team type is open and have the `view_team` permission. 

Params:
- name::String (required)

Return: Team, OpenAPI.Clients.ApiResponse
"""
function get_team_by_name(_api::TeamsApi, name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_by_name(_api, name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_team_by_name(_api::TeamsApi, response_stream::Channel, name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_by_name(_api, name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_team_icon_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_team_icon(_api::TeamsApi, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_team_icon_TeamsApi, "/teams/{team_id}/image", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the team icon

Get the team icon of the team.  __Minimum server version__: 4.9  ##### Permissions User must be authenticated. In addition, team must be open or the user must have the `view_team` permission. 

Params:
- team_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_team_icon(_api::TeamsApi, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_icon(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_team_icon(_api::TeamsApi, response_stream::Channel, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_icon(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_team_invite_info_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetTeamInviteInfo200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_team_invite_info(_api::TeamsApi, invite_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_team_invite_info_TeamsApi, "/teams/invite/{invite_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "invite_id", invite_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get invite info for a team

Get the `name`, `display_name`, `description` and `id` for a team from the invite id.  __Minimum server version__: 4.0  ##### Permissions No authentication required. 

Params:
- invite_id::String (required)

Return: GetTeamInviteInfo200Response, OpenAPI.Clients.ApiResponse
"""
function get_team_invite_info(_api::TeamsApi, invite_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_invite_info(_api, invite_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_team_invite_info(_api::TeamsApi, response_stream::Channel, invite_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_invite_info(_api, invite_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_team_member_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TeamMember,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_team_member(_api::TeamsApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_team_member_TeamsApi, "/teams/{team_id}/members/{user_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a team member

Get a team member on the system. ##### Permissions Must be authenticated and have the `view_team` permission. 

Params:
- team_id::String (required)
- user_id::String (required)

Return: TeamMember, OpenAPI.Clients.ApiResponse
"""
function get_team_member(_api::TeamsApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_member(_api, team_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_team_member(_api::TeamsApi, response_stream::Channel, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_member(_api, team_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_team_members_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{TeamMember},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_team_members(_api::TeamsApi, team_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_team_members_TeamsApi, "/teams/{team_id}/members", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get team members

Get a page team members list based on query string parameters - team id, page and per page. ##### Permissions Must be authenticated and have the `view_team` permission. 

Params:
- team_id::String (required)
- page::Int64
- per_page::Int64

Return: Vector{TeamMember}, OpenAPI.Clients.ApiResponse
"""
function get_team_members(_api::TeamsApi, team_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_team_members(_api, team_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_team_members(_api::TeamsApi, response_stream::Channel, team_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_team_members(_api, team_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_team_members_by_ids_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{TeamMember},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_team_members_by_ids(_api::TeamsApi, team_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_team_members_by_ids_TeamsApi, "/teams/{team_id}/members/ids", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Get team members by ids

Get a list of team members based on a provided array of user ids. ##### Permissions Must have `view_team` permission for the team. 

Params:
- team_id::String (required)
- request_body::Vector{String} (required)

Return: Vector{TeamMember}, OpenAPI.Clients.ApiResponse
"""
function get_team_members_by_ids(_api::TeamsApi, team_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_get_team_members_by_ids(_api, team_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_team_members_by_ids(_api::TeamsApi, response_stream::Channel, team_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_get_team_members_by_ids(_api, team_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_team_members_for_user_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{TeamMember},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_team_members_for_user(_api::TeamsApi, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_team_members_for_user_TeamsApi, "/users/{user_id}/teams/members", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get team members for a user

Get a list of team members for a user. Useful for getting the ids of teams the user is on and the roles they have in those teams. ##### Permissions Must be logged in as the user or have the `edit_other_users` permission. 

Params:
- user_id::String (required)

Return: Vector{TeamMember}, OpenAPI.Clients.ApiResponse
"""
function get_team_members_for_user(_api::TeamsApi, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_members_for_user(_api, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_team_members_for_user(_api::TeamsApi, response_stream::Channel, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_members_for_user(_api, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_team_stats_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TeamStats,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_team_stats(_api::TeamsApi, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_team_stats_TeamsApi, "/teams/{team_id}/stats", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a team stats

Get a team stats on the system. ##### Permissions Must be authenticated and have the `view_team` permission. 

Params:
- team_id::String (required)

Return: TeamStats, OpenAPI.Clients.ApiResponse
"""
function get_team_stats(_api::TeamsApi, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_stats(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_team_stats(_api::TeamsApi, response_stream::Channel, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_stats(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_team_unread_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TeamUnread,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_team_unread(_api::TeamsApi, user_id::String, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_team_unread_TeamsApi, "/users/{user_id}/teams/{team_id}/unread", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get unreads for a team

Get the unread mention and message counts for a team for the specified user. ##### Permissions Must be the user or have `edit_other_users` permission and have `view_team` permission for the team. 

Params:
- user_id::String (required)
- team_id::String (required)

Return: TeamUnread, OpenAPI.Clients.ApiResponse
"""
function get_team_unread(_api::TeamsApi, user_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_unread(_api, user_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_team_unread(_api::TeamsApi, response_stream::Channel, user_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_team_unread(_api, user_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_teams_for_user_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Team},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_teams_for_user(_api::TeamsApi, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_teams_for_user_TeamsApi, "/users/{user_id}/teams", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a user's teams

Get a list of teams that a user is on. ##### Permissions Must be authenticated as the user or have the `manage_system` permission. 

Params:
- user_id::String (required)

Return: Vector{Team}, OpenAPI.Clients.ApiResponse
"""
function get_teams_for_user(_api::TeamsApi, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_teams_for_user(_api, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_teams_for_user(_api::TeamsApi, response_stream::Channel, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_teams_for_user(_api, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_teams_unread_for_user_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{TeamUnread},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_teams_unread_for_user(_api::TeamsApi, user_id::String, exclude_team::String; include_collapsed_threads=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_teams_unread_for_user_TeamsApi, "/users/{user_id}/teams/unread", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "exclude_team", exclude_team)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_collapsed_threads", include_collapsed_threads)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get team unreads for a user

Get the count for unread messages and mentions in the teams the user is a member of. ##### Permissions Must be logged in. 

Params:
- user_id::String (required)
- exclude_team::String (required)
- include_collapsed_threads::Bool

Return: Vector{TeamUnread}, OpenAPI.Clients.ApiResponse
"""
function get_teams_unread_for_user(_api::TeamsApi, user_id::String, exclude_team::String; include_collapsed_threads=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_teams_unread_for_user(_api, user_id, exclude_team; include_collapsed_threads=include_collapsed_threads, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_teams_unread_for_user(_api::TeamsApi, response_stream::Channel, user_id::String, exclude_team::String; include_collapsed_threads=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_teams_unread_for_user(_api, user_id, exclude_team; include_collapsed_threads=include_collapsed_threads, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_import_team_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ImportTeam200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_import_team(_api::TeamsApi, team_id::String, file::String, filesize::Int64, import_from::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_import_team_TeamsApi, "/teams/{team_id}/import", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.file, "file", file)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "filesize", filesize)  # type Int64
    OpenAPI.Clients.set_param(_ctx.form, "importFrom", import_from)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Import a Team from other application

Import a team into a existing team. Import users, channels, posts, hooks. ##### Permissions Must have `permission_import_team` permission. 

Params:
- team_id::String (required)
- file::String (required)
- filesize::Int64 (required)
- import_from::String (required)

Return: ImportTeam200Response, OpenAPI.Clients.ApiResponse
"""
function import_team(_api::TeamsApi, team_id::String, file::String, filesize::Int64, import_from::String; _mediaType=nothing)
    _ctx = _oacinternal_import_team(_api, team_id, file, filesize, import_from; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function import_team(_api::TeamsApi, response_stream::Channel, team_id::String, file::String, filesize::Int64, import_from::String; _mediaType=nothing)
    _ctx = _oacinternal_import_team(_api, team_id, file, filesize, import_from; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_invalidate_email_invites_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_invalidate_email_invites(_api::TeamsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_invalidate_email_invites_TeamsApi, "/teams/invites/email", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Invalidate active email invitations

Invalidate active email invitations that have not been accepted by the user. ##### Permissions Must have `sysconsole_write_authentication` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function invalidate_email_invites(_api::TeamsApi; _mediaType=nothing)
    _ctx = _oacinternal_invalidate_email_invites(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function invalidate_email_invites(_api::TeamsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_invalidate_email_invites(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_invite_guests_to_team_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("413", "x"=>".") * "\$") => AppError,
)

function _oacinternal_invite_guests_to_team(_api::TeamsApi, team_id::String, invite_guests_to_team_request::InviteGuestsToTeamRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_invite_guests_to_team_TeamsApi, "/teams/{team_id}/invite-guests/email", ["bearerAuth", ], invite_guests_to_team_request)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Invite guests to the team by email

Invite guests to existing team channels usign the user's email.  The number of emails that can be sent is rate limited to 20 per hour with a burst of 20 emails. If the rate limit exceeds, the error message contains details on when to retry and when the timer will be reset.  __Minimum server version__: 5.16  ##### Permissions Must have `invite_guest` permission for the team. 

Params:
- team_id::String (required)
- invite_guests_to_team_request::InviteGuestsToTeamRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function invite_guests_to_team(_api::TeamsApi, team_id::String, invite_guests_to_team_request::InviteGuestsToTeamRequest; _mediaType=nothing)
    _ctx = _oacinternal_invite_guests_to_team(_api, team_id, invite_guests_to_team_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function invite_guests_to_team(_api::TeamsApi, response_stream::Channel, team_id::String, invite_guests_to_team_request::InviteGuestsToTeamRequest; _mediaType=nothing)
    _ctx = _oacinternal_invite_guests_to_team(_api, team_id, invite_guests_to_team_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_invite_users_to_team_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("413", "x"=>".") * "\$") => AppError,
)

function _oacinternal_invite_users_to_team(_api::TeamsApi, team_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_invite_users_to_team_TeamsApi, "/teams/{team_id}/invite/email", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Invite users to the team by email

Invite users to the existing team using the user's email.  The number of emails that can be sent is rate limited to 20 per hour with a burst of 20 emails. If the rate limit exceeds, the error message contains details on when to retry and when the timer will be reset. ##### Permissions Must have `invite_user` and `add_user_to_team` permissions for the team. 

Params:
- team_id::String (required)
- request_body::Vector{String} (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function invite_users_to_team(_api::TeamsApi, team_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_invite_users_to_team(_api, team_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function invite_users_to_team(_api::TeamsApi, response_stream::Channel, team_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_invite_users_to_team(_api, team_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_team_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Team,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_patch_team(_api::TeamsApi, team_id::String, patch_team_request::PatchTeamRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_patch_team_TeamsApi, "/teams/{team_id}/patch", ["bearerAuth", ], patch_team_request)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Patch a team

Partially update a team by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the `manage_team` permission. 

Params:
- team_id::String (required)
- patch_team_request::PatchTeamRequest (required)

Return: Team, OpenAPI.Clients.ApiResponse
"""
function patch_team(_api::TeamsApi, team_id::String, patch_team_request::PatchTeamRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_team(_api, team_id, patch_team_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_team(_api::TeamsApi, response_stream::Channel, team_id::String, patch_team_request::PatchTeamRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_team(_api, team_id, patch_team_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_regenerate_team_invite_id_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Team,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_regenerate_team_invite_id(_api::TeamsApi, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_regenerate_team_invite_id_TeamsApi, "/teams/{team_id}/regenerate_invite_id", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Regenerate the Invite ID from a Team

Regenerates the invite ID used in invite links of a team ##### Permissions Must be authenticated and have the `manage_team` permission. 

Params:
- team_id::String (required)

Return: Team, OpenAPI.Clients.ApiResponse
"""
function regenerate_team_invite_id(_api::TeamsApi, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_regenerate_team_invite_id(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function regenerate_team_invite_id(_api::TeamsApi, response_stream::Channel, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_regenerate_team_invite_id(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_remove_team_icon_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_remove_team_icon(_api::TeamsApi, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_remove_team_icon_TeamsApi, "/teams/{team_id}/image", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Remove the team icon

Remove the team icon for the team.  __Minimum server version__: 4.10  ##### Permissions Must be authenticated and have the `manage_team` permission. 

Params:
- team_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function remove_team_icon(_api::TeamsApi, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_remove_team_icon(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function remove_team_icon(_api::TeamsApi, response_stream::Channel, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_remove_team_icon(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_remove_team_member_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_remove_team_member(_api::TeamsApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_remove_team_member_TeamsApi, "/teams/{team_id}/members/{user_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Remove user from team

Delete the team member object for a user, effectively removing them from a team. ##### Permissions Must be logged in as the user or have the `remove_user_from_team` permission. 

Params:
- team_id::String (required)
- user_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function remove_team_member(_api::TeamsApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_remove_team_member(_api, team_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function remove_team_member(_api::TeamsApi, response_stream::Channel, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_remove_team_member(_api, team_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_restore_team_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Team,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_restore_team(_api::TeamsApi, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_restore_team_TeamsApi, "/teams/{team_id}/restore", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Restore a team

Restore a team that was previously soft deleted.  __Minimum server version__: 5.24  ##### Permissions Must have the `manage_team` permission. 

Params:
- team_id::String (required)

Return: Team, OpenAPI.Clients.ApiResponse
"""
function restore_team(_api::TeamsApi, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_restore_team(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function restore_team(_api::TeamsApi, response_stream::Channel, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_restore_team(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_files_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FileInfoList,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_search_files(_api::TeamsApi, team_id::String, terms::String, is_or_search::Bool; time_zone_offset=nothing, include_deleted_channels=nothing, page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_files_TeamsApi, "/teams/{team_id}/files/search", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "terms", terms)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "is_or_search", is_or_search)  # type Bool
    OpenAPI.Clients.set_param(_ctx.form, "time_zone_offset", time_zone_offset)  # type Int64
    OpenAPI.Clients.set_param(_ctx.form, "include_deleted_channels", include_deleted_channels)  # type Bool
    OpenAPI.Clients.set_param(_ctx.form, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.form, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search files in a team

Search for files in a team based on file name, extention and file content (if file content extraction is enabled and supported for the files). __Minimum server version__: 5.34 ##### Permissions Must be authenticated and have the `view_team` permission. 

Params:
- team_id::String (required)
- terms::String (required)
- is_or_search::Bool (required)
- time_zone_offset::Int64
- include_deleted_channels::Bool
- page::Int64
- per_page::Int64

Return: FileInfoList, OpenAPI.Clients.ApiResponse
"""
function search_files(_api::TeamsApi, team_id::String, terms::String, is_or_search::Bool; time_zone_offset=nothing, include_deleted_channels=nothing, page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_files(_api, team_id, terms, is_or_search; time_zone_offset=time_zone_offset, include_deleted_channels=include_deleted_channels, page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_files(_api::TeamsApi, response_stream::Channel, team_id::String, terms::String, is_or_search::Bool; time_zone_offset=nothing, include_deleted_channels=nothing, page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_files(_api, team_id, terms, is_or_search; time_zone_offset=time_zone_offset, include_deleted_channels=include_deleted_channels, page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_teams_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SearchTeams200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_search_teams(_api::TeamsApi, search_teams_request::SearchTeamsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_teams_TeamsApi, "/teams/search", ["bearerAuth", ], search_teams_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search teams

Search teams based on search term and options provided in the request body.  ##### Permissions Logged in user only shows open teams Logged in user with \"manage_system\" permission shows all teams 

Params:
- search_teams_request::SearchTeamsRequest (required)

Return: SearchTeams200Response, OpenAPI.Clients.ApiResponse
"""
function search_teams(_api::TeamsApi, search_teams_request::SearchTeamsRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_teams(_api, search_teams_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_teams(_api::TeamsApi, response_stream::Channel, search_teams_request::SearchTeamsRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_teams(_api, search_teams_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_set_team_icon_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_set_team_icon(_api::TeamsApi, team_id::String, image::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_set_team_icon_TeamsApi, "/teams/{team_id}/image", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.file, "image", image)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Sets the team icon

Sets the team icon for the team.  __Minimum server version__: 4.9  ##### Permissions Must be authenticated and have the `manage_team` permission. 

Params:
- team_id::String (required)
- image::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function set_team_icon(_api::TeamsApi, team_id::String, image::String; _mediaType=nothing)
    _ctx = _oacinternal_set_team_icon(_api, team_id, image; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function set_team_icon(_api::TeamsApi, response_stream::Channel, team_id::String, image::String; _mediaType=nothing)
    _ctx = _oacinternal_set_team_icon(_api, team_id, image; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_soft_delete_team_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_soft_delete_team(_api::TeamsApi, team_id::String; permanent=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_soft_delete_team_TeamsApi, "/teams/{team_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "permanent", permanent)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a team

Soft deletes a team, by marking the team as deleted in the database. Soft deleted teams will not be accessible in the user interface.  Optionally use the permanent query parameter to hard delete the team for compliance reasons. As of server version 5.0, to use this feature `ServiceSettings.EnableAPITeamDeletion` must be set to `true` in the server's configuration. ##### Permissions Must have the `manage_team` permission. 

Params:
- team_id::String (required)
- permanent::Bool

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function soft_delete_team(_api::TeamsApi, team_id::String; permanent=nothing, _mediaType=nothing)
    _ctx = _oacinternal_soft_delete_team(_api, team_id; permanent=permanent, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function soft_delete_team(_api::TeamsApi, response_stream::Channel, team_id::String; permanent=nothing, _mediaType=nothing)
    _ctx = _oacinternal_soft_delete_team(_api, team_id; permanent=permanent, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_team_exists_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TeamExists,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_team_exists(_api::TeamsApi, name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_team_exists_TeamsApi, "/teams/name/{name}/exists", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Check if team exists

Check if the team exists based on a team name. ##### Permissions Must be authenticated. 

Params:
- name::String (required)

Return: TeamExists, OpenAPI.Clients.ApiResponse
"""
function team_exists(_api::TeamsApi, name::String; _mediaType=nothing)
    _ctx = _oacinternal_team_exists(_api, name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function team_exists(_api::TeamsApi, response_stream::Channel, name::String; _mediaType=nothing)
    _ctx = _oacinternal_team_exists(_api, name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_team_members_minus_group_members_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_team_members_minus_group_members(_api::TeamsApi, team_id::String, group_ids::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_team_members_minus_group_members_TeamsApi, "/teams/{team_id}/members_minus_group_members", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "group_ids", group_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Team members minus group members.

Get the set of users who are members of the team minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields `scheme_guest`, `scheme_user`, and `scheme_admin` representing the roles that user has for the given team.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.14 

Params:
- team_id::String (required)
- group_ids::String (required)
- page::Int64
- per_page::Int64

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function team_members_minus_group_members(_api::TeamsApi, team_id::String, group_ids::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_team_members_minus_group_members(_api, team_id, group_ids; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function team_members_minus_group_members(_api::TeamsApi, response_stream::Channel, team_id::String, group_ids::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_team_members_minus_group_members(_api, team_id, group_ids; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_team_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Team,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_team(_api::TeamsApi, team_id::String, update_team_request::UpdateTeamRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_team_TeamsApi, "/teams/{team_id}", ["bearerAuth", ], update_team_request)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a team

Update a team by providing the team object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the `manage_team` permission. 

Params:
- team_id::String (required)
- update_team_request::UpdateTeamRequest (required)

Return: Team, OpenAPI.Clients.ApiResponse
"""
function update_team(_api::TeamsApi, team_id::String, update_team_request::UpdateTeamRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_team(_api, team_id, update_team_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_team(_api::TeamsApi, response_stream::Channel, team_id::String, update_team_request::UpdateTeamRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_team(_api, team_id, update_team_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_team_member_roles_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_team_member_roles(_api::TeamsApi, team_id::String, user_id::String, update_user_roles_request::UpdateUserRolesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_team_member_roles_TeamsApi, "/teams/{team_id}/members/{user_id}/roles", ["bearerAuth", ], update_user_roles_request)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a team member roles

Update a team member roles. Valid team roles are \"team_user\", \"team_admin\" or both of them. Overwrites any previously assigned team roles. ##### Permissions Must be authenticated and have the `manage_team_roles` permission. 

Params:
- team_id::String (required)
- user_id::String (required)
- update_user_roles_request::UpdateUserRolesRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function update_team_member_roles(_api::TeamsApi, team_id::String, user_id::String, update_user_roles_request::UpdateUserRolesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_team_member_roles(_api, team_id, user_id, update_user_roles_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_team_member_roles(_api::TeamsApi, response_stream::Channel, team_id::String, user_id::String, update_user_roles_request::UpdateUserRolesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_team_member_roles(_api, team_id, user_id, update_user_roles_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_team_member_scheme_roles_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_team_member_scheme_roles(_api::TeamsApi, team_id::String, user_id::String, update_team_member_scheme_roles_request::UpdateTeamMemberSchemeRolesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_team_member_scheme_roles_TeamsApi, "/teams/{team_id}/members/{user_id}/schemeRoles", ["bearerAuth", ], update_team_member_scheme_roles_request)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update the scheme-derived roles of a team member.

Update a team member's scheme_admin/scheme_user properties. Typically this should either be `scheme_admin=false, scheme_user=true` for ordinary team member, or `scheme_admin=true, scheme_user=true` for a team admin.  __Minimum server version__: 5.0  ##### Permissions Must be authenticated and have the `manage_team_roles` permission. 

Params:
- team_id::String (required)
- user_id::String (required)
- update_team_member_scheme_roles_request::UpdateTeamMemberSchemeRolesRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function update_team_member_scheme_roles(_api::TeamsApi, team_id::String, user_id::String, update_team_member_scheme_roles_request::UpdateTeamMemberSchemeRolesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_team_member_scheme_roles(_api, team_id, user_id, update_team_member_scheme_roles_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_team_member_scheme_roles(_api::TeamsApi, response_stream::Channel, team_id::String, user_id::String, update_team_member_scheme_roles_request::UpdateTeamMemberSchemeRolesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_team_member_scheme_roles(_api, team_id, user_id, update_team_member_scheme_roles_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_team_privacy_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Team,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_team_privacy(_api::TeamsApi, team_id::String, update_team_privacy_request::UpdateTeamPrivacyRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_team_privacy_TeamsApi, "/teams/{team_id}/privacy", ["bearerAuth", ], update_team_privacy_request)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update teams's privacy

Updates team's privacy allowing changing a team from Public (open) to Private (invitation only) and back.  __Minimum server version__: 5.24  ##### Permissions `manage_team` permission for the team of the team. 

Params:
- team_id::String (required)
- update_team_privacy_request::UpdateTeamPrivacyRequest (required)

Return: Team, OpenAPI.Clients.ApiResponse
"""
function update_team_privacy(_api::TeamsApi, team_id::String, update_team_privacy_request::UpdateTeamPrivacyRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_team_privacy(_api, team_id, update_team_privacy_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_team_privacy(_api::TeamsApi, response_stream::Channel, team_id::String, update_team_privacy_request::UpdateTeamPrivacyRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_team_privacy(_api, team_id, update_team_privacy_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_team_scheme_TeamsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_team_scheme(_api::TeamsApi, team_id::String, update_team_scheme_request::UpdateTeamSchemeRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_team_scheme_TeamsApi, "/teams/{team_id}/scheme", ["bearerAuth", ], update_team_scheme_request)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Set a team's scheme

Set a team's scheme, more specifically sets the scheme_id value of a team record.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.0 

Params:
- team_id::String (required)
- update_team_scheme_request::UpdateTeamSchemeRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function update_team_scheme(_api::TeamsApi, team_id::String, update_team_scheme_request::UpdateTeamSchemeRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_team_scheme(_api, team_id, update_team_scheme_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_team_scheme(_api::TeamsApi, response_stream::Channel, team_id::String, update_team_scheme_request::UpdateTeamSchemeRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_team_scheme(_api, team_id, update_team_scheme_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export add_team_member
export add_team_member_from_invite
export add_team_members
export create_team
export get_all_teams
export get_team
export get_team_by_name
export get_team_icon
export get_team_invite_info
export get_team_member
export get_team_members
export get_team_members_by_ids
export get_team_members_for_user
export get_team_stats
export get_team_unread
export get_teams_for_user
export get_teams_unread_for_user
export import_team
export invalidate_email_invites
export invite_guests_to_team
export invite_users_to_team
export patch_team
export regenerate_team_invite_id
export remove_team_icon
export remove_team_member
export restore_team
export search_files
export search_teams
export set_team_icon
export soft_delete_team
export team_exists
export team_members_minus_group_members
export update_team
export update_team_member_roles
export update_team_member_scheme_roles
export update_team_privacy
export update_team_scheme
