# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct FilesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `FilesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ FilesApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_get_file_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_file(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_file_FilesApi, "/files/{file_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "file_id", file_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a file

Gets a file that has been uploaded previously. ##### Permissions Must have `read_channel` permission or be uploader of the file. 

Params:
- file_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_file(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_file(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_file(_api::FilesApi, response_stream::Channel, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_file(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_file_info_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FileInfo,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_file_info(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_file_info_FilesApi, "/files/{file_id}/info", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "file_id", file_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get metadata for a file

Gets a file's info. ##### Permissions Must have `read_channel` permission or be uploader of the file. 

Params:
- file_id::String (required)

Return: FileInfo, OpenAPI.Clients.ApiResponse
"""
function get_file_info(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_file_info(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_file_info(_api::FilesApi, response_stream::Channel, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_file_info(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_file_link_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetFileLink200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_file_link(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_file_link_FilesApi, "/files/{file_id}/link", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "file_id", file_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a public file link

Gets a public link for a file that can be accessed without logging into Mattermost. ##### Permissions Must have `read_channel` permission or be uploader of the file. 

Params:
- file_id::String (required)

Return: GetFileLink200Response, OpenAPI.Clients.ApiResponse
"""
function get_file_link(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_file_link(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_file_link(_api::FilesApi, response_stream::Channel, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_file_link(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_file_preview_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_file_preview(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_file_preview_FilesApi, "/files/{file_id}/preview", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "file_id", file_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a file's preview

Gets a file's preview. ##### Permissions Must have `read_channel` permission or be uploader of the file. 

Params:
- file_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_file_preview(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_file_preview(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_file_preview(_api::FilesApi, response_stream::Channel, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_file_preview(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_file_public_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_file_public(_api::FilesApi, file_id::String, h::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_file_public_FilesApi, "/files/{file_id}/public", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "file_id", file_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "h", h)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a public file

##### Permissions No permissions required. 

Params:
- file_id::String (required)
- h::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_file_public(_api::FilesApi, file_id::String, h::String; _mediaType=nothing)
    _ctx = _oacinternal_get_file_public(_api, file_id, h; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_file_public(_api::FilesApi, response_stream::Channel, file_id::String, h::String; _mediaType=nothing)
    _ctx = _oacinternal_get_file_public(_api, file_id, h; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_file_thumbnail_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_file_thumbnail(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_file_thumbnail_FilesApi, "/files/{file_id}/thumbnail", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "file_id", file_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a file's thumbnail

Gets a file's thumbnail. ##### Permissions Must have `read_channel` permission or be uploader of the file. 

Params:
- file_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_file_thumbnail(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_file_thumbnail(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_file_thumbnail(_api::FilesApi, response_stream::Channel, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_file_thumbnail(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_files_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FileInfoList,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_search_files(_api::FilesApi, team_id::String, terms::String, is_or_search::Bool; time_zone_offset=nothing, include_deleted_channels=nothing, page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_files_FilesApi, "/teams/{team_id}/files/search", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "terms", terms)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "is_or_search", is_or_search)  # type Bool
    OpenAPI.Clients.set_param(_ctx.form, "time_zone_offset", time_zone_offset)  # type Int64
    OpenAPI.Clients.set_param(_ctx.form, "include_deleted_channels", include_deleted_channels)  # type Bool
    OpenAPI.Clients.set_param(_ctx.form, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.form, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search files in a team

Search for files in a team based on file name, extention and file content (if file content extraction is enabled and supported for the files). __Minimum server version__: 5.34 ##### Permissions Must be authenticated and have the `view_team` permission. 

Params:
- team_id::String (required)
- terms::String (required)
- is_or_search::Bool (required)
- time_zone_offset::Int64
- include_deleted_channels::Bool
- page::Int64
- per_page::Int64

Return: FileInfoList, OpenAPI.Clients.ApiResponse
"""
function search_files(_api::FilesApi, team_id::String, terms::String, is_or_search::Bool; time_zone_offset=nothing, include_deleted_channels=nothing, page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_files(_api, team_id, terms, is_or_search; time_zone_offset=time_zone_offset, include_deleted_channels=include_deleted_channels, page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_files(_api::FilesApi, response_stream::Channel, team_id::String, terms::String, is_or_search::Bool; time_zone_offset=nothing, include_deleted_channels=nothing, page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_files(_api, team_id, terms, is_or_search; time_zone_offset=time_zone_offset, include_deleted_channels=include_deleted_channels, page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_file_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => UploadFile201Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("413", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_upload_file(_api::FilesApi; channel_id=nothing, filename=nothing, files=nothing, channel_id2=nothing, client_ids=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upload_file_FilesApi, "/files", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "filename", filename)  # type String
    OpenAPI.Clients.set_param(_ctx.file, "files", files)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "channel_id", channel_id2)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "client_ids", client_ids)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload a file

Uploads a file that can later be attached to a post.  This request can either be a multipart/form-data request with a channel_id, files and optional client_ids defined in the FormData, or it can be a request with the channel_id and filename defined as query parameters with the contents of a single file in the body of the request.  Only multipart/form-data requests are supported by server versions up to and including 4.7. Server versions 4.8 and higher support both types of requests.  ##### Permissions Must have `upload_file` permission. 

Params:
- channel_id::String
- filename::String
- files::String
- channel_id2::String
- client_ids::String

Return: UploadFile201Response, OpenAPI.Clients.ApiResponse
"""
function upload_file(_api::FilesApi; channel_id=nothing, filename=nothing, files=nothing, channel_id2=nothing, client_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_upload_file(_api; channel_id=channel_id, filename=filename, files=files, channel_id2=channel_id2, client_ids=client_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_file(_api::FilesApi, response_stream::Channel; channel_id=nothing, filename=nothing, files=nothing, channel_id2=nothing, client_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_upload_file(_api; channel_id=channel_id, filename=filename, files=files, channel_id2=channel_id2, client_ids=client_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_file
export get_file_info
export get_file_link
export get_file_preview
export get_file_public
export get_file_thumbnail
export search_files
export upload_file
