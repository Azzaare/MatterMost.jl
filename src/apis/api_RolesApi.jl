# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct RolesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `RolesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ RolesApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_get_all_roles_RolesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Role},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_all_roles(_api::RolesApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_all_roles_RolesApi, "/roles", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of all the roles

##### Permissions  `manage_system` permission is required.  __Minimum server version__: 5.33 

Params:

Return: Vector{Role}, OpenAPI.Clients.ApiResponse
"""
function get_all_roles(_api::RolesApi; _mediaType=nothing)
    _ctx = _oacinternal_get_all_roles(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_all_roles(_api::RolesApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_all_roles(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_role_RolesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Role,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_role(_api::RolesApi, role_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_role_RolesApi, "/roles/{role_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "role_id", role_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a role

Get a role from the provided role id.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 

Params:
- role_id::String (required)

Return: Role, OpenAPI.Clients.ApiResponse
"""
function get_role(_api::RolesApi, role_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_role(_api, role_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_role(_api::RolesApi, response_stream::Channel, role_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_role(_api, role_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_role_by_name_RolesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Role,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_role_by_name(_api::RolesApi, role_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_role_by_name_RolesApi, "/roles/name/{role_name}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "role_name", role_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a role

Get a role from the provided role name.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 

Params:
- role_name::String (required)

Return: Role, OpenAPI.Clients.ApiResponse
"""
function get_role_by_name(_api::RolesApi, role_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_role_by_name(_api, role_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_role_by_name(_api::RolesApi, response_stream::Channel, role_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_role_by_name(_api, role_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_roles_by_names_RolesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Role},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_roles_by_names(_api::RolesApi, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_roles_by_names_RolesApi, "/roles/names", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of roles by name

Get a list of roles from their names.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 

Params:
- request_body::Vector{String} (required)

Return: Vector{Role}, OpenAPI.Clients.ApiResponse
"""
function get_roles_by_names(_api::RolesApi, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_get_roles_by_names(_api, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_roles_by_names(_api::RolesApi, response_stream::Channel, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_get_roles_by_names(_api, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_role_RolesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Role,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_patch_role(_api::RolesApi, role_id::String, patch_role_request::PatchRoleRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_patch_role_RolesApi, "/roles/{role_id}/patch", ["bearerAuth", ], patch_role_request)
    OpenAPI.Clients.set_param(_ctx.path, "role_id", role_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Patch a role

Partially update a role by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions `manage_system` permission is required.  __Minimum server version__: 4.9 

Params:
- role_id::String (required)
- patch_role_request::PatchRoleRequest (required)

Return: Role, OpenAPI.Clients.ApiResponse
"""
function patch_role(_api::RolesApi, role_id::String, patch_role_request::PatchRoleRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_role(_api, role_id, patch_role_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_role(_api::RolesApi, response_stream::Channel, role_id::String, patch_role_request::PatchRoleRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_role(_api, role_id, patch_role_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_all_roles
export get_role
export get_role_by_name
export get_roles_by_names
export patch_role
