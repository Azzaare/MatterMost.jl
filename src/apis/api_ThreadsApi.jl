# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ThreadsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ThreadsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ThreadsApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_get_thread_mention_counts_by_channel_ThreadsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_thread_mention_counts_by_channel(_api::ThreadsApi, user_id::String, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_thread_mention_counts_by_channel_ThreadsApi, "/users/{user_id}/teams/{team_id}/threads/mention_counts", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get all unread mention counts from followed threads, per-channel

Get all unread mention counts from followed threads  __Minimum server version__: 5.29  ##### Permissions Must be logged in as the user or have `edit_other_users` permission. 

Params:
- user_id::String (required)
- team_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_thread_mention_counts_by_channel(_api::ThreadsApi, user_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_thread_mention_counts_by_channel(_api, user_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_thread_mention_counts_by_channel(_api::ThreadsApi, response_stream::Channel, user_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_thread_mention_counts_by_channel(_api, user_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_thread_ThreadsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_user_thread(_api::ThreadsApi, user_id::String, team_id::String, thread_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_thread_ThreadsApi, "/users/{user_id}/teams/{team_id}/threads/{thread_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a thread followed by the user

Get a thread  __Minimum server version__: 5.29  ##### Permissions Must be logged in as the user or have `edit_other_users` permission. 

Params:
- user_id::String (required)
- team_id::String (required)
- thread_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_user_thread(_api::ThreadsApi, user_id::String, team_id::String, thread_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_user_thread(_api, user_id, team_id, thread_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_thread(_api::ThreadsApi, response_stream::Channel, user_id::String, team_id::String, thread_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_user_thread(_api, user_id, team_id, thread_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_threads_ThreadsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UserThreads,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_user_threads(_api::ThreadsApi, user_id::String, team_id::String; since=nothing, deleted=nothing, extended=nothing, page=nothing, page_size=nothing, totals_only=nothing, threads_only=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_threads_ThreadsApi, "/users/{user_id}/teams/{team_id}/threads", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "since", since)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "deleted", deleted)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "extended", extended)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "pageSize", page_size)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "totalsOnly", totals_only)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "threadsOnly", threads_only)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get all threads that user is following

Get all threads that user is following  __Minimum server version__: 5.29  ##### Permissions Must be logged in as the user or have `edit_other_users` permission. 

Params:
- user_id::String (required)
- team_id::String (required)
- since::Int64
- deleted::Bool
- extended::Bool
- page::Int64
- page_size::Int64
- totals_only::Bool
- threads_only::Bool

Return: UserThreads, OpenAPI.Clients.ApiResponse
"""
function get_user_threads(_api::ThreadsApi, user_id::String, team_id::String; since=nothing, deleted=nothing, extended=nothing, page=nothing, page_size=nothing, totals_only=nothing, threads_only=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_threads(_api, user_id, team_id; since=since, deleted=deleted, extended=extended, page=page, page_size=page_size, totals_only=totals_only, threads_only=threads_only, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_threads(_api::ThreadsApi, response_stream::Channel, user_id::String, team_id::String; since=nothing, deleted=nothing, extended=nothing, page=nothing, page_size=nothing, totals_only=nothing, threads_only=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_user_threads(_api, user_id, team_id; since=since, deleted=deleted, extended=extended, page=page, page_size=page_size, totals_only=totals_only, threads_only=threads_only, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_set_thread_unread_by_post_id_ThreadsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_set_thread_unread_by_post_id(_api::ThreadsApi, user_id::String, team_id::String, thread_id::String, post_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_set_thread_unread_by_post_id_ThreadsApi, "/users/{user_id}/teams/{team_id}/threads/{thread_id}/set_unread/{post_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "post_id", post_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Mark a thread that user is following as unread based on a post id

Mark a thread that user is following as unread  __Minimum server version__: 6.7  ##### Permissions Must have `read_channel` permission for the channel the thread is in or if the channel is public, have the `read_public_channels` permission for the team.  Must have `edit_other_users` permission if the user is not the one marking the thread for himself. 

Params:
- user_id::String (required)
- team_id::String (required)
- thread_id::String (required)
- post_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function set_thread_unread_by_post_id(_api::ThreadsApi, user_id::String, team_id::String, thread_id::String, post_id::String; _mediaType=nothing)
    _ctx = _oacinternal_set_thread_unread_by_post_id(_api, user_id, team_id, thread_id, post_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function set_thread_unread_by_post_id(_api::ThreadsApi, response_stream::Channel, user_id::String, team_id::String, thread_id::String, post_id::String; _mediaType=nothing)
    _ctx = _oacinternal_set_thread_unread_by_post_id(_api, user_id, team_id, thread_id, post_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_start_following_thread_ThreadsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_start_following_thread(_api::ThreadsApi, user_id::String, team_id::String, thread_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_start_following_thread_ThreadsApi, "/users/{user_id}/teams/{team_id}/threads/{thread_id}/following", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Start following a thread

Start following a thread  __Minimum server version__: 5.29  ##### Permissions Must be logged in as the user or have `edit_other_users` permission. 

Params:
- user_id::String (required)
- team_id::String (required)
- thread_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function start_following_thread(_api::ThreadsApi, user_id::String, team_id::String, thread_id::String; _mediaType=nothing)
    _ctx = _oacinternal_start_following_thread(_api, user_id, team_id, thread_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function start_following_thread(_api::ThreadsApi, response_stream::Channel, user_id::String, team_id::String, thread_id::String; _mediaType=nothing)
    _ctx = _oacinternal_start_following_thread(_api, user_id, team_id, thread_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_stop_following_thread_ThreadsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_stop_following_thread(_api::ThreadsApi, user_id::String, team_id::String, thread_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_stop_following_thread_ThreadsApi, "/users/{user_id}/teams/{team_id}/threads/{thread_id}/following", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Stop following a thread

Stop following a thread  __Minimum server version__: 5.29  ##### Permissions Must be logged in as the user or have `edit_other_users` permission. 

Params:
- user_id::String (required)
- team_id::String (required)
- thread_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function stop_following_thread(_api::ThreadsApi, user_id::String, team_id::String, thread_id::String; _mediaType=nothing)
    _ctx = _oacinternal_stop_following_thread(_api, user_id, team_id, thread_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function stop_following_thread(_api::ThreadsApi, response_stream::Channel, user_id::String, team_id::String, thread_id::String; _mediaType=nothing)
    _ctx = _oacinternal_stop_following_thread(_api, user_id, team_id, thread_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_thread_read_for_user_ThreadsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_thread_read_for_user(_api::ThreadsApi, user_id::String, team_id::String, thread_id::String, timestamp::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_thread_read_for_user_ThreadsApi, "/users/{user_id}/teams/{team_id}/threads/{thread_id}/read/{timestamp}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "timestamp", timestamp)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Mark a thread that user is following read state to the timestamp

Mark a thread that user is following as read  __Minimum server version__: 5.29  ##### Permissions Must be logged in as the user or have `edit_other_users` permission. 

Params:
- user_id::String (required)
- team_id::String (required)
- thread_id::String (required)
- timestamp::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function update_thread_read_for_user(_api::ThreadsApi, user_id::String, team_id::String, thread_id::String, timestamp::String; _mediaType=nothing)
    _ctx = _oacinternal_update_thread_read_for_user(_api, user_id, team_id, thread_id, timestamp; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_thread_read_for_user(_api::ThreadsApi, response_stream::Channel, user_id::String, team_id::String, thread_id::String, timestamp::String; _mediaType=nothing)
    _ctx = _oacinternal_update_thread_read_for_user(_api, user_id, team_id, thread_id, timestamp; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_threads_read_for_user_ThreadsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_threads_read_for_user(_api::ThreadsApi, user_id::String, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_threads_read_for_user_ThreadsApi, "/users/{user_id}/teams/{team_id}/threads/read", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Mark all threads that user is following as read

Mark all threads that user is following as read  __Minimum server version__: 5.29  ##### Permissions Must be logged in as the user or have `edit_other_users` permission. 

Params:
- user_id::String (required)
- team_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function update_threads_read_for_user(_api::ThreadsApi, user_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_update_threads_read_for_user(_api, user_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_threads_read_for_user(_api::ThreadsApi, response_stream::Channel, user_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_update_threads_read_for_user(_api, user_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_thread_mention_counts_by_channel
export get_user_thread
export get_user_threads
export set_thread_unread_by_post_id
export start_following_thread
export stop_following_thread
export update_thread_read_for_user
export update_threads_read_for_user
