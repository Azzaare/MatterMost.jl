# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct BotsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `BotsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ BotsApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_assign_bot_BotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Bot,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_assign_bot(_api::BotsApi, bot_user_id::String, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_assign_bot_BotsApi, "/bots/{bot_user_id}/assign/{user_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "bot_user_id", bot_user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Assign a bot to a user

Assign a bot to a specified user. ##### Permissions Must have `manage_bots` permission.  __Minimum server version__: 5.10 

Params:
- bot_user_id::String (required)
- user_id::String (required)

Return: Bot, OpenAPI.Clients.ApiResponse
"""
function assign_bot(_api::BotsApi, bot_user_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_assign_bot(_api, bot_user_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function assign_bot(_api::BotsApi, response_stream::Channel, bot_user_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_assign_bot(_api, bot_user_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_convert_bot_to_user_BotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_convert_bot_to_user(_api::BotsApi, bot_user_id::String, convert_bot_to_user_request::ConvertBotToUserRequest; set_system_admin=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_convert_bot_to_user_BotsApi, "/bots/{bot_user_id}/convert_to_user", ["bearerAuth", ], convert_bot_to_user_request)
    OpenAPI.Clients.set_param(_ctx.path, "bot_user_id", bot_user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "set_system_admin", set_system_admin)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Convert a bot into a user

Convert a bot into a user.  __Minimum server version__: 5.26  ##### Permissions Must have `manage_system` permission. 

Params:
- bot_user_id::String (required)
- convert_bot_to_user_request::ConvertBotToUserRequest (required)
- set_system_admin::Bool

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function convert_bot_to_user(_api::BotsApi, bot_user_id::String, convert_bot_to_user_request::ConvertBotToUserRequest; set_system_admin=nothing, _mediaType=nothing)
    _ctx = _oacinternal_convert_bot_to_user(_api, bot_user_id, convert_bot_to_user_request; set_system_admin=set_system_admin, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function convert_bot_to_user(_api::BotsApi, response_stream::Channel, bot_user_id::String, convert_bot_to_user_request::ConvertBotToUserRequest; set_system_admin=nothing, _mediaType=nothing)
    _ctx = _oacinternal_convert_bot_to_user(_api, bot_user_id, convert_bot_to_user_request; set_system_admin=set_system_admin, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_convert_user_to_bot_BotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_convert_user_to_bot(_api::BotsApi, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_convert_user_to_bot_BotsApi, "/users/{user_id}/convert_to_bot", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Convert a user into a bot

Convert a user into a bot.  __Minimum server version__: 5.26  ##### Permissions Must have `manage_system` permission. 

Params:
- user_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function convert_user_to_bot(_api::BotsApi, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_convert_user_to_bot(_api, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function convert_user_to_bot(_api::BotsApi, response_stream::Channel, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_convert_user_to_bot(_api, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_bot_BotsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Bot,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_bot(_api::BotsApi, create_bot_request::CreateBotRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_bot_BotsApi, "/bots", ["bearerAuth", ], create_bot_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a bot

Create a new bot account on the system. Username is required. ##### Permissions Must have `create_bot` permission. __Minimum server version__: 5.10 

Params:
- create_bot_request::CreateBotRequest (required)

Return: Bot, OpenAPI.Clients.ApiResponse
"""
function create_bot(_api::BotsApi, create_bot_request::CreateBotRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_bot(_api, create_bot_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_bot(_api::BotsApi, response_stream::Channel, create_bot_request::CreateBotRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_bot(_api, create_bot_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_bot_icon_image_BotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_bot_icon_image(_api::BotsApi, bot_user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_bot_icon_image_BotsApi, "/bots/{bot_user_id}/icon", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "bot_user_id", bot_user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete bot's LHS icon image

Delete bot's LHS icon image based on bot_user_id string parameter. ##### Permissions Must have `manage_bots` permission. __Minimum server version__: 5.14 

Params:
- bot_user_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_bot_icon_image(_api::BotsApi, bot_user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_bot_icon_image(_api, bot_user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_bot_icon_image(_api::BotsApi, response_stream::Channel, bot_user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_bot_icon_image(_api, bot_user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disable_bot_BotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Bot,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_disable_bot(_api::BotsApi, bot_user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_disable_bot_BotsApi, "/bots/{bot_user_id}/disable", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "bot_user_id", bot_user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Disable a bot

Disable a bot. ##### Permissions Must have `manage_bots` permission.  __Minimum server version__: 5.10 

Params:
- bot_user_id::String (required)

Return: Bot, OpenAPI.Clients.ApiResponse
"""
function disable_bot(_api::BotsApi, bot_user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_disable_bot(_api, bot_user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disable_bot(_api::BotsApi, response_stream::Channel, bot_user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_disable_bot(_api, bot_user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_enable_bot_BotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Bot,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_enable_bot(_api::BotsApi, bot_user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_enable_bot_BotsApi, "/bots/{bot_user_id}/enable", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "bot_user_id", bot_user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Enable a bot

Enable a bot. ##### Permissions Must have `manage_bots` permission.  __Minimum server version__: 5.10 

Params:
- bot_user_id::String (required)

Return: Bot, OpenAPI.Clients.ApiResponse
"""
function enable_bot(_api::BotsApi, bot_user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_enable_bot(_api, bot_user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function enable_bot(_api::BotsApi, response_stream::Channel, bot_user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_enable_bot(_api, bot_user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_bot_BotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Bot,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_bot(_api::BotsApi, bot_user_id::String; include_deleted=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_bot_BotsApi, "/bots/{bot_user_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "bot_user_id", bot_user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_deleted", include_deleted)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a bot

Get a bot specified by its bot id. ##### Permissions Must have `read_bots` permission for bots you are managing, and `read_others_bots` permission for bots others are managing. __Minimum server version__: 5.10 

Params:
- bot_user_id::String (required)
- include_deleted::Bool

Return: Bot, OpenAPI.Clients.ApiResponse
"""
function get_bot(_api::BotsApi, bot_user_id::String; include_deleted=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_bot(_api, bot_user_id; include_deleted=include_deleted, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_bot(_api::BotsApi, response_stream::Channel, bot_user_id::String; include_deleted=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_bot(_api, bot_user_id; include_deleted=include_deleted, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_bot_icon_image_BotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_bot_icon_image(_api::BotsApi, bot_user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_bot_icon_image_BotsApi, "/bots/{bot_user_id}/icon", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "bot_user_id", bot_user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get bot's LHS icon

Get a bot's LHS icon image based on bot_user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.14 

Params:
- bot_user_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_bot_icon_image(_api::BotsApi, bot_user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_bot_icon_image(_api, bot_user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_bot_icon_image(_api::BotsApi, response_stream::Channel, bot_user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_bot_icon_image(_api, bot_user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_bots_BotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Bot},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_bots(_api::BotsApi; page=nothing, per_page=nothing, include_deleted=nothing, only_orphaned=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_bots_BotsApi, "/bots", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "include_deleted", include_deleted)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "only_orphaned", only_orphaned)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get bots

Get a page of a list of bots. ##### Permissions Must have `read_bots` permission for bots you are managing, and `read_others_bots` permission for bots others are managing. __Minimum server version__: 5.10 

Params:
- page::Int64
- per_page::Int64
- include_deleted::Bool
- only_orphaned::Bool

Return: Vector{Bot}, OpenAPI.Clients.ApiResponse
"""
function get_bots(_api::BotsApi; page=nothing, per_page=nothing, include_deleted=nothing, only_orphaned=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_bots(_api; page=page, per_page=per_page, include_deleted=include_deleted, only_orphaned=only_orphaned, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_bots(_api::BotsApi, response_stream::Channel; page=nothing, per_page=nothing, include_deleted=nothing, only_orphaned=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_bots(_api; page=page, per_page=per_page, include_deleted=include_deleted, only_orphaned=only_orphaned, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_bot_BotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Bot,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_patch_bot(_api::BotsApi, bot_user_id::String, create_bot_request::CreateBotRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_patch_bot_BotsApi, "/bots/{bot_user_id}", ["bearerAuth", ], create_bot_request)
    OpenAPI.Clients.set_param(_ctx.path, "bot_user_id", bot_user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Patch a bot

Partially update a bot by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have `manage_bots` permission.  __Minimum server version__: 5.10 

Params:
- bot_user_id::String (required)
- create_bot_request::CreateBotRequest (required)

Return: Bot, OpenAPI.Clients.ApiResponse
"""
function patch_bot(_api::BotsApi, bot_user_id::String, create_bot_request::CreateBotRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_bot(_api, bot_user_id, create_bot_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_bot(_api::BotsApi, response_stream::Channel, bot_user_id::String, create_bot_request::CreateBotRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_bot(_api, bot_user_id, create_bot_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_set_bot_icon_image_BotsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("413", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_set_bot_icon_image(_api::BotsApi, bot_user_id::String, image::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_set_bot_icon_image_BotsApi, "/bots/{bot_user_id}/icon", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "bot_user_id", bot_user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.file, "image", image)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Set bot's LHS icon image

Set a bot's LHS icon image based on bot_user_id string parameter. Icon image must be SVG format, all other formats are rejected. ##### Permissions Must have `manage_bots` permission. __Minimum server version__: 5.14 

Params:
- bot_user_id::String (required)
- image::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function set_bot_icon_image(_api::BotsApi, bot_user_id::String, image::String; _mediaType=nothing)
    _ctx = _oacinternal_set_bot_icon_image(_api, bot_user_id, image; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function set_bot_icon_image(_api::BotsApi, response_stream::Channel, bot_user_id::String, image::String; _mediaType=nothing)
    _ctx = _oacinternal_set_bot_icon_image(_api, bot_user_id, image; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export assign_bot
export convert_bot_to_user
export convert_user_to_bot
export create_bot
export delete_bot_icon_image
export disable_bot
export enable_bot
export get_bot
export get_bot_icon_image
export get_bots
export patch_bot
export set_bot_icon_image
