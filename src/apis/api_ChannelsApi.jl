# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ChannelsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ChannelsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ChannelsApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_add_channel_member_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => ChannelMember,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_add_channel_member(_api::ChannelsApi, channel_id::String, add_channel_member_request::AddChannelMemberRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_add_channel_member_ChannelsApi, "/channels/{channel_id}/members", ["bearerAuth", ], add_channel_member_request)
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add user to channel

Add a user to a channel by creating a channel member object.

Params:
- channel_id::String (required)
- add_channel_member_request::AddChannelMemberRequest (required)

Return: ChannelMember, OpenAPI.Clients.ApiResponse
"""
function add_channel_member(_api::ChannelsApi, channel_id::String, add_channel_member_request::AddChannelMemberRequest; _mediaType=nothing)
    _ctx = _oacinternal_add_channel_member(_api, channel_id, add_channel_member_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function add_channel_member(_api::ChannelsApi, response_stream::Channel, channel_id::String, add_channel_member_request::AddChannelMemberRequest; _mediaType=nothing)
    _ctx = _oacinternal_add_channel_member(_api, channel_id, add_channel_member_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_autocomplete_channels_for_team_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Channel},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_autocomplete_channels_for_team(_api::ChannelsApi, team_id::String, name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_autocomplete_channels_for_team_ChannelsApi, "/teams/{team_id}/channels/autocomplete", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Autocomplete channels

Autocomplete public channels on a team based on the search term provided in the request URL.  __Minimum server version__: 4.7  ##### Permissions Must have the `list_team_channels` permission. 

Params:
- team_id::String (required)
- name::String (required)

Return: Vector{Channel}, OpenAPI.Clients.ApiResponse
"""
function autocomplete_channels_for_team(_api::ChannelsApi, team_id::String, name::String; _mediaType=nothing)
    _ctx = _oacinternal_autocomplete_channels_for_team(_api, team_id, name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function autocomplete_channels_for_team(_api::ChannelsApi, response_stream::Channel, team_id::String, name::String; _mediaType=nothing)
    _ctx = _oacinternal_autocomplete_channels_for_team(_api, team_id, name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_autocomplete_channels_for_team_for_search_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Channel},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_autocomplete_channels_for_team_for_search(_api::ChannelsApi, team_id::String, name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_autocomplete_channels_for_team_for_search_ChannelsApi, "/teams/{team_id}/channels/search_autocomplete", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Autocomplete channels for search

Autocomplete your channels on a team based on the search term provided in the request URL.  __Minimum server version__: 5.4  ##### Permissions Must have the `list_team_channels` permission. 

Params:
- team_id::String (required)
- name::String (required)

Return: Vector{Channel}, OpenAPI.Clients.ApiResponse
"""
function autocomplete_channels_for_team_for_search(_api::ChannelsApi, team_id::String, name::String; _mediaType=nothing)
    _ctx = _oacinternal_autocomplete_channels_for_team_for_search(_api, team_id, name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function autocomplete_channels_for_team_for_search(_api::ChannelsApi, response_stream::Channel, team_id::String, name::String; _mediaType=nothing)
    _ctx = _oacinternal_autocomplete_channels_for_team_for_search(_api, team_id, name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_channel_members_minus_group_members_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_channel_members_minus_group_members(_api::ChannelsApi, channel_id::String, group_ids::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_channel_members_minus_group_members_ChannelsApi, "/channels/{channel_id}/members_minus_group_members", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "group_ids", group_ids)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Channel members minus group members.

Get the set of users who are members of the channel minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields `scheme_guest`, `scheme_user`, and `scheme_admin` representing the roles that user has for the given channel.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.14 

Params:
- channel_id::String (required)
- group_ids::String (required)
- page::Int64
- per_page::Int64

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function channel_members_minus_group_members(_api::ChannelsApi, channel_id::String, group_ids::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_channel_members_minus_group_members(_api, channel_id, group_ids; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function channel_members_minus_group_members(_api::ChannelsApi, response_stream::Channel, channel_id::String, group_ids::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_channel_members_minus_group_members(_api, channel_id, group_ids; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_channel_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Channel,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_channel(_api::ChannelsApi, create_channel_request::CreateChannelRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_channel_ChannelsApi, "/channels", ["bearerAuth", ], create_channel_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a channel

Create a new channel. ##### Permissions If creating a public channel, `create_public_channel` permission is required. If creating a private channel, `create_private_channel` permission is required. 

Params:
- create_channel_request::CreateChannelRequest (required)

Return: Channel, OpenAPI.Clients.ApiResponse
"""
function create_channel(_api::ChannelsApi, create_channel_request::CreateChannelRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_channel(_api, create_channel_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_channel(_api::ChannelsApi, response_stream::Channel, create_channel_request::CreateChannelRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_channel(_api, create_channel_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_direct_channel_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Channel,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_direct_channel(_api::ChannelsApi, request_body::Vector{String}; _mediaType=nothing)
    OpenAPI.validate_param("request_body", "create_direct_channel", :maxItems, request_body, 2)
    OpenAPI.validate_param("request_body", "create_direct_channel", :minItems, request_body, 2)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_direct_channel_ChannelsApi, "/channels/direct", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a direct message channel

Create a new direct message channel between two users. ##### Permissions Must be one of the two users and have `create_direct_channel` permission. Having the `manage_system` permission voids the previous requirements. 

Params:
- request_body::Vector{String} (required)

Return: Channel, OpenAPI.Clients.ApiResponse
"""
function create_direct_channel(_api::ChannelsApi, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_create_direct_channel(_api, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_direct_channel(_api::ChannelsApi, response_stream::Channel, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_create_direct_channel(_api, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_group_channel_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Channel,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_group_channel(_api::ChannelsApi, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_group_channel_ChannelsApi, "/channels/group", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a group message channel

Create a new group message channel to group of users. If the logged in user's id is not included in the list, it will be appended to the end. ##### Permissions Must have `create_group_channel` permission. 

Params:
- request_body::Vector{String} (required)

Return: Channel, OpenAPI.Clients.ApiResponse
"""
function create_group_channel(_api::ChannelsApi, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_create_group_channel(_api, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_group_channel(_api::ChannelsApi, response_stream::Channel, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_create_group_channel(_api, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_sidebar_category_for_team_for_user_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SidebarCategory,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_sidebar_category_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String, sidebar_category::SidebarCategory; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_sidebar_category_for_team_for_user_ChannelsApi, "/users/{user_id}/teams/{team_id}/channels/categories", ["bearerAuth", ], sidebar_category)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create user's sidebar category

Create a custom sidebar category for the user on the given team. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. 

Params:
- team_id::String (required)
- user_id::String (required)
- sidebar_category::SidebarCategory (required)

Return: SidebarCategory, OpenAPI.Clients.ApiResponse
"""
function create_sidebar_category_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String, sidebar_category::SidebarCategory; _mediaType=nothing)
    _ctx = _oacinternal_create_sidebar_category_for_team_for_user(_api, team_id, user_id, sidebar_category; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_sidebar_category_for_team_for_user(_api::ChannelsApi, response_stream::Channel, team_id::String, user_id::String, sidebar_category::SidebarCategory; _mediaType=nothing)
    _ctx = _oacinternal_create_sidebar_category_for_team_for_user(_api, team_id, user_id, sidebar_category; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_channel_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_channel(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_channel_ChannelsApi, "/channels/{channel_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a channel

Archives a channel. This will set the `deleteAt` to the current timestamp in the database. Soft deleted channels may not be accessible in the user interface. They can be viewed and unarchived in the **System Console > User Management > Channels** based on your license. Direct and group message channels cannot be deleted.  As of server version 5.28, optionally use the `permanent=true` query parameter to permanently delete the channel for compliance reasons. To use this feature `ServiceSettings.EnableAPIChannelDeletion` must be set to `true` in the server's configuration.  If you permanently delete a channel this action is not recoverable outside of a database backup.  ##### Permissions `delete_public_channel` permission if the channel is public, `delete_private_channel` permission if the channel is private, or have `manage_system` permission. 

Params:
- channel_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_channel(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_channel(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_channel(_api::ChannelsApi, response_stream::Channel, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_channel(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_all_channels_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ChannelWithTeamData},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_all_channels(_api::ChannelsApi; not_associated_to_group=nothing, page=nothing, per_page=nothing, exclude_default_channels=nothing, include_deleted=nothing, include_total_count=nothing, exclude_policy_constrained=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_all_channels_ChannelsApi, "/channels", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "not_associated_to_group", not_associated_to_group)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "exclude_default_channels", exclude_default_channels)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "include_deleted", include_deleted)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "include_total_count", include_total_count)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "exclude_policy_constrained", exclude_policy_constrained)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of all channels

##### Permissions `manage_system` 

Params:
- not_associated_to_group::String
- page::Int64
- per_page::Int64
- exclude_default_channels::Bool
- include_deleted::Bool
- include_total_count::Bool
- exclude_policy_constrained::Bool

Return: Vector{ChannelWithTeamData}, OpenAPI.Clients.ApiResponse
"""
function get_all_channels(_api::ChannelsApi; not_associated_to_group=nothing, page=nothing, per_page=nothing, exclude_default_channels=nothing, include_deleted=nothing, include_total_count=nothing, exclude_policy_constrained=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_all_channels(_api; not_associated_to_group=not_associated_to_group, page=page, per_page=per_page, exclude_default_channels=exclude_default_channels, include_deleted=include_deleted, include_total_count=include_total_count, exclude_policy_constrained=exclude_policy_constrained, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_all_channels(_api::ChannelsApi, response_stream::Channel; not_associated_to_group=nothing, page=nothing, per_page=nothing, exclude_default_channels=nothing, include_deleted=nothing, include_total_count=nothing, exclude_policy_constrained=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_all_channels(_api; not_associated_to_group=not_associated_to_group, page=page, per_page=per_page, exclude_default_channels=exclude_default_channels, include_deleted=include_deleted, include_total_count=include_total_count, exclude_policy_constrained=exclude_policy_constrained, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Channel,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channel_ChannelsApi, "/channels/{channel_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a channel

Get channel from the provided channel id string. ##### Permissions `read_channel` permission for the channel. 

Params:
- channel_id::String (required)

Return: Channel, OpenAPI.Clients.ApiResponse
"""
function get_channel(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel(_api::ChannelsApi, response_stream::Channel, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_by_name_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Channel,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel_by_name(_api::ChannelsApi, team_id::String, channel_name::String; include_deleted=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channel_by_name_ChannelsApi, "/teams/{team_id}/channels/name/{channel_name}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "channel_name", channel_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_deleted", include_deleted)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a channel by name

Gets channel from the provided team id and channel name strings. ##### Permissions `read_channel` permission for the channel. 

Params:
- team_id::String (required)
- channel_name::String (required)
- include_deleted::Bool

Return: Channel, OpenAPI.Clients.ApiResponse
"""
function get_channel_by_name(_api::ChannelsApi, team_id::String, channel_name::String; include_deleted=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channel_by_name(_api, team_id, channel_name; include_deleted=include_deleted, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel_by_name(_api::ChannelsApi, response_stream::Channel, team_id::String, channel_name::String; include_deleted=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channel_by_name(_api, team_id, channel_name; include_deleted=include_deleted, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_by_name_for_team_name_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Channel,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel_by_name_for_team_name(_api::ChannelsApi, team_name::String, channel_name::String; include_deleted=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channel_by_name_for_team_name_ChannelsApi, "/teams/name/{team_name}/channels/name/{channel_name}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_name", team_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "channel_name", channel_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_deleted", include_deleted)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a channel by name and team name

Gets a channel from the provided team name and channel name strings. ##### Permissions `read_channel` permission for the channel. 

Params:
- team_name::String (required)
- channel_name::String (required)
- include_deleted::Bool

Return: Channel, OpenAPI.Clients.ApiResponse
"""
function get_channel_by_name_for_team_name(_api::ChannelsApi, team_name::String, channel_name::String; include_deleted=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channel_by_name_for_team_name(_api, team_name, channel_name; include_deleted=include_deleted, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel_by_name_for_team_name(_api::ChannelsApi, response_stream::Channel, team_name::String, channel_name::String; include_deleted=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channel_by_name_for_team_name(_api, team_name, channel_name; include_deleted=include_deleted, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_member_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ChannelMember,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel_member(_api::ChannelsApi, channel_id::String, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channel_member_ChannelsApi, "/channels/{channel_id}/members/{user_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get channel member

Get a channel member. ##### Permissions `read_channel` permission for the channel. 

Params:
- channel_id::String (required)
- user_id::String (required)

Return: ChannelMember, OpenAPI.Clients.ApiResponse
"""
function get_channel_member(_api::ChannelsApi, channel_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_member(_api, channel_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel_member(_api::ChannelsApi, response_stream::Channel, channel_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_member(_api, channel_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_member_counts_by_group_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel_member_counts_by_group(_api::ChannelsApi, channel_id::String; include_timezones=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channel_member_counts_by_group_ChannelsApi, "/channels/{channel_id}/member_counts_by_group", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_timezones", include_timezones)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Channel members counts for each group that has atleast one member in the channel

Returns a set of ChannelMemberCountByGroup objects which contain a `group_id`, `channel_member_count` and a `channel_member_timezones_count`. ##### Permissions Must have `read_channel` permission for the given channel. __Minimum server version__: 5.24 

Params:
- channel_id::String (required)
- include_timezones::Bool

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_channel_member_counts_by_group(_api::ChannelsApi, channel_id::String; include_timezones=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channel_member_counts_by_group(_api, channel_id; include_timezones=include_timezones, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel_member_counts_by_group(_api::ChannelsApi, response_stream::Channel, channel_id::String; include_timezones=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channel_member_counts_by_group(_api, channel_id; include_timezones=include_timezones, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_members_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ChannelMember},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel_members(_api::ChannelsApi, channel_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channel_members_ChannelsApi, "/channels/{channel_id}/members", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get channel members

Get a page of members for a channel. ##### Permissions `read_channel` permission for the channel. 

Params:
- channel_id::String (required)
- page::Int64
- per_page::Int64

Return: Vector{ChannelMember}, OpenAPI.Clients.ApiResponse
"""
function get_channel_members(_api::ChannelsApi, channel_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channel_members(_api, channel_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel_members(_api::ChannelsApi, response_stream::Channel, channel_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channel_members(_api, channel_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_members_by_ids_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ChannelMember},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel_members_by_ids(_api::ChannelsApi, channel_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_channel_members_by_ids_ChannelsApi, "/channels/{channel_id}/members/ids", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Get channel members by ids

Get a list of channel members based on the provided user ids. ##### Permissions Must have the `read_channel` permission. 

Params:
- channel_id::String (required)
- request_body::Vector{String} (required)

Return: Vector{ChannelMember}, OpenAPI.Clients.ApiResponse
"""
function get_channel_members_by_ids(_api::ChannelsApi, channel_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_members_by_ids(_api, channel_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel_members_by_ids(_api::ChannelsApi, response_stream::Channel, channel_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_members_by_ids(_api, channel_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_members_for_user_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ChannelMember},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel_members_for_user(_api::ChannelsApi, user_id::String, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channel_members_for_user_ChannelsApi, "/users/{user_id}/teams/{team_id}/channels/members", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get channel memberships and roles for a user

Get all channel memberships and associated membership roles (i.e. `channel_user`, `channel_admin`) for a user on a specific team. ##### Permissions Logged in as the user and `view_team` permission for the team. Having `manage_system` permission voids the previous requirements. 

Params:
- user_id::String (required)
- team_id::String (required)

Return: Vector{ChannelMember}, OpenAPI.Clients.ApiResponse
"""
function get_channel_members_for_user(_api::ChannelsApi, user_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_members_for_user(_api, user_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel_members_for_user(_api::ChannelsApi, response_stream::Channel, user_id::String, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_members_for_user(_api, user_id, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_members_timezones_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel_members_timezones(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channel_members_timezones_ChannelsApi, "/channels/{channel_id}/timezones", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get timezones in a channel

Get a list of timezones for the users who are in this channel.  __Minimum server version__: 5.6  ##### Permissions Must have the `read_channel` permission. 

Params:
- channel_id::String (required)

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function get_channel_members_timezones(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_members_timezones(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel_members_timezones(_api::ChannelsApi, response_stream::Channel, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_members_timezones(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_moderations_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ChannelModeration},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel_moderations(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channel_moderations_ChannelsApi, "/channels/{channel_id}/moderations", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get information about channel's moderation.

##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.22 

Params:
- channel_id::String (required)

Return: Vector{ChannelModeration}, OpenAPI.Clients.ApiResponse
"""
function get_channel_moderations(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_moderations(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel_moderations(_api::ChannelsApi, response_stream::Channel, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_moderations(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_stats_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ChannelStats,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel_stats(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channel_stats_ChannelsApi, "/channels/{channel_id}/stats", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get channel statistics

Get statistics for a channel. ##### Permissions Must have the `read_channel` permission. 

Params:
- channel_id::String (required)

Return: ChannelStats, OpenAPI.Clients.ApiResponse
"""
function get_channel_stats(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_stats(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel_stats(_api::ChannelsApi, response_stream::Channel, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_stats(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_unread_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ChannelUnread,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel_unread(_api::ChannelsApi, user_id::String, channel_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channel_unread_ChannelsApi, "/users/{user_id}/channels/{channel_id}/unread", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get unread messages

Get the total unread messages and mentions for a channel for a user. ##### Permissions Must be logged in as user and have the `read_channel` permission, or have `edit_other_usrs` permission. 

Params:
- user_id::String (required)
- channel_id::String (required)

Return: ChannelUnread, OpenAPI.Clients.ApiResponse
"""
function get_channel_unread(_api::ChannelsApi, user_id::String, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_unread(_api, user_id, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel_unread(_api::ChannelsApi, response_stream::Channel, user_id::String, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_channel_unread(_api, user_id, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channels_for_team_for_user_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Channel},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channels_for_team_for_user(_api::ChannelsApi, user_id::String, team_id::String; include_deleted=nothing, last_delete_at=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channels_for_team_for_user_ChannelsApi, "/users/{user_id}/teams/{team_id}/channels", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_deleted", include_deleted)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "last_delete_at", last_delete_at)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get channels for user

Get all the channels on a team for a user. ##### Permissions Logged in as the user, or have `edit_other_users` permission, and `view_team` permission for the team. 

Params:
- user_id::String (required)
- team_id::String (required)
- include_deleted::Bool
- last_delete_at::Int64

Return: Vector{Channel}, OpenAPI.Clients.ApiResponse
"""
function get_channels_for_team_for_user(_api::ChannelsApi, user_id::String, team_id::String; include_deleted=nothing, last_delete_at=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channels_for_team_for_user(_api, user_id, team_id; include_deleted=include_deleted, last_delete_at=last_delete_at, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channels_for_team_for_user(_api::ChannelsApi, response_stream::Channel, user_id::String, team_id::String; include_deleted=nothing, last_delete_at=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channels_for_team_for_user(_api, user_id, team_id; include_deleted=include_deleted, last_delete_at=last_delete_at, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channels_for_user_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Channel},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channels_for_user(_api::ChannelsApi, user_id::String; last_delete_at=nothing, include_deleted=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channels_for_user_ChannelsApi, "/users/{user_id}/channels", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "last_delete_at", last_delete_at)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "include_deleted", include_deleted)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get all channels from all teams

Get all channels from all teams that a user is a member of.  __Minimum server version__: 6.1  ##### Permissions  Logged in as the user, or have `edit_other_users` permission. 

Params:
- user_id::String (required)
- last_delete_at::Int64
- include_deleted::Bool

Return: Vector{Channel}, OpenAPI.Clients.ApiResponse
"""
function get_channels_for_user(_api::ChannelsApi, user_id::String; last_delete_at=nothing, include_deleted=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channels_for_user(_api, user_id; last_delete_at=last_delete_at, include_deleted=include_deleted, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channels_for_user(_api::ChannelsApi, response_stream::Channel, user_id::String; last_delete_at=nothing, include_deleted=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channels_for_user(_api, user_id; last_delete_at=last_delete_at, include_deleted=include_deleted, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_deleted_channels_for_team_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Channel},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_deleted_channels_for_team(_api::ChannelsApi, team_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_deleted_channels_for_team_ChannelsApi, "/teams/{team_id}/channels/deleted", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get deleted channels

Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 3.10 

Params:
- team_id::String (required)
- page::Int64
- per_page::Int64

Return: Vector{Channel}, OpenAPI.Clients.ApiResponse
"""
function get_deleted_channels_for_team(_api::ChannelsApi, team_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_deleted_channels_for_team(_api, team_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_deleted_channels_for_team(_api::ChannelsApi, response_stream::Channel, team_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_deleted_channels_for_team(_api, team_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_pinned_posts_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PostList,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_pinned_posts(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_pinned_posts_ChannelsApi, "/channels/{channel_id}/pinned", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a channel's pinned posts

Get a list of pinned posts for channel.

Params:
- channel_id::String (required)

Return: PostList, OpenAPI.Clients.ApiResponse
"""
function get_pinned_posts(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_pinned_posts(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_pinned_posts(_api::ChannelsApi, response_stream::Channel, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_pinned_posts(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_private_channels_for_team_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Channel},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_private_channels_for_team(_api::ChannelsApi, team_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_private_channels_for_team_ChannelsApi, "/teams/{team_id}/channels/private", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get private channels

Get a page of private channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 5.26  ##### Permissions Must have `manage_system` permission. 

Params:
- team_id::String (required)
- page::Int64
- per_page::Int64

Return: Vector{Channel}, OpenAPI.Clients.ApiResponse
"""
function get_private_channels_for_team(_api::ChannelsApi, team_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_private_channels_for_team(_api, team_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_private_channels_for_team(_api::ChannelsApi, response_stream::Channel, team_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_private_channels_for_team(_api, team_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_public_channels_by_ids_for_team_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Channel},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_public_channels_by_ids_for_team(_api::ChannelsApi, team_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_public_channels_by_ids_for_team_ChannelsApi, "/teams/{team_id}/channels/ids", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of channels by ids

Get a list of public channels on a team by id. ##### Permissions `view_team` for the team the channels are on. 

Params:
- team_id::String (required)
- request_body::Vector{String} (required)

Return: Vector{Channel}, OpenAPI.Clients.ApiResponse
"""
function get_public_channels_by_ids_for_team(_api::ChannelsApi, team_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_get_public_channels_by_ids_for_team(_api, team_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_public_channels_by_ids_for_team(_api::ChannelsApi, response_stream::Channel, team_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_get_public_channels_by_ids_for_team(_api, team_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_public_channels_for_team_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Channel},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_public_channels_for_team(_api::ChannelsApi, team_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_public_channels_for_team_ChannelsApi, "/teams/{team_id}/channels", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get public channels

Get a page of public channels on a team based on query string parameters - page and per_page. ##### Permissions Must be authenticated and have the `list_team_channels` permission. 

Params:
- team_id::String (required)
- page::Int64
- per_page::Int64

Return: Vector{Channel}, OpenAPI.Clients.ApiResponse
"""
function get_public_channels_for_team(_api::ChannelsApi, team_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_public_channels_for_team(_api, team_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_public_channels_for_team(_api::ChannelsApi, response_stream::Channel, team_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_public_channels_for_team(_api, team_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_sidebar_categories_for_team_for_user_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{OrderedSidebarCategories},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_sidebar_categories_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_sidebar_categories_for_team_for_user_ChannelsApi, "/users/{user_id}/teams/{team_id}/channels/categories", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get user's sidebar categories

Get a list of sidebar categories that will appear in the user's sidebar on the given team, including a list of channel IDs in each category. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. 

Params:
- team_id::String (required)
- user_id::String (required)

Return: Vector{OrderedSidebarCategories}, OpenAPI.Clients.ApiResponse
"""
function get_sidebar_categories_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_sidebar_categories_for_team_for_user(_api, team_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_sidebar_categories_for_team_for_user(_api::ChannelsApi, response_stream::Channel, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_sidebar_categories_for_team_for_user(_api, team_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_sidebar_category_for_team_for_user_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SidebarCategory,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_sidebar_category_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String, category_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_sidebar_category_for_team_for_user_ChannelsApi, "/users/{user_id}/teams/{team_id}/channels/categories/{category_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "category_id", category_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get sidebar category

Returns a single sidebar category for the user on the given team. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. 

Params:
- team_id::String (required)
- user_id::String (required)
- category_id::String (required)

Return: SidebarCategory, OpenAPI.Clients.ApiResponse
"""
function get_sidebar_category_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String, category_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_sidebar_category_for_team_for_user(_api, team_id, user_id, category_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_sidebar_category_for_team_for_user(_api::ChannelsApi, response_stream::Channel, team_id::String, user_id::String, category_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_sidebar_category_for_team_for_user(_api, team_id, user_id, category_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_sidebar_category_order_for_team_for_user_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_sidebar_category_order_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_sidebar_category_order_for_team_for_user_ChannelsApi, "/users/{user_id}/teams/{team_id}/channels/categories/order", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get user's sidebar category order

Returns the order of the sidebar categories for a user on the given team as an array of IDs. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. 

Params:
- team_id::String (required)
- user_id::String (required)

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function get_sidebar_category_order_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_sidebar_category_order_for_team_for_user(_api, team_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_sidebar_category_order_for_team_for_user(_api::ChannelsApi, response_stream::Channel, team_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_sidebar_category_order_for_team_for_user(_api, team_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_move_channel_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Channel,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_move_channel(_api::ChannelsApi, channel_id::String, move_channel_request::MoveChannelRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_move_channel_ChannelsApi, "/channels/{channel_id}/move", ["bearerAuth", ], move_channel_request)
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Move a channel

Move a channel to another team.  __Minimum server version__: 5.26  ##### Permissions  Must have `manage_system` permission. 

Params:
- channel_id::String (required)
- move_channel_request::MoveChannelRequest (required)

Return: Channel, OpenAPI.Clients.ApiResponse
"""
function move_channel(_api::ChannelsApi, channel_id::String, move_channel_request::MoveChannelRequest; _mediaType=nothing)
    _ctx = _oacinternal_move_channel(_api, channel_id, move_channel_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function move_channel(_api::ChannelsApi, response_stream::Channel, channel_id::String, move_channel_request::MoveChannelRequest; _mediaType=nothing)
    _ctx = _oacinternal_move_channel(_api, channel_id, move_channel_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_channel_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Channel,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_patch_channel(_api::ChannelsApi, channel_id::String, patch_channel_request::PatchChannelRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_patch_channel_ChannelsApi, "/channels/{channel_id}/patch", ["bearerAuth", ], patch_channel_request)
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Patch a channel

Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions If updating a public channel, `manage_public_channel_members` permission is required. If updating a private channel, `manage_private_channel_members` permission is required. 

Params:
- channel_id::String (required)
- patch_channel_request::PatchChannelRequest (required)

Return: Channel, OpenAPI.Clients.ApiResponse
"""
function patch_channel(_api::ChannelsApi, channel_id::String, patch_channel_request::PatchChannelRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_channel(_api, channel_id, patch_channel_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_channel(_api::ChannelsApi, response_stream::Channel, channel_id::String, patch_channel_request::PatchChannelRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_channel(_api, channel_id, patch_channel_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_channel_moderations_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ChannelModeration},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_patch_channel_moderations(_api::ChannelsApi, channel_id::String, channel_moderation_patch::ChannelModerationPatch; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_patch_channel_moderations_ChannelsApi, "/channels/{channel_id}/moderations/patch", ["bearerAuth", ], channel_moderation_patch)
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a channel's moderation settings.

##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.22 

Params:
- channel_id::String (required)
- channel_moderation_patch::ChannelModerationPatch (required)

Return: Vector{ChannelModeration}, OpenAPI.Clients.ApiResponse
"""
function patch_channel_moderations(_api::ChannelsApi, channel_id::String, channel_moderation_patch::ChannelModerationPatch; _mediaType=nothing)
    _ctx = _oacinternal_patch_channel_moderations(_api, channel_id, channel_moderation_patch; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_channel_moderations(_api::ChannelsApi, response_stream::Channel, channel_id::String, channel_moderation_patch::ChannelModerationPatch; _mediaType=nothing)
    _ctx = _oacinternal_patch_channel_moderations(_api, channel_id, channel_moderation_patch; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_remove_sidebar_category_for_team_for_user_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SidebarCategory,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_remove_sidebar_category_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String, category_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_remove_sidebar_category_for_team_for_user_ChannelsApi, "/users/{user_id}/teams/{team_id}/channels/categories/{category_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "category_id", category_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete sidebar category

Deletes a single sidebar category for the user on the given team. Only custom categories can be deleted. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. 

Params:
- team_id::String (required)
- user_id::String (required)
- category_id::String (required)

Return: SidebarCategory, OpenAPI.Clients.ApiResponse
"""
function remove_sidebar_category_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String, category_id::String; _mediaType=nothing)
    _ctx = _oacinternal_remove_sidebar_category_for_team_for_user(_api, team_id, user_id, category_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function remove_sidebar_category_for_team_for_user(_api::ChannelsApi, response_stream::Channel, team_id::String, user_id::String, category_id::String; _mediaType=nothing)
    _ctx = _oacinternal_remove_sidebar_category_for_team_for_user(_api, team_id, user_id, category_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_remove_user_from_channel_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_remove_user_from_channel(_api::ChannelsApi, channel_id::String, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_remove_user_from_channel_ChannelsApi, "/channels/{channel_id}/members/{user_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Remove user from channel

Delete a channel member, effectively removing them from a channel.  In server version 5.3 and later, channel members can only be deleted from public or private channels. ##### Permissions `manage_public_channel_members` permission if the channel is public. `manage_private_channel_members` permission if the channel is private. 

Params:
- channel_id::String (required)
- user_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function remove_user_from_channel(_api::ChannelsApi, channel_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_remove_user_from_channel(_api, channel_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function remove_user_from_channel(_api::ChannelsApi, response_stream::Channel, channel_id::String, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_remove_user_from_channel(_api, channel_id, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_restore_channel_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Channel,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_restore_channel(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_restore_channel_ChannelsApi, "/channels/{channel_id}/restore", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Restore a channel

Restore channel from the provided channel id string.  __Minimum server version__: 3.10  ##### Permissions `manage_team` permission for the team of the channel. 

Params:
- channel_id::String (required)

Return: Channel, OpenAPI.Clients.ApiResponse
"""
function restore_channel(_api::ChannelsApi, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_restore_channel(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function restore_channel(_api::ChannelsApi, response_stream::Channel, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_restore_channel(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_all_channels_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SearchAllChannels200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
)

function _oacinternal_search_all_channels(_api::ChannelsApi, search_all_channels_request::SearchAllChannelsRequest; system_console=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_all_channels_ChannelsApi, "/channels/search", ["bearerAuth", ], search_all_channels_request)
    OpenAPI.Clients.set_param(_ctx.query, "system_console", system_console)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search all private and open type channels across all teams

Returns all private and open type channels where 'term' matches on the name, display name, or purpose of the channel.  Configured 'default' channels (ex Town Square and Off-Topic) can be excluded from the results with the `exclude_default_channels` boolean parameter.  Channels that are associated (via GroupChannel records) to a given group can be excluded from the results with the `not_associated_to_group` parameter and a group id string. 

Params:
- search_all_channels_request::SearchAllChannelsRequest (required)
- system_console::Bool

Return: SearchAllChannels200Response, OpenAPI.Clients.ApiResponse
"""
function search_all_channels(_api::ChannelsApi, search_all_channels_request::SearchAllChannelsRequest; system_console=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_all_channels(_api, search_all_channels_request; system_console=system_console, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_all_channels(_api::ChannelsApi, response_stream::Channel, search_all_channels_request::SearchAllChannelsRequest; system_console=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_all_channels(_api, search_all_channels_request; system_console=system_console, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_archived_channels_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Vector{Channel},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_search_archived_channels(_api::ChannelsApi, team_id::String, search_archived_channels_request::SearchArchivedChannelsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_archived_channels_ChannelsApi, "/teams/{team_id}/channels/search_archived", ["bearerAuth", ], search_archived_channels_request)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search archived channels

Search archived channels on a team based on the search term provided in the request body.  __Minimum server version__: 5.18  ##### Permissions Must have the `list_team_channels` permission.  In server version 5.18 and later, a user without the `list_team_channels` permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. 

Params:
- team_id::String (required)
- search_archived_channels_request::SearchArchivedChannelsRequest (required)

Return: Vector{Channel}, OpenAPI.Clients.ApiResponse
"""
function search_archived_channels(_api::ChannelsApi, team_id::String, search_archived_channels_request::SearchArchivedChannelsRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_archived_channels(_api, team_id, search_archived_channels_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_archived_channels(_api::ChannelsApi, response_stream::Channel, team_id::String, search_archived_channels_request::SearchArchivedChannelsRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_archived_channels(_api, team_id, search_archived_channels_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_channels_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Vector{Channel},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_search_channels(_api::ChannelsApi, team_id::String, search_channels_request::SearchChannelsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_channels_ChannelsApi, "/teams/{team_id}/channels/search", ["bearerAuth", ], search_channels_request)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search channels

Search public channels on a team based on the search term provided in the request body. ##### Permissions Must have the `list_team_channels` permission.  In server version 5.16 and later, a user without the `list_team_channels` permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. 

Params:
- team_id::String (required)
- search_channels_request::SearchChannelsRequest (required)

Return: Vector{Channel}, OpenAPI.Clients.ApiResponse
"""
function search_channels(_api::ChannelsApi, team_id::String, search_channels_request::SearchChannelsRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_channels(_api, team_id, search_channels_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_channels(_api::ChannelsApi, response_stream::Channel, team_id::String, search_channels_request::SearchChannelsRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_channels(_api, team_id, search_channels_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_group_channels_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Channel},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
)

function _oacinternal_search_group_channels(_api::ChannelsApi, search_group_channels_request::SearchGroupChannelsRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_group_channels_ChannelsApi, "/channels/group/search", ["bearerAuth", ], search_group_channels_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search Group Channels

Get a list of group channels for a user which members' usernames match the search term.  __Minimum server version__: 5.14 

Params:
- search_group_channels_request::SearchGroupChannelsRequest (required)

Return: Vector{Channel}, OpenAPI.Clients.ApiResponse
"""
function search_group_channels(_api::ChannelsApi, search_group_channels_request::SearchGroupChannelsRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_group_channels(_api, search_group_channels_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_group_channels(_api::ChannelsApi, response_stream::Channel, search_group_channels_request::SearchGroupChannelsRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_group_channels(_api, search_group_channels_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_channel_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Channel,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_channel(_api::ChannelsApi, channel_id::String, update_channel_request::UpdateChannelRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_channel_ChannelsApi, "/channels/{channel_id}", ["bearerAuth", ], update_channel_request)
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a channel

Update a channel. The fields that can be updated are listed as parameters. Omitted fields will be treated as blanks. ##### Permissions If updating a public channel, `manage_public_channel_members` permission is required. If updating a private channel, `manage_private_channel_members` permission is required. 

Params:
- channel_id::String (required)
- update_channel_request::UpdateChannelRequest (required)

Return: Channel, OpenAPI.Clients.ApiResponse
"""
function update_channel(_api::ChannelsApi, channel_id::String, update_channel_request::UpdateChannelRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_channel(_api, channel_id, update_channel_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_channel(_api::ChannelsApi, response_stream::Channel, channel_id::String, update_channel_request::UpdateChannelRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_channel(_api, channel_id, update_channel_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_channel_member_scheme_roles_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_channel_member_scheme_roles(_api::ChannelsApi, channel_id::String, user_id::String, update_team_member_scheme_roles_request::UpdateTeamMemberSchemeRolesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_channel_member_scheme_roles_ChannelsApi, "/channels/{channel_id}/members/{user_id}/schemeRoles", ["bearerAuth", ], update_team_member_scheme_roles_request)
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update the scheme-derived roles of a channel member.

Update a channel member's scheme_admin/scheme_user properties. Typically this should either be `scheme_admin=false, scheme_user=true` for ordinary channel member, or `scheme_admin=true, scheme_user=true` for a channel admin. __Minimum server version__: 5.0 ##### Permissions Must be authenticated and have the `manage_channel_roles` permission. 

Params:
- channel_id::String (required)
- user_id::String (required)
- update_team_member_scheme_roles_request::UpdateTeamMemberSchemeRolesRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function update_channel_member_scheme_roles(_api::ChannelsApi, channel_id::String, user_id::String, update_team_member_scheme_roles_request::UpdateTeamMemberSchemeRolesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_channel_member_scheme_roles(_api, channel_id, user_id, update_team_member_scheme_roles_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_channel_member_scheme_roles(_api::ChannelsApi, response_stream::Channel, channel_id::String, user_id::String, update_team_member_scheme_roles_request::UpdateTeamMemberSchemeRolesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_channel_member_scheme_roles(_api, channel_id, user_id, update_team_member_scheme_roles_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_channel_notify_props_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_channel_notify_props(_api::ChannelsApi, channel_id::String, user_id::String, channel_notify_props::ChannelNotifyProps; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_channel_notify_props_ChannelsApi, "/channels/{channel_id}/members/{user_id}/notify_props", ["bearerAuth", ], channel_notify_props)
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update channel notifications

Update a user's notification properties for a channel. Only the provided fields are updated. ##### Permissions Must be logged in as the user or have `edit_other_users` permission. 

Params:
- channel_id::String (required)
- user_id::String (required)
- channel_notify_props::ChannelNotifyProps (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function update_channel_notify_props(_api::ChannelsApi, channel_id::String, user_id::String, channel_notify_props::ChannelNotifyProps; _mediaType=nothing)
    _ctx = _oacinternal_update_channel_notify_props(_api, channel_id, user_id, channel_notify_props; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_channel_notify_props(_api::ChannelsApi, response_stream::Channel, channel_id::String, user_id::String, channel_notify_props::ChannelNotifyProps; _mediaType=nothing)
    _ctx = _oacinternal_update_channel_notify_props(_api, channel_id, user_id, channel_notify_props; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_channel_privacy_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Channel,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_channel_privacy(_api::ChannelsApi, channel_id::String, update_channel_privacy_request::UpdateChannelPrivacyRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_channel_privacy_ChannelsApi, "/channels/{channel_id}/privacy", ["bearerAuth", ], update_channel_privacy_request)
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update channel's privacy

Updates channel's privacy allowing changing a channel from Public to Private and back.  __Minimum server version__: 5.16  ##### Permissions `manage_team` permission for the channels team on version < 5.28. `convert_public_channel_to_private` permission for the channel if updating privacy to 'P' on version >= 5.28. `convert_private_channel_to_public` permission for the channel if updating privacy to 'O' on version >= 5.28. 

Params:
- channel_id::String (required)
- update_channel_privacy_request::UpdateChannelPrivacyRequest (required)

Return: Channel, OpenAPI.Clients.ApiResponse
"""
function update_channel_privacy(_api::ChannelsApi, channel_id::String, update_channel_privacy_request::UpdateChannelPrivacyRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_channel_privacy(_api, channel_id, update_channel_privacy_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_channel_privacy(_api::ChannelsApi, response_stream::Channel, channel_id::String, update_channel_privacy_request::UpdateChannelPrivacyRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_channel_privacy(_api, channel_id, update_channel_privacy_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_channel_roles_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_channel_roles(_api::ChannelsApi, channel_id::String, user_id::String, update_user_roles_request::UpdateUserRolesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_channel_roles_ChannelsApi, "/channels/{channel_id}/members/{user_id}/roles", ["bearerAuth", ], update_user_roles_request)
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update channel roles

Update a user's roles for a channel. ##### Permissions Must have `manage_channel_roles` permission for the channel. 

Params:
- channel_id::String (required)
- user_id::String (required)
- update_user_roles_request::UpdateUserRolesRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function update_channel_roles(_api::ChannelsApi, channel_id::String, user_id::String, update_user_roles_request::UpdateUserRolesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_channel_roles(_api, channel_id, user_id, update_user_roles_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_channel_roles(_api::ChannelsApi, response_stream::Channel, channel_id::String, user_id::String, update_user_roles_request::UpdateUserRolesRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_channel_roles(_api, channel_id, user_id, update_user_roles_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_channel_scheme_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_channel_scheme(_api::ChannelsApi, channel_id::String, update_team_scheme_request::UpdateTeamSchemeRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_channel_scheme_ChannelsApi, "/channels/{channel_id}/scheme", ["bearerAuth", ], update_team_scheme_request)
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Set a channel's scheme

Set a channel's scheme, more specifically sets the scheme_id value of a channel record.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 4.10 

Params:
- channel_id::String (required)
- update_team_scheme_request::UpdateTeamSchemeRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function update_channel_scheme(_api::ChannelsApi, channel_id::String, update_team_scheme_request::UpdateTeamSchemeRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_channel_scheme(_api, channel_id, update_team_scheme_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_channel_scheme(_api::ChannelsApi, response_stream::Channel, channel_id::String, update_team_scheme_request::UpdateTeamSchemeRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_channel_scheme(_api, channel_id, update_team_scheme_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_sidebar_categories_for_team_for_user_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SidebarCategory,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_sidebar_categories_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String, sidebar_category::Vector{SidebarCategory}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_sidebar_categories_for_team_for_user_ChannelsApi, "/users/{user_id}/teams/{team_id}/channels/categories", ["bearerAuth", ], sidebar_category)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update user's sidebar categories

Update any number of sidebar categories for the user on the given team. This can be used to reorder the channels in these categories. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. 

Params:
- team_id::String (required)
- user_id::String (required)
- sidebar_category::Vector{SidebarCategory} (required)

Return: SidebarCategory, OpenAPI.Clients.ApiResponse
"""
function update_sidebar_categories_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String, sidebar_category::Vector{SidebarCategory}; _mediaType=nothing)
    _ctx = _oacinternal_update_sidebar_categories_for_team_for_user(_api, team_id, user_id, sidebar_category; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_sidebar_categories_for_team_for_user(_api::ChannelsApi, response_stream::Channel, team_id::String, user_id::String, sidebar_category::Vector{SidebarCategory}; _mediaType=nothing)
    _ctx = _oacinternal_update_sidebar_categories_for_team_for_user(_api, team_id, user_id, sidebar_category; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_sidebar_category_for_team_for_user_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SidebarCategory,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_sidebar_category_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String, category_id::String, sidebar_category::SidebarCategory; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_sidebar_category_for_team_for_user_ChannelsApi, "/users/{user_id}/teams/{team_id}/channels/categories/{category_id}", ["bearerAuth", ], sidebar_category)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "category_id", category_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update sidebar category

Updates a single sidebar category for the user on the given team. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. 

Params:
- team_id::String (required)
- user_id::String (required)
- category_id::String (required)
- sidebar_category::SidebarCategory (required)

Return: SidebarCategory, OpenAPI.Clients.ApiResponse
"""
function update_sidebar_category_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String, category_id::String, sidebar_category::SidebarCategory; _mediaType=nothing)
    _ctx = _oacinternal_update_sidebar_category_for_team_for_user(_api, team_id, user_id, category_id, sidebar_category; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_sidebar_category_for_team_for_user(_api::ChannelsApi, response_stream::Channel, team_id::String, user_id::String, category_id::String, sidebar_category::SidebarCategory; _mediaType=nothing)
    _ctx = _oacinternal_update_sidebar_category_for_team_for_user(_api, team_id, user_id, category_id, sidebar_category; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_sidebar_category_order_for_team_for_user_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_sidebar_category_order_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_sidebar_category_order_for_team_for_user_ChannelsApi, "/users/{user_id}/teams/{team_id}/channels/categories/order", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update user's sidebar category order

Updates the order of the sidebar categories for a user on the given team. The provided array must include the IDs of all categories on the team. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. 

Params:
- team_id::String (required)
- user_id::String (required)
- request_body::Vector{String} (required)

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function update_sidebar_category_order_for_team_for_user(_api::ChannelsApi, team_id::String, user_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_update_sidebar_category_order_for_team_for_user(_api, team_id, user_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_sidebar_category_order_for_team_for_user(_api::ChannelsApi, response_stream::Channel, team_id::String, user_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_update_sidebar_category_order_for_team_for_user(_api, team_id, user_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_view_channel_ChannelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ViewChannel200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_view_channel(_api::ChannelsApi, user_id::String, view_channel_request::ViewChannelRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_view_channel_ChannelsApi, "/channels/members/{user_id}/view", ["bearerAuth", ], view_channel_request)
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""View channel

Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel. ##### Permissions Must be logged in as user or have `edit_other_users` permission.  __Response only includes `last_viewed_at_times` in Mattermost server 4.3 and newer.__ 

Params:
- user_id::String (required)
- view_channel_request::ViewChannelRequest (required)

Return: ViewChannel200Response, OpenAPI.Clients.ApiResponse
"""
function view_channel(_api::ChannelsApi, user_id::String, view_channel_request::ViewChannelRequest; _mediaType=nothing)
    _ctx = _oacinternal_view_channel(_api, user_id, view_channel_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function view_channel(_api::ChannelsApi, response_stream::Channel, user_id::String, view_channel_request::ViewChannelRequest; _mediaType=nothing)
    _ctx = _oacinternal_view_channel(_api, user_id, view_channel_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export add_channel_member
export autocomplete_channels_for_team
export autocomplete_channels_for_team_for_search
export channel_members_minus_group_members
export create_channel
export create_direct_channel
export create_group_channel
export create_sidebar_category_for_team_for_user
export delete_channel
export get_all_channels
export get_channel
export get_channel_by_name
export get_channel_by_name_for_team_name
export get_channel_member
export get_channel_member_counts_by_group
export get_channel_members
export get_channel_members_by_ids
export get_channel_members_for_user
export get_channel_members_timezones
export get_channel_moderations
export get_channel_stats
export get_channel_unread
export get_channels_for_team_for_user
export get_channels_for_user
export get_deleted_channels_for_team
export get_pinned_posts
export get_private_channels_for_team
export get_public_channels_by_ids_for_team
export get_public_channels_for_team
export get_sidebar_categories_for_team_for_user
export get_sidebar_category_for_team_for_user
export get_sidebar_category_order_for_team_for_user
export move_channel
export patch_channel
export patch_channel_moderations
export remove_sidebar_category_for_team_for_user
export remove_user_from_channel
export restore_channel
export search_all_channels
export search_archived_channels
export search_channels
export search_group_channels
export update_channel
export update_channel_member_scheme_roles
export update_channel_notify_props
export update_channel_privacy
export update_channel_roles
export update_channel_scheme
export update_sidebar_categories_for_team_for_user
export update_sidebar_category_for_team_for_user
export update_sidebar_category_order_for_team_for_user
export view_channel
