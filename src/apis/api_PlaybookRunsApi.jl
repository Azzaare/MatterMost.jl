# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct PlaybookRunsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `PlaybookRunsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ PlaybookRunsApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_add_checklist_item_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_add_checklist_item(_api::PlaybookRunsApi, id::String, checklist::Int64; add_checklist_item_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_add_checklist_item_PlaybookRunsApi, "/runs/{id}/checklists/{checklist}/add", ["BearerAuth", ], add_checklist_item_request)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "checklist", checklist)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add an item to a playbook run's checklist

The most common pattern to add a new item is to only send its title as the request payload. By default, it is an open item, with no assignee and no slash command.

Params:
- id::String (required)
- checklist::Int64 (required)
- add_checklist_item_request::AddChecklistItemRequest

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function add_checklist_item(_api::PlaybookRunsApi, id::String, checklist::Int64; add_checklist_item_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_add_checklist_item(_api, id, checklist; add_checklist_item_request=add_checklist_item_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function add_checklist_item(_api::PlaybookRunsApi, response_stream::Channel, id::String, checklist::Int64; add_checklist_item_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_add_checklist_item(_api, id, checklist; add_checklist_item_request=add_checklist_item_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_change_owner_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_change_owner(_api::PlaybookRunsApi, id::String; change_owner_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_change_owner_PlaybookRunsApi, "/runs/{id}/owner", ["BearerAuth", ], change_owner_request)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update playbook run owner

Params:
- id::String (required)
- change_owner_request::ChangeOwnerRequest

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function change_owner(_api::PlaybookRunsApi, id::String; change_owner_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_change_owner(_api, id; change_owner_request=change_owner_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function change_owner(_api::PlaybookRunsApi, response_stream::Channel, id::String; change_owner_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_change_owner(_api, id; change_owner_request=change_owner_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_playbook_run_from_post_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => PlaybookRun,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_create_playbook_run_from_post(_api::PlaybookRunsApi; create_playbook_run_from_post_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_playbook_run_from_post_PlaybookRunsApi, "/runs", ["BearerAuth", ], create_playbook_run_from_post_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a new playbook run

Create a new playbook run in a team, using a playbook as template, with a specific name and a specific owner.

Params:
- create_playbook_run_from_post_request::CreatePlaybookRunFromPostRequest

Return: PlaybookRun, OpenAPI.Clients.ApiResponse
"""
function create_playbook_run_from_post(_api::PlaybookRunsApi; create_playbook_run_from_post_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_playbook_run_from_post(_api; create_playbook_run_from_post_request=create_playbook_run_from_post_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_playbook_run_from_post(_api::PlaybookRunsApi, response_stream::Channel; create_playbook_run_from_post_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_playbook_run_from_post(_api; create_playbook_run_from_post_request=create_playbook_run_from_post_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_end_playbook_run_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_end_playbook_run(_api::PlaybookRunsApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_end_playbook_run_PlaybookRunsApi, "/runs/{id}/end", ["BearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""End a playbook run

Params:
- id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function end_playbook_run(_api::PlaybookRunsApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_end_playbook_run(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function end_playbook_run(_api::PlaybookRunsApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_end_playbook_run(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_finish_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_finish(_api::PlaybookRunsApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_finish_PlaybookRunsApi, "/runs/{id}/finish", ["BearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Finish a playbook

Params:
- id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function finish(_api::PlaybookRunsApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_finish(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function finish(_api::PlaybookRunsApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_finish(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channels_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_get_channels(_api::PlaybookRunsApi, team_id::String; sort=nothing, direction=nothing, status=nothing, owner_user_id=nothing, search_term=nothing, participant_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channels_PlaybookRunsApi, "/runs/channels", ["BearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "direction", direction)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "status", status)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "owner_user_id", owner_user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "search_term", search_term)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "participant_id", participant_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get playbook run channels

Get all channels associated with a playbook run, filtered by team, status, owner, name and/or members, and sorted by ID, name, status, creation date, end date, team, or owner ID.

Params:
- team_id::String (required)
- sort::String
- direction::String
- status::String
- owner_user_id::String
- search_term::String
- participant_id::String

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function get_channels(_api::PlaybookRunsApi, team_id::String; sort=nothing, direction=nothing, status=nothing, owner_user_id=nothing, search_term=nothing, participant_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channels(_api, team_id; sort=sort, direction=direction, status=status, owner_user_id=owner_user_id, search_term=search_term, participant_id=participant_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channels(_api::PlaybookRunsApi, response_stream::Channel, team_id::String; sort=nothing, direction=nothing, status=nothing, owner_user_id=nothing, search_term=nothing, participant_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channels(_api, team_id; sort=sort, direction=direction, status=status, owner_user_id=owner_user_id, search_term=search_term, participant_id=participant_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_owners_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{OwnerInfo},
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_get_owners(_api::PlaybookRunsApi, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_owners_PlaybookRunsApi, "/runs/owners", ["BearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get all owners

Get the owners of all playbook runs, filtered by team.

Params:
- team_id::String (required)

Return: Vector{OwnerInfo}, OpenAPI.Clients.ApiResponse
"""
function get_owners(_api::PlaybookRunsApi, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_owners(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_owners(_api::PlaybookRunsApi, response_stream::Channel, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_owners(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_playbook_run_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PlaybookRun,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_get_playbook_run(_api::PlaybookRunsApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_playbook_run_PlaybookRunsApi, "/runs/{id}", ["BearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a playbook run

Params:
- id::String (required)

Return: PlaybookRun, OpenAPI.Clients.ApiResponse
"""
function get_playbook_run(_api::PlaybookRunsApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_playbook_run(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_playbook_run(_api::PlaybookRunsApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_playbook_run(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_playbook_run_by_channel_id_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PlaybookRun,
    Regex("^" * replace("404", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_get_playbook_run_by_channel_id(_api::PlaybookRunsApi, channel_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_playbook_run_by_channel_id_PlaybookRunsApi, "/runs/channel/{channel_id}", ["BearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Find playbook run by channel ID

Params:
- channel_id::String (required)

Return: PlaybookRun, OpenAPI.Clients.ApiResponse
"""
function get_playbook_run_by_channel_id(_api::PlaybookRunsApi, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_playbook_run_by_channel_id(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_playbook_run_by_channel_id(_api::PlaybookRunsApi, response_stream::Channel, channel_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_playbook_run_by_channel_id(_api, channel_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_playbook_run_metadata_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PlaybookRunMetadata,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_get_playbook_run_metadata(_api::PlaybookRunsApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_playbook_run_metadata_PlaybookRunsApi, "/runs/{id}/metadata", ["BearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get playbook run metadata

Params:
- id::String (required)

Return: PlaybookRunMetadata, OpenAPI.Clients.ApiResponse
"""
function get_playbook_run_metadata(_api::PlaybookRunsApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_playbook_run_metadata(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_playbook_run_metadata(_api::PlaybookRunsApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_playbook_run_metadata(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_item_delete_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_item_delete(_api::PlaybookRunsApi, id::String, checklist::Int64, item::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_item_delete_PlaybookRunsApi, "/runs/{id}/checklists/{checklist}/item/{item}", ["BearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "checklist", checklist)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "item", item)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete an item of a playbook run's checklist

Params:
- id::String (required)
- checklist::Int64 (required)
- item::Int64 (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function item_delete(_api::PlaybookRunsApi, id::String, checklist::Int64, item::Int64; _mediaType=nothing)
    _ctx = _oacinternal_item_delete(_api, id, checklist, item; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function item_delete(_api::PlaybookRunsApi, response_stream::Channel, id::String, checklist::Int64, item::Int64; _mediaType=nothing)
    _ctx = _oacinternal_item_delete(_api, id, checklist, item; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_item_rename_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_item_rename(_api::PlaybookRunsApi, id::String, checklist::Int64, item::Int64; item_rename_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_item_rename_PlaybookRunsApi, "/runs/{id}/checklists/{checklist}/item/{item}", ["BearerAuth", ], item_rename_request)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "checklist", checklist)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "item", item)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update an item of a playbook run's checklist

Update the title and the slash command of an item in one of the playbook run's checklists.

Params:
- id::String (required)
- checklist::Int64 (required)
- item::Int64 (required)
- item_rename_request::ItemRenameRequest

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function item_rename(_api::PlaybookRunsApi, id::String, checklist::Int64, item::Int64; item_rename_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_item_rename(_api, id, checklist, item; item_rename_request=item_rename_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function item_rename(_api::PlaybookRunsApi, response_stream::Channel, id::String, checklist::Int64, item::Int64; item_rename_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_item_rename(_api, id, checklist, item; item_rename_request=item_rename_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_item_run_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TriggerIdReturn,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_item_run(_api::PlaybookRunsApi, id::String, checklist::Int64, item::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_item_run_PlaybookRunsApi, "/runs/{id}/checklists/{checklist}/item/{item}/run", ["BearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "checklist", checklist)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "item", item)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Run an item's slash command

Params:
- id::String (required)
- checklist::Int64 (required)
- item::Int64 (required)

Return: TriggerIdReturn, OpenAPI.Clients.ApiResponse
"""
function item_run(_api::PlaybookRunsApi, id::String, checklist::Int64, item::Int64; _mediaType=nothing)
    _ctx = _oacinternal_item_run(_api, id, checklist, item; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function item_run(_api::PlaybookRunsApi, response_stream::Channel, id::String, checklist::Int64, item::Int64; _mediaType=nothing)
    _ctx = _oacinternal_item_run(_api, id, checklist, item; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_item_set_assignee_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_item_set_assignee(_api::PlaybookRunsApi, id::String, checklist::Int64, item::Int64; item_set_assignee_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_item_set_assignee_PlaybookRunsApi, "/runs/{id}/checklists/{checklist}/item/{item}/assignee", ["BearerAuth", ], item_set_assignee_request)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "checklist", checklist)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "item", item)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update the assignee of an item

Params:
- id::String (required)
- checklist::Int64 (required)
- item::Int64 (required)
- item_set_assignee_request::ItemSetAssigneeRequest

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function item_set_assignee(_api::PlaybookRunsApi, id::String, checklist::Int64, item::Int64; item_set_assignee_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_item_set_assignee(_api, id, checklist, item; item_set_assignee_request=item_set_assignee_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function item_set_assignee(_api::PlaybookRunsApi, response_stream::Channel, id::String, checklist::Int64, item::Int64; item_set_assignee_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_item_set_assignee(_api, id, checklist, item; item_set_assignee_request=item_set_assignee_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_item_set_state_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_item_set_state(_api::PlaybookRunsApi, id::String, checklist::Int64, item::Int64; item_set_state_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_item_set_state_PlaybookRunsApi, "/runs/{id}/checklists/{checklist}/item/{item}/state", ["BearerAuth", ], item_set_state_request)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "checklist", checklist)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "item", item)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update the state of an item

Params:
- id::String (required)
- checklist::Int64 (required)
- item::Int64 (required)
- item_set_state_request::ItemSetStateRequest

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function item_set_state(_api::PlaybookRunsApi, id::String, checklist::Int64, item::Int64; item_set_state_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_item_set_state(_api, id, checklist, item; item_set_state_request=item_set_state_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function item_set_state(_api::PlaybookRunsApi, response_stream::Channel, id::String, checklist::Int64, item::Int64; item_set_state_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_item_set_state(_api, id, checklist, item; item_set_state_request=item_set_state_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_playbook_runs_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PlaybookRunList,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_list_playbook_runs(_api::PlaybookRunsApi, team_id::String; page=nothing, per_page=nothing, sort=nothing, direction=nothing, statuses=nothing, owner_user_id=nothing, participant_id=nothing, search_term=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_playbook_runs_PlaybookRunsApi, "/runs", ["BearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "direction", direction)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "statuses", statuses)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "owner_user_id", owner_user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "participant_id", participant_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "search_term", search_term)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List all playbook runs

Retrieve a paged list of playbook runs, filtered by team, status, owner, name and/or members, and sorted by ID, name, status, creation date, end date, team or owner ID.

Params:
- team_id::String (required)
- page::Int64
- per_page::Int64
- sort::String
- direction::String
- statuses::Vector{String}
- owner_user_id::String
- participant_id::String
- search_term::String

Return: PlaybookRunList, OpenAPI.Clients.ApiResponse
"""
function list_playbook_runs(_api::PlaybookRunsApi, team_id::String; page=nothing, per_page=nothing, sort=nothing, direction=nothing, statuses=nothing, owner_user_id=nothing, participant_id=nothing, search_term=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_playbook_runs(_api, team_id; page=page, per_page=per_page, sort=sort, direction=direction, statuses=statuses, owner_user_id=owner_user_id, participant_id=participant_id, search_term=search_term, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_playbook_runs(_api::PlaybookRunsApi, response_stream::Channel, team_id::String; page=nothing, per_page=nothing, sort=nothing, direction=nothing, statuses=nothing, owner_user_id=nothing, participant_id=nothing, search_term=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_playbook_runs(_api, team_id; page=page, per_page=per_page, sort=sort, direction=direction, statuses=statuses, owner_user_id=owner_user_id, participant_id=participant_id, search_term=search_term, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_reoder_checklist_item_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_reoder_checklist_item(_api::PlaybookRunsApi, id::String, checklist::Int64; reoder_checklist_item_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_reoder_checklist_item_PlaybookRunsApi, "/runs/{id}/checklists/{checklist}/reorder", ["BearerAuth", ], reoder_checklist_item_request)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "checklist", checklist)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Reorder an item in a playbook run's checklist

Params:
- id::String (required)
- checklist::Int64 (required)
- reoder_checklist_item_request::ReoderChecklistItemRequest

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function reoder_checklist_item(_api::PlaybookRunsApi, id::String, checklist::Int64; reoder_checklist_item_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_reoder_checklist_item(_api, id, checklist; reoder_checklist_item_request=reoder_checklist_item_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function reoder_checklist_item(_api::PlaybookRunsApi, response_stream::Channel, id::String, checklist::Int64; reoder_checklist_item_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_reoder_checklist_item(_api, id, checklist; reoder_checklist_item_request=reoder_checklist_item_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_restart_playbook_run_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_restart_playbook_run(_api::PlaybookRunsApi, id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_restart_playbook_run_PlaybookRunsApi, "/runs/{id}/restart", ["BearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Restart a playbook run

Params:
- id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function restart_playbook_run(_api::PlaybookRunsApi, id::String; _mediaType=nothing)
    _ctx = _oacinternal_restart_playbook_run(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function restart_playbook_run(_api::PlaybookRunsApi, response_stream::Channel, id::String; _mediaType=nothing)
    _ctx = _oacinternal_restart_playbook_run(_api, id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_status_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("403", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_status(_api::PlaybookRunsApi, id::String; status_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_status_PlaybookRunsApi, "/runs/{id}/status", ["BearerAuth", ], status_request)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a playbook run's status

Params:
- id::String (required)
- status_request::StatusRequest

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function status(_api::PlaybookRunsApi, id::String; status_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_status(_api, id; status_request=status_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function status(_api::PlaybookRunsApi, response_stream::Channel, id::String; status_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_status(_api, id; status_request=status_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_playbook_run_PlaybookRunsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => Error,
    Regex("^" * replace("500", "x"=>".") * "\$") => Error,
)

function _oacinternal_update_playbook_run(_api::PlaybookRunsApi, id::String; update_playbook_run_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_update_playbook_run_PlaybookRunsApi, "/runs/{id}", ["BearerAuth", ], update_playbook_run_request)
    OpenAPI.Clients.set_param(_ctx.path, "id", id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a playbook run

Params:
- id::String (required)
- update_playbook_run_request::UpdatePlaybookRunRequest

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function update_playbook_run(_api::PlaybookRunsApi, id::String; update_playbook_run_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_playbook_run(_api, id; update_playbook_run_request=update_playbook_run_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_playbook_run(_api::PlaybookRunsApi, response_stream::Channel, id::String; update_playbook_run_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_playbook_run(_api, id; update_playbook_run_request=update_playbook_run_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export add_checklist_item
export change_owner
export create_playbook_run_from_post
export end_playbook_run
export finish
export get_channels
export get_owners
export get_playbook_run
export get_playbook_run_by_channel_id
export get_playbook_run_metadata
export item_delete
export item_rename
export item_run
export item_set_assignee
export item_set_state
export list_playbook_runs
export reoder_checklist_item
export restart_playbook_run
export status
export update_playbook_run
