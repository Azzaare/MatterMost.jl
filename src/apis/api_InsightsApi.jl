# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct InsightsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `InsightsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ InsightsApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_get_new_team_members_InsightsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NewTeamMembersList,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_new_team_members(_api::InsightsApi, team_id::String, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_new_team_members_InsightsApi, "/teams/{team_id}/top/team_members", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "time_range", time_range)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of new team members.

Get a list of all of the new team members that have joined the given team during the given time period. ##### Permissions Must have `view_team` permission for the team. 

Params:
- team_id::String (required)
- time_range::String (required)
- page::Int64
- per_page::Int64

Return: NewTeamMembersList, OpenAPI.Clients.ApiResponse
"""
function get_new_team_members(_api::InsightsApi, team_id::String, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_new_team_members(_api, team_id, time_range; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_new_team_members(_api::InsightsApi, response_stream::Channel, team_id::String, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_new_team_members(_api, team_id, time_range; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_top_channels_for_team_InsightsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TopChannelList,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_top_channels_for_team(_api::InsightsApi, team_id::String, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_top_channels_for_team_InsightsApi, "/teams/{team_id}/top/channels", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "time_range", time_range)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of the top channels for a team.

Get a list of the top public and private channels (the user is a member of) for a given team. ##### Permissions Must have `view_team` permission for the team. 

Params:
- team_id::String (required)
- time_range::String (required)
- page::Int64
- per_page::Int64

Return: TopChannelList, OpenAPI.Clients.ApiResponse
"""
function get_top_channels_for_team(_api::InsightsApi, team_id::String, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_channels_for_team(_api, team_id, time_range; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_top_channels_for_team(_api::InsightsApi, response_stream::Channel, team_id::String, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_channels_for_team(_api, team_id, time_range; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_top_channels_for_user_InsightsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TopChannelList,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_top_channels_for_user(_api::InsightsApi, time_range::String; page=nothing, per_page=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_top_channels_for_user_InsightsApi, "/users/me/top/channels", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "time_range", time_range)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of the top channels for a user.

Get a list of the top public and private channels (the user is a member of) for a given user. ##### Permissions Must be logged in as the user. 

Params:
- time_range::String (required)
- page::Int64
- per_page::Int64
- team_id::String

Return: TopChannelList, OpenAPI.Clients.ApiResponse
"""
function get_top_channels_for_user(_api::InsightsApi, time_range::String; page=nothing, per_page=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_channels_for_user(_api, time_range; page=page, per_page=per_page, team_id=team_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_top_channels_for_user(_api::InsightsApi, response_stream::Channel, time_range::String; page=nothing, per_page=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_channels_for_user(_api, time_range; page=page, per_page=per_page, team_id=team_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_top_d_ms_for_user_InsightsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TopDMList,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_top_d_ms_for_user(_api::InsightsApi, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_top_d_ms_for_user_InsightsApi, "/users/me/top/dms", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "time_range", time_range)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of the top dms for a user.

Get a list of the top dms for a given user. ##### Permissions Must be logged in as the user. 

Params:
- time_range::String (required)
- page::Int64
- per_page::Int64

Return: TopDMList, OpenAPI.Clients.ApiResponse
"""
function get_top_d_ms_for_user(_api::InsightsApi, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_d_ms_for_user(_api, time_range; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_top_d_ms_for_user(_api::InsightsApi, response_stream::Channel, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_d_ms_for_user(_api, time_range; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_top_reactions_for_team_InsightsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TopReactionList,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_top_reactions_for_team(_api::InsightsApi, team_id::String, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_top_reactions_for_team_InsightsApi, "/teams/{team_id}/top/reactions", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "time_range", time_range)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of the top reactions for a team.

Get a list of the top reactions across all public and private channels (the user is a member of) for a given team. ##### Permissions Must have `view_team` permission for the team. 

Params:
- team_id::String (required)
- time_range::String (required)
- page::Int64
- per_page::Int64

Return: TopReactionList, OpenAPI.Clients.ApiResponse
"""
function get_top_reactions_for_team(_api::InsightsApi, team_id::String, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_reactions_for_team(_api, team_id, time_range; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_top_reactions_for_team(_api::InsightsApi, response_stream::Channel, team_id::String, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_reactions_for_team(_api, team_id, time_range; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_top_reactions_for_user_InsightsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TopReactionList,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_top_reactions_for_user(_api::InsightsApi, time_range::String; page=nothing, per_page=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_top_reactions_for_user_InsightsApi, "/users/me/top/reactions", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "time_range", time_range)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of the top reactions for a user.

Get a list of the top reactions across all public and private channels (the user is a member of) for a given user. If no `team_id` is provided, this will also include reactions posted by the given user in direct and group messages. ##### Permissions Must be logged in as the user. 

Params:
- time_range::String (required)
- page::Int64
- per_page::Int64
- team_id::String

Return: TopReactionList, OpenAPI.Clients.ApiResponse
"""
function get_top_reactions_for_user(_api::InsightsApi, time_range::String; page=nothing, per_page=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_reactions_for_user(_api, time_range; page=page, per_page=per_page, team_id=team_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_top_reactions_for_user(_api::InsightsApi, response_stream::Channel, time_range::String; page=nothing, per_page=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_reactions_for_user(_api, time_range; page=page, per_page=per_page, team_id=team_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_top_threads_for_team_InsightsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TopThreadList,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_top_threads_for_team(_api::InsightsApi, team_id::String, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_top_threads_for_team_InsightsApi, "/teams/{team_id}/top/threads", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "time_range", time_range)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of the top threads for a team.

Get a list of the top threads from public and private channels (the user is a member of) for a given team. ##### Permissions Must have `view_team` permission for the team. 

Params:
- team_id::String (required)
- time_range::String (required)
- page::Int64
- per_page::Int64

Return: TopThreadList, OpenAPI.Clients.ApiResponse
"""
function get_top_threads_for_team(_api::InsightsApi, team_id::String, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_threads_for_team(_api, team_id, time_range; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_top_threads_for_team(_api::InsightsApi, response_stream::Channel, team_id::String, time_range::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_threads_for_team(_api, team_id, time_range; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_top_threads_for_user_InsightsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TopThreadList,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_top_threads_for_user(_api::InsightsApi, time_range::String; page=nothing, per_page=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_top_threads_for_user_InsightsApi, "/users/me/top/threads", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "time_range", time_range)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of the top threads for a user.

Get a list of the top threads from public and private channels (the user is a member of and participating in the thread) for a given user. ##### Permissions Must be logged in as the user. 

Params:
- time_range::String (required)
- page::Int64
- per_page::Int64
- team_id::String

Return: TopThreadList, OpenAPI.Clients.ApiResponse
"""
function get_top_threads_for_user(_api::InsightsApi, time_range::String; page=nothing, per_page=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_threads_for_user(_api, time_range; page=page, per_page=per_page, team_id=team_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_top_threads_for_user(_api::InsightsApi, response_stream::Channel, time_range::String; page=nothing, per_page=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_top_threads_for_user(_api, time_range; page=page, per_page=per_page, team_id=team_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_new_team_members
export get_top_channels_for_team
export get_top_channels_for_user
export get_top_d_ms_for_user
export get_top_reactions_for_team
export get_top_reactions_for_user
export get_top_threads_for_team
export get_top_threads_for_user
