# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct SystemApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `SystemApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ SystemApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_check_integrity_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{IntegrityCheckResult},
)

function _oacinternal_check_integrity(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_check_integrity_SystemApi, "/integrity", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Perform a database integrity check

Performs a database integrity check.   __Note__: This check may temporarily harm system performance.   __Minimum server version__: 5.28.0   __Local mode only__: This endpoint is only available through [local mode](https://docs.mattermost.com/administration/mmctl-cli-tool.html#local-mode). 

Params:

Return: Vector{IntegrityCheckResult}, OpenAPI.Clients.ApiResponse
"""
function check_integrity(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_check_integrity(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function check_integrity(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_check_integrity(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_clear_server_busy_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_clear_server_busy(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_clear_server_busy_SystemApi, "/server_busy", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Clears the server busy (high load) flag

Marks the server as not having high load which re-enables non-critical services such as search, statuses and typing notifications.  __Minimum server version__: 5.20  ##### Permissions Must have `manage_system` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function clear_server_busy(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_clear_server_busy(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function clear_server_busy(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_clear_server_busy(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_database_recycle_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_database_recycle(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_database_recycle_SystemApi, "/database/recycle", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Recycle database connections

Recycle database connections by closing and reconnecting all connections to master and read replica databases. ##### Permissions Must have `manage_system` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function database_recycle(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_database_recycle(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function database_recycle(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_database_recycle(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_generate_support_packet_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_generate_support_packet(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_generate_support_packet_SystemApi, "/system/support_packet", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download a zip file which contains helpful and useful information for troubleshooting your mattermost instance.

Download a zip file which contains helpful and useful information for troubleshooting your mattermost instance. __Minimum server version: 5.32__ ##### Permissions Must have any of the system console read permissions. ##### License Requires either a E10 or E20 license. 

Params:

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function generate_support_packet(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_generate_support_packet(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function generate_support_packet(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_generate_support_packet(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_analytics_old_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_analytics_old(_api::SystemApi; name=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_analytics_old_SystemApi, "/analytics/old", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get analytics

Get some analytics data about the system. This endpoint uses the old format, the `/analytics` route is reserved for the new format when it gets implemented.  The returned JSON changes based on the `name` query parameter but is always key/value pairs.  __Minimum server version__: 4.0  ##### Permissions Must have `manage_system` permission. 

Params:
- name::String
- team_id::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_analytics_old(_api::SystemApi; name=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_analytics_old(_api; name=name, team_id=team_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_analytics_old(_api::SystemApi, response_stream::Channel; name=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_analytics_old(_api; name=name, team_id=team_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_audits_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Audit},
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_audits(_api::SystemApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_audits_SystemApi, "/audits", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get audits

Get a page of audits for all users on the system, selected with `page` and `per_page` query parameters. ##### Permissions Must have `manage_system` permission. 

Params:
- page::Int64
- per_page::Int64

Return: Vector{Audit}, OpenAPI.Clients.ApiResponse
"""
function get_audits(_api::SystemApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_audits(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_audits(_api::SystemApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_audits(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_client_config_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_client_config(_api::SystemApi, format::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_client_config_SystemApi, "/config/client", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "format", format)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get client configuration

Get a subset of the server configuration needed by the client. ##### Permissions No permission required. 

Params:
- format::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_client_config(_api::SystemApi, format::String; _mediaType=nothing)
    _ctx = _oacinternal_get_client_config(_api, format; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_client_config(_api::SystemApi, response_stream::Channel, format::String; _mediaType=nothing)
    _ctx = _oacinternal_get_client_config(_api, format; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_client_license_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_client_license(_api::SystemApi, format::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_client_license_SystemApi, "/license/client", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "format", format)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get client license

Get a subset of the server license needed by the client. ##### Permissions No permission required but having the `manage_system` permission returns more information. 

Params:
- format::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_client_license(_api::SystemApi, format::String; _mediaType=nothing)
    _ctx = _oacinternal_get_client_license(_api, format; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_client_license(_api::SystemApi, response_stream::Channel, format::String; _mediaType=nothing)
    _ctx = _oacinternal_get_client_license(_api, format; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_config_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Config,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_config(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_config_SystemApi, "/config", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get configuration

Retrieve the current server configuration ##### Permissions Must have `manage_system` permission. 

Params:

Return: Config, OpenAPI.Clients.ApiResponse
"""
function get_config(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_get_config(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_config(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_config(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_environment_config_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EnvironmentConfig,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_environment_config(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_environment_config_SystemApi, "/config/environment", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get configuration made through environment variables

Retrieve a json object mirroring the server configuration where fields are set to true if the corresponding config setting is set through an environment variable. Settings that haven't been set through environment variables will be missing from the object.  __Minimum server version__: 4.10  ##### Permissions Must have `manage_system` permission. 

Params:

Return: EnvironmentConfig, OpenAPI.Clients.ApiResponse
"""
function get_environment_config(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_get_environment_config(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_environment_config(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_environment_config(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_image_by_url_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_image_by_url(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_image_by_url_SystemApi, "/image", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["image/*", "application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get an image by url

Fetches an image via Mattermost image proxy. __Minimum server version__: 3.10 ##### Permissions Must be logged in. 

Params:

Return: String, OpenAPI.Clients.ApiResponse
"""
function get_image_by_url(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_get_image_by_url(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_image_by_url(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_image_by_url(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_logs_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_logs(_api::SystemApi; page=nothing, logs_per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_logs_SystemApi, "/logs", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "logs_per_page", logs_per_page)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get logs

Get a page of server logs, selected with `page` and `logs_per_page` query parameters. ##### Permissions Must have `manage_system` permission. 

Params:
- page::Int64
- logs_per_page::String

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function get_logs(_api::SystemApi; page=nothing, logs_per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_logs(_api; page=page, logs_per_page=logs_per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_logs(_api::SystemApi, response_stream::Channel; page=nothing, logs_per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_logs(_api; page=page, logs_per_page=logs_per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_notices_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Notice},
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_notices(_api::SystemApi, client_version::String, client::String, team_id::String; locale=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_notices_SystemApi, "/system/notices/{teamId}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "teamId", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "clientVersion", client_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "locale", locale)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "client", client)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get notices for logged in user in specified team

Will return appropriate product notices for current user in the team specified by teamId parameter. __Minimum server version__: 5.26 ##### Permissions Must be logged in. 

Params:
- client_version::String (required)
- client::String (required)
- team_id::String (required)
- locale::String

Return: Vector{Notice}, OpenAPI.Clients.ApiResponse
"""
function get_notices(_api::SystemApi, client_version::String, client::String, team_id::String; locale=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_notices(_api, client_version, client, team_id; locale=locale, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_notices(_api::SystemApi, response_stream::Channel, client_version::String, client::String, team_id::String; locale=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_notices(_api, client_version, client, team_id; locale=locale, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_ping_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SystemStatusResponse,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_ping(_api::SystemApi; get_server_status=nothing, device_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_ping_SystemApi, "/system/ping", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "get_server_status", get_server_status)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "device_id", device_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Check system health

Check if the server is up and healthy based on the configuration setting `GoRoutineHealthThreshold`. If `GoRoutineHealthThreshold` and the number of goroutines on the server exceeds that threshold the server is considered unhealthy. If `GoRoutineHealthThreshold` is not set or the number of goroutines is below the threshold the server is considered healthy. __Minimum server version__: 3.10 If a \"device_id\" is passed in the query, it will test the Push Notification Proxy in order to discover whether the device is able to receive notifications. The response will have a \"CanReceiveNotifications\" property with one of the following values: - true: It can receive notifications - false: It cannot receive notifications - unknown: There has been an unknown error, and it is not certain whether it can   receive notifications.  __Minimum server version__: 6.5 ##### Permissions None. 

Params:
- get_server_status::Bool
- device_id::String

Return: SystemStatusResponse, OpenAPI.Clients.ApiResponse
"""
function get_ping(_api::SystemApi; get_server_status=nothing, device_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_ping(_api; get_server_status=get_server_status, device_id=device_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_ping(_api::SystemApi, response_stream::Channel; get_server_status=nothing, device_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_ping(_api; get_server_status=get_server_status, device_id=device_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_prev_trial_license_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_prev_trial_license(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_prev_trial_license_SystemApi, "/trial-license/prev", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get last trial license used

Get the last trial license used on the sevrer __Minimum server version__: 5.36 ##### Permissions Must have `manage_systems` permissions. 

Params:

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_prev_trial_license(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_get_prev_trial_license(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_prev_trial_license(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_prev_trial_license(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_redirect_location_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetRedirectLocation200Response,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_redirect_location(_api::SystemApi, url::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_redirect_location_SystemApi, "/redirect_location", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "url", url)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["image/*", "application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get redirect location

__Minimum server version__: 3.10 ##### Permissions Must be logged in. 

Params:
- url::String (required)

Return: GetRedirectLocation200Response, OpenAPI.Clients.ApiResponse
"""
function get_redirect_location(_api::SystemApi, url::String; _mediaType=nothing)
    _ctx = _oacinternal_get_redirect_location(_api, url; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_redirect_location(_api::SystemApi, response_stream::Channel, url::String; _mediaType=nothing)
    _ctx = _oacinternal_get_redirect_location(_api, url; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_server_busy_expires_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ServerBusy,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_server_busy_expires(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_server_busy_expires_SystemApi, "/server_busy", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get server busy expiry time.

Gets the timestamp corresponding to when the server busy flag will be automatically cleared.  __Minimum server version__: 5.20  ##### Permissions Must have `manage_system` permission. 

Params:

Return: ServerBusy, OpenAPI.Clients.ApiResponse
"""
function get_server_busy_expires(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_get_server_busy_expires(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_server_busy_expires(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_server_busy_expires(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_supported_timezone_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_supported_timezone(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_supported_timezone_SystemApi, "/system/timezones", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieve a list of supported timezones

__Minimum server version__: 3.10 ##### Permissions Must be logged in. 

Params:

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function get_supported_timezone(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_get_supported_timezone(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_supported_timezone(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_supported_timezone(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_warn_metrics_status_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_warn_metrics_status(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_warn_metrics_status_SystemApi, "/warn_metrics/status", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the warn metrics status (enabled or disabled)

Get the status of a set of metrics (enabled or disabled) from the Systems table.  The returned JSON contains the metrics that we need to warn the admin on with regard to their status (we return the ones whose status is \"true\", which means that they are in a \"warnable\" state - e.g. a threshold has been crossed or some other condition has been fulfilled).  __Minimum server version__: 5.26  ##### Permissions  Must have `manage_system` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function get_warn_metrics_status(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_get_warn_metrics_status(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_warn_metrics_status(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_warn_metrics_status(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_invalidate_caches_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_invalidate_caches(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_invalidate_caches_SystemApi, "/caches/invalidate", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Invalidate all the caches

Purge all the in-memory caches for the Mattermost server. This can have a temporary negative effect on performance while the caches are re-populated. ##### Permissions Must have `manage_system` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function invalidate_caches(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_invalidate_caches(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function invalidate_caches(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_invalidate_caches(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_mark_notices_viewed_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
)

function _oacinternal_mark_notices_viewed(_api::SystemApi, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_mark_notices_viewed_SystemApi, "/system/notices/view", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update notices as 'viewed'

Will mark the specified notices as 'viewed' by the logged in user. __Minimum server version__: 5.26 ##### Permissions Must be logged in. 

Params:
- request_body::Vector{String} (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function mark_notices_viewed(_api::SystemApi, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_mark_notices_viewed(_api, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function mark_notices_viewed(_api::SystemApi, response_stream::Channel, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_mark_notices_viewed(_api, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_config_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Config,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_patch_config(_api::SystemApi, config::Config; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_patch_config_SystemApi, "/config/patch", ["bearerAuth", ], config)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Patch configuration

Submit configuration to patch. As of server version 4.8, the `PluginSettings.EnableUploads` setting cannot be modified by this endpoint. ##### Permissions Must have `manage_system` permission. __Minimum server version__: 5.20 ##### Note The Plugins are stored as a map, and since a map may recursively go  down to any depth, individual fields of a map are not changed.  Consider using the `update config` (PUT api/v4/config) endpoint to update a plugins configurations. 

Params:
- config::Config (required)

Return: Config, OpenAPI.Clients.ApiResponse
"""
function patch_config(_api::SystemApi, config::Config; _mediaType=nothing)
    _ctx = _oacinternal_patch_config(_api, config; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_config(_api::SystemApi, response_stream::Channel, config::Config; _mediaType=nothing)
    _ctx = _oacinternal_patch_config(_api, config; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_post_log_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_post_log(_api::SystemApi, post_log_request::PostLogRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_post_log_SystemApi, "/logs", ["bearerAuth", ], post_log_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add log message

Add log messages to the server logs. ##### Permissions Users with `manage_system` permission can log ERROR or DEBUG messages. Logged in users can log ERROR or DEBUG messages when `ServiceSettings.EnableDeveloper` is `true` or just DEBUG messages when `false`. Non-logged in users can log ERROR or DEBUG messages when `ServiceSettings.EnableDeveloper` is `true` and cannot log when `false`. 

Params:
- post_log_request::PostLogRequest (required)

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function post_log(_api::SystemApi, post_log_request::PostLogRequest; _mediaType=nothing)
    _ctx = _oacinternal_post_log(_api, post_log_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function post_log(_api::SystemApi, response_stream::Channel, post_log_request::PostLogRequest; _mediaType=nothing)
    _ctx = _oacinternal_post_log(_api, post_log_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_reload_config_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_reload_config(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_reload_config_SystemApi, "/config/reload", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Reload configuration

Reload the configuration file to pick up on any changes made to it. ##### Permissions Must have `manage_system` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function reload_config(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_reload_config(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function reload_config(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_reload_config(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_remove_license_file_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_remove_license_file(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_remove_license_file_SystemApi, "/license", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Remove license file

Remove the license file from the server. This will disable all enterprise features.  __Minimum server version__: 4.0  ##### Permissions Must have `manage_system` permission. 

Params:

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function remove_license_file(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_remove_license_file(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function remove_license_file(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_remove_license_file(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_request_license_renewal_link_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LicenseRenewalLink,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
)

function _oacinternal_request_license_renewal_link(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_request_license_renewal_link_SystemApi, "/license/renewal", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Request the license renewal link

Request the renewal link that would be used to start the license renewal process __Minimum server version__: 5.32 ##### Permissions Must have `sysconsole_write_about` permission. 

Params:

Return: LicenseRenewalLink, OpenAPI.Clients.ApiResponse
"""
function request_license_renewal_link(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_request_license_renewal_link(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function request_license_renewal_link(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_request_license_renewal_link(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_request_trial_license_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_request_trial_license(_api::SystemApi, request_trial_license_request::RequestTrialLicenseRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_request_trial_license_SystemApi, "/trial-license", ["bearerAuth", ], request_trial_license_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Request and install a trial license for your server

Request and install a trial license for your server __Minimum server version__: 5.25 ##### Permissions Must have `manage_system` permission. 

Params:
- request_trial_license_request::RequestTrialLicenseRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function request_trial_license(_api::SystemApi, request_trial_license_request::RequestTrialLicenseRequest; _mediaType=nothing)
    _ctx = _oacinternal_request_trial_license(_api, request_trial_license_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function request_trial_license(_api::SystemApi, response_stream::Channel, request_trial_license_request::RequestTrialLicenseRequest; _mediaType=nothing)
    _ctx = _oacinternal_request_trial_license(_api, request_trial_license_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_restart_server_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_restart_server(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_restart_server_SystemApi, "/restart", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Restart the system after an upgrade from Team Edition to Enterprise Edition

It restarts the current running mattermost instance to execute the new Enterprise binary. __Minimum server version__: 5.27 ##### Permissions Must have `manage_system` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function restart_server(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_restart_server(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function restart_server(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_restart_server(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_send_trial_license_warn_metric_ack_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_send_trial_license_warn_metric_ack(_api::SystemApi, warn_metric_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_send_trial_license_warn_metric_ack_SystemApi, "/warn_metrics/trial-license-ack/{warn_metric_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "warn_metric_id", warn_metric_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Request trial license and acknowledge a warning of a metric status

Request a trial license and acknowledge a warning for the warn_metric_id metric crossing a threshold (or some similar condition being fulfilled) - sets the \"ack\" status for all the warn metrics in the system.  __Minimum server version__: 5.28  ##### Permissions  Must have `manage_system` permission. 

Params:
- warn_metric_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function send_trial_license_warn_metric_ack(_api::SystemApi, warn_metric_id::String; _mediaType=nothing)
    _ctx = _oacinternal_send_trial_license_warn_metric_ack(_api, warn_metric_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function send_trial_license_warn_metric_ack(_api::SystemApi, response_stream::Channel, warn_metric_id::String; _mediaType=nothing)
    _ctx = _oacinternal_send_trial_license_warn_metric_ack(_api, warn_metric_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_send_warn_metric_ack_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_send_warn_metric_ack(_api::SystemApi, warn_metric_id::String, send_warn_metric_ack_request::SendWarnMetricAckRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_send_warn_metric_ack_SystemApi, "/warn_metrics/ack/{warn_metric_id}", ["bearerAuth", ], send_warn_metric_ack_request)
    OpenAPI.Clients.set_param(_ctx.path, "warn_metric_id", warn_metric_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Acknowledge a warning of a metric status

Acknowledge a warning for the warn_metric_id metric crossing a threshold (or some similar condition being fulfilled) - attempts to send an ack email to acknowledge@mattermost.com and sets the \"ack\" status for all the warn metrics in the system.  __Minimum server version__: 5.26  ##### Permissions  Must have `manage_system` permission. 

Params:
- warn_metric_id::String (required)
- send_warn_metric_ack_request::SendWarnMetricAckRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function send_warn_metric_ack(_api::SystemApi, warn_metric_id::String, send_warn_metric_ack_request::SendWarnMetricAckRequest; _mediaType=nothing)
    _ctx = _oacinternal_send_warn_metric_ack(_api, warn_metric_id, send_warn_metric_ack_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function send_warn_metric_ack(_api::SystemApi, response_stream::Channel, warn_metric_id::String, send_warn_metric_ack_request::SendWarnMetricAckRequest; _mediaType=nothing)
    _ctx = _oacinternal_send_warn_metric_ack(_api, warn_metric_id, send_warn_metric_ack_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_set_server_busy_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_set_server_busy(_api::SystemApi; seconds=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_set_server_busy_SystemApi, "/server_busy", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "seconds", seconds)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Set the server busy (high load) flag

Marks the server as currently having high load which disables non-critical services such as search, statuses and typing notifications.  __Minimum server version__: 5.20  ##### Permissions Must have `manage_system` permission. 

Params:
- seconds::String

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function set_server_busy(_api::SystemApi; seconds=nothing, _mediaType=nothing)
    _ctx = _oacinternal_set_server_busy(_api; seconds=seconds, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function set_server_busy(_api::SystemApi, response_stream::Channel; seconds=nothing, _mediaType=nothing)
    _ctx = _oacinternal_set_server_busy(_api; seconds=seconds, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_test_email_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
)

function _oacinternal_test_email(_api::SystemApi, config::Config; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_test_email_SystemApi, "/email/test", ["bearerAuth", ], config)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Send a test email

Send a test email to make sure you have your email settings configured correctly. Optionally provide a configuration in the request body to test. If no valid configuration is present in the request body the current server configuration will be tested. ##### Permissions Must have `manage_system` permission. 

Params:
- config::Config (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function test_email(_api::SystemApi, config::Config; _mediaType=nothing)
    _ctx = _oacinternal_test_email(_api, config; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function test_email(_api::SystemApi, response_stream::Channel, config::Config; _mediaType=nothing)
    _ctx = _oacinternal_test_email(_api, config; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_test_s3_connection_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
)

function _oacinternal_test_s3_connection(_api::SystemApi, config::Config; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_test_s3_connection_SystemApi, "/file/s3_test", ["bearerAuth", ], config)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Test AWS S3 connection

Send a test to validate if can connect to AWS S3. Optionally provide a configuration in the request body to test. If no valid configuration is present in the request body the current server configuration will be tested. ##### Permissions Must have `manage_system` permission. __Minimum server version__: 4.8 

Params:
- config::Config (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function test_s3_connection(_api::SystemApi, config::Config; _mediaType=nothing)
    _ctx = _oacinternal_test_s3_connection(_api, config; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function test_s3_connection(_api::SystemApi, response_stream::Channel, config::Config; _mediaType=nothing)
    _ctx = _oacinternal_test_s3_connection(_api, config; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_test_site_u_r_l_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
)

function _oacinternal_test_site_u_r_l(_api::SystemApi, test_site_u_r_l_request::TestSiteURLRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_test_site_u_r_l_SystemApi, "/site_url/test", ["bearerAuth", ], test_site_u_r_l_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Checks the validity of a Site URL

Sends a Ping request to the mattermost server using the specified Site URL.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.16 

Params:
- test_site_u_r_l_request::TestSiteURLRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function test_site_u_r_l(_api::SystemApi, test_site_u_r_l_request::TestSiteURLRequest; _mediaType=nothing)
    _ctx = _oacinternal_test_site_u_r_l(_api, test_site_u_r_l_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function test_site_u_r_l(_api::SystemApi, response_stream::Channel, test_site_u_r_l_request::TestSiteURLRequest; _mediaType=nothing)
    _ctx = _oacinternal_test_site_u_r_l(_api, test_site_u_r_l_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_config_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Config,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_config(_api::SystemApi, config::Config; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_config_SystemApi, "/config", ["bearerAuth", ], config)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update configuration

Submit a new configuration for the server to use. As of server version 4.8, the `PluginSettings.EnableUploads` setting cannot be modified by this endpoint. Note that the parameters that aren't set in the configuration that you provide will be reset to default values. Therefore, if you want to change a configuration parameter and leave the other ones unchanged, you need to get the existing configuration first, change the field that you want, then put that new configuration. ##### Permissions Must have `manage_system` permission. 

Params:
- config::Config (required)

Return: Config, OpenAPI.Clients.ApiResponse
"""
function update_config(_api::SystemApi, config::Config; _mediaType=nothing)
    _ctx = _oacinternal_update_config(_api, config; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_config(_api::SystemApi, response_stream::Channel, config::Config; _mediaType=nothing)
    _ctx = _oacinternal_update_config(_api, config; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_marketplace_visited_by_admin_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_marketplace_visited_by_admin(_api::SystemApi, system::System; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_marketplace_visited_by_admin_SystemApi, "/plugins/marketplace/first_admin_visit", ["bearerAuth", ], system)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Stores that the Plugin Marketplace has been visited by at least an admin.

Stores the system-level status that specifies that at least an admin has visited the in-product Plugin Marketplace. __Minimum server version: 5.33__ ##### Permissions Must have `manage_system` permissions. 

Params:
- system::System (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function update_marketplace_visited_by_admin(_api::SystemApi, system::System; _mediaType=nothing)
    _ctx = _oacinternal_update_marketplace_visited_by_admin(_api, system; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_marketplace_visited_by_admin(_api::SystemApi, response_stream::Channel, system::System; _mediaType=nothing)
    _ctx = _oacinternal_update_marketplace_visited_by_admin(_api, system; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upgrade_to_enterprise_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => PushNotification,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("429", "x"=>".") * "\$") => AppError,
)

function _oacinternal_upgrade_to_enterprise(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upgrade_to_enterprise_SystemApi, "/upgrade_to_enterprise", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Executes an inplace upgrade from Team Edition to Enterprise Edition

It downloads the Mattermost Enterprise Edition of your current version and replace your current version with it. After the upgrade you need to restart the Mattermost server. __Minimum server version__: 5.27 ##### Permissions Must have `manage_system` permission. 

Params:

Return: PushNotification, OpenAPI.Clients.ApiResponse
"""
function upgrade_to_enterprise(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_upgrade_to_enterprise(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upgrade_to_enterprise(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_upgrade_to_enterprise(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upgrade_to_enterprise_status_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UpgradeToEnterpriseStatus200Response,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_upgrade_to_enterprise_status(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_upgrade_to_enterprise_status_SystemApi, "/upgrade_to_enterprise/status", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the current status for the inplace upgrade from Team Edition to Enterprise Edition

It returns the percentage of completion of the current upgrade or the error if there is any. __Minimum server version__: 5.27 ##### Permissions Must have `manage_system` permission. 

Params:

Return: UpgradeToEnterpriseStatus200Response, OpenAPI.Clients.ApiResponse
"""
function upgrade_to_enterprise_status(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_upgrade_to_enterprise_status(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upgrade_to_enterprise_status(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_upgrade_to_enterprise_status(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_license_file_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("413", "x"=>".") * "\$") => AppError,
)

function _oacinternal_upload_license_file(_api::SystemApi, license::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upload_license_file_SystemApi, "/license", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "license", license)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload license file

Upload a license to enable enterprise features.  __Minimum server version__: 4.0  ##### Permissions Must have `manage_system` permission. 

Params:
- license::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function upload_license_file(_api::SystemApi, license::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_license_file(_api, license; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_license_file(_api::SystemApi, response_stream::Channel, license::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_license_file(_api, license; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export check_integrity
export clear_server_busy
export database_recycle
export generate_support_packet
export get_analytics_old
export get_audits
export get_client_config
export get_client_license
export get_config
export get_environment_config
export get_image_by_url
export get_logs
export get_notices
export get_ping
export get_prev_trial_license
export get_redirect_location
export get_server_busy_expires
export get_supported_timezone
export get_warn_metrics_status
export invalidate_caches
export mark_notices_viewed
export patch_config
export post_log
export reload_config
export remove_license_file
export request_license_renewal_link
export request_trial_license
export restart_server
export send_trial_license_warn_metric_ack
export send_warn_metric_ack
export set_server_busy
export test_email
export test_s3_connection
export test_site_u_r_l
export update_config
export update_marketplace_visited_by_admin
export upgrade_to_enterprise
export upgrade_to_enterprise_status
export upload_license_file
