# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct TermsOfServiceApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `TermsOfServiceApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ TermsOfServiceApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_create_terms_of_service_TermsOfServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TermsOfService,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_terms_of_service(_api::TermsOfServiceApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_terms_of_service_TermsOfServiceApi, "/terms_of_service", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Creates a new terms of service

Creates new terms of service  __Minimum server version__: 5.4 ##### Permissions Must have `manage_system` permission. 

Params:

Return: TermsOfService, OpenAPI.Clients.ApiResponse
"""
function create_terms_of_service(_api::TermsOfServiceApi; _mediaType=nothing)
    _ctx = _oacinternal_create_terms_of_service(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_terms_of_service(_api::TermsOfServiceApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_create_terms_of_service(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_terms_of_service_TermsOfServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TermsOfService,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_terms_of_service(_api::TermsOfServiceApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_terms_of_service_TermsOfServiceApi, "/terms_of_service", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get latest terms of service

Get latest terms of service from the server  __Minimum server version__: 5.4 ##### Permissions Must be authenticated. 

Params:

Return: TermsOfService, OpenAPI.Clients.ApiResponse
"""
function get_terms_of_service(_api::TermsOfServiceApi; _mediaType=nothing)
    _ctx = _oacinternal_get_terms_of_service(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_terms_of_service(_api::TermsOfServiceApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_terms_of_service(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_user_terms_of_service_TermsOfServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UserTermsOfService,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_user_terms_of_service(_api::TermsOfServiceApi, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_user_terms_of_service_TermsOfServiceApi, "/users/{user_id}/terms_of_service", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Fetches user's latest terms of service action if the latest action was for acceptance.

Will be deprecated in v6.0 Fetches user's latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 

Params:
- user_id::String (required)

Return: UserTermsOfService, OpenAPI.Clients.ApiResponse
"""
function get_user_terms_of_service(_api::TermsOfServiceApi, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_user_terms_of_service(_api, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_user_terms_of_service(_api::TermsOfServiceApi, response_stream::Channel, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_user_terms_of_service(_api, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_register_terms_of_service_action_TermsOfServiceApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_register_terms_of_service_action(_api::TermsOfServiceApi, user_id::String, register_terms_of_service_action_request::RegisterTermsOfServiceActionRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_register_terms_of_service_action_TermsOfServiceApi, "/users/{user_id}/terms_of_service", ["bearerAuth", ], register_terms_of_service_action_request)
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Records user action when they accept or decline custom terms of service

Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user's last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 

Params:
- user_id::String (required)
- register_terms_of_service_action_request::RegisterTermsOfServiceActionRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function register_terms_of_service_action(_api::TermsOfServiceApi, user_id::String, register_terms_of_service_action_request::RegisterTermsOfServiceActionRequest; _mediaType=nothing)
    _ctx = _oacinternal_register_terms_of_service_action(_api, user_id, register_terms_of_service_action_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function register_terms_of_service_action(_api::TermsOfServiceApi, response_stream::Channel, user_id::String, register_terms_of_service_action_request::RegisterTermsOfServiceActionRequest; _mediaType=nothing)
    _ctx = _oacinternal_register_terms_of_service_action(_api, user_id, register_terms_of_service_action_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_terms_of_service
export get_terms_of_service
export get_user_terms_of_service
export register_terms_of_service_action
