# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct EmojiApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `EmojiApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ EmojiApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_autocomplete_emoji_EmojiApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Emoji,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_autocomplete_emoji(_api::EmojiApi, name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_autocomplete_emoji_EmojiApi, "/emoji/autocomplete", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "name", name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Autocomplete custom emoji

Get a list of custom emoji with names starting with or matching the provided name. Returns a maximum of 100 results. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 

Params:
- name::String (required)

Return: Emoji, OpenAPI.Clients.ApiResponse
"""
function autocomplete_emoji(_api::EmojiApi, name::String; _mediaType=nothing)
    _ctx = _oacinternal_autocomplete_emoji(_api, name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function autocomplete_emoji(_api::EmojiApi, response_stream::Channel, name::String; _mediaType=nothing)
    _ctx = _oacinternal_autocomplete_emoji(_api, name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_emoji_EmojiApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Emoji,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("413", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_emoji(_api::EmojiApi, image::String, emoji::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_emoji_EmojiApi, "/emoji", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "image", image)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "emoji", emoji)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a custom emoji

Create a custom emoji for the team. ##### Permissions Must be authenticated. 

Params:
- image::String (required)
- emoji::String (required)

Return: Emoji, OpenAPI.Clients.ApiResponse
"""
function create_emoji(_api::EmojiApi, image::String, emoji::String; _mediaType=nothing)
    _ctx = _oacinternal_create_emoji(_api, image, emoji; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_emoji(_api::EmojiApi, response_stream::Channel, image::String, emoji::String; _mediaType=nothing)
    _ctx = _oacinternal_create_emoji(_api, image, emoji; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_emoji_EmojiApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Emoji,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_emoji(_api::EmojiApi, emoji_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_emoji_EmojiApi, "/emoji/{emoji_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "emoji_id", emoji_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a custom emoji

Delete a custom emoji. ##### Permissions Must have the `manage_team` or `manage_system` permissions or be the user who created the emoji. 

Params:
- emoji_id::String (required)

Return: Emoji, OpenAPI.Clients.ApiResponse
"""
function delete_emoji(_api::EmojiApi, emoji_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_emoji(_api, emoji_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_emoji(_api::EmojiApi, response_stream::Channel, emoji_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_emoji(_api, emoji_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_emoji_EmojiApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Emoji,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_emoji(_api::EmojiApi, emoji_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_emoji_EmojiApi, "/emoji/{emoji_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "emoji_id", emoji_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a custom emoji

Get some metadata for a custom emoji. ##### Permissions Must be authenticated. 

Params:
- emoji_id::String (required)

Return: Emoji, OpenAPI.Clients.ApiResponse
"""
function get_emoji(_api::EmojiApi, emoji_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_emoji(_api, emoji_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_emoji(_api::EmojiApi, response_stream::Channel, emoji_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_emoji(_api, emoji_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_emoji_by_name_EmojiApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Emoji,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_emoji_by_name(_api::EmojiApi, emoji_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_emoji_by_name_EmojiApi, "/emoji/name/{emoji_name}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "emoji_name", emoji_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a custom emoji by name

Get some metadata for a custom emoji using its name. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 

Params:
- emoji_name::String (required)

Return: Emoji, OpenAPI.Clients.ApiResponse
"""
function get_emoji_by_name(_api::EmojiApi, emoji_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_emoji_by_name(_api, emoji_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_emoji_by_name(_api::EmojiApi, response_stream::Channel, emoji_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_emoji_by_name(_api, emoji_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_emoji_image_EmojiApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_emoji_image(_api::EmojiApi, emoji_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_emoji_image_EmojiApi, "/emoji/{emoji_id}/image", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "emoji_id", emoji_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get custom emoji image

Get the image for a custom emoji. ##### Permissions Must be authenticated. 

Params:
- emoji_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function get_emoji_image(_api::EmojiApi, emoji_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_emoji_image(_api, emoji_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_emoji_image(_api::EmojiApi, response_stream::Channel, emoji_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_emoji_image(_api, emoji_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_emoji_list_EmojiApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Emoji,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_emoji_list(_api::EmojiApi; page=nothing, per_page=nothing, sort=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_emoji_list_EmojiApi, "/emoji", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "sort", sort)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of custom emoji

Get a page of metadata for custom emoji on the system. Since server version 4.7, sort using the `sort` query parameter. ##### Permissions Must be authenticated. 

Params:
- page::Int64
- per_page::Int64
- sort::String

Return: Emoji, OpenAPI.Clients.ApiResponse
"""
function get_emoji_list(_api::EmojiApi; page=nothing, per_page=nothing, sort=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_emoji_list(_api; page=page, per_page=per_page, sort=sort, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_emoji_list(_api::EmojiApi, response_stream::Channel; page=nothing, per_page=nothing, sort=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_emoji_list(_api; page=page, per_page=per_page, sort=sort, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_emoji_EmojiApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Emoji},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_search_emoji(_api::EmojiApi, search_emoji_request::SearchEmojiRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_emoji_EmojiApi, "/emoji/search", ["bearerAuth", ], search_emoji_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search custom emoji

Search for custom emoji by name based on search criteria provided in the request body. A maximum of 200 results are returned. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 

Params:
- search_emoji_request::SearchEmojiRequest (required)

Return: Vector{Emoji}, OpenAPI.Clients.ApiResponse
"""
function search_emoji(_api::EmojiApi, search_emoji_request::SearchEmojiRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_emoji(_api, search_emoji_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_emoji(_api::EmojiApi, response_stream::Channel, search_emoji_request::SearchEmojiRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_emoji(_api, search_emoji_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export autocomplete_emoji
export create_emoji
export delete_emoji
export get_emoji
export get_emoji_by_name
export get_emoji_image
export get_emoji_list
export search_emoji
