# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct JobsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `JobsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ JobsApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_cancel_job_JobsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_cancel_job(_api::JobsApi, job_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_cancel_job_JobsApi, "/jobs/{job_id}/cancel", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "job_id", job_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Cancel a job.

Cancel a job. __Minimum server version: 4.1__ ##### Permissions Must have `manage_jobs` permission. 

Params:
- job_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function cancel_job(_api::JobsApi, job_id::String; _mediaType=nothing)
    _ctx = _oacinternal_cancel_job(_api, job_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cancel_job(_api::JobsApi, response_stream::Channel, job_id::String; _mediaType=nothing)
    _ctx = _oacinternal_cancel_job(_api, job_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_job_JobsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Job,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_job(_api::JobsApi, create_job_request::CreateJobRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_job_JobsApi, "/jobs", ["bearerAuth", ], create_job_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a new job.

Create a new job. __Minimum server version: 4.1__ ##### Permissions Must have `manage_jobs` permission. 

Params:
- create_job_request::CreateJobRequest (required)

Return: Job, OpenAPI.Clients.ApiResponse
"""
function create_job(_api::JobsApi, create_job_request::CreateJobRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_job(_api, create_job_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_job(_api::JobsApi, response_stream::Channel, create_job_request::CreateJobRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_job(_api, create_job_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_download_job_JobsApi = Dict{Regex,Type}(
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_download_job(_api::JobsApi, job_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_download_job_JobsApi, "/jobs/{job_id}/download", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "job_id", job_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download the results of a job.

Download the result of a single job. __Minimum server version: 5.28__ ##### Permissions Must have `manage_jobs` permission. 

Params:
- job_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function download_job(_api::JobsApi, job_id::String; _mediaType=nothing)
    _ctx = _oacinternal_download_job(_api, job_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function download_job(_api::JobsApi, response_stream::Channel, job_id::String; _mediaType=nothing)
    _ctx = _oacinternal_download_job(_api, job_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_job_JobsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Job,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_job(_api::JobsApi, job_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_job_JobsApi, "/jobs/{job_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "job_id", job_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a job.

Gets a single job. __Minimum server version: 4.1__ ##### Permissions Must have `manage_jobs` permission. 

Params:
- job_id::String (required)

Return: Job, OpenAPI.Clients.ApiResponse
"""
function get_job(_api::JobsApi, job_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_job(_api, job_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_job(_api::JobsApi, response_stream::Channel, job_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_job(_api, job_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_jobs_JobsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Job},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_jobs(_api::JobsApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_jobs_JobsApi, "/jobs", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the jobs.

Get a page of jobs. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have `manage_jobs` permission. 

Params:
- page::Int64
- per_page::Int64

Return: Vector{Job}, OpenAPI.Clients.ApiResponse
"""
function get_jobs(_api::JobsApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_jobs(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_jobs(_api::JobsApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_jobs(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_jobs_by_type_JobsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Job},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_jobs_by_type(_api::JobsApi, type::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_jobs_by_type_JobsApi, "/jobs/type/{type}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "type", type)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the jobs of the given type.

Get a page of jobs of the given type. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have `manage_jobs` permission. 

Params:
- type::String (required)
- page::Int64
- per_page::Int64

Return: Vector{Job}, OpenAPI.Clients.ApiResponse
"""
function get_jobs_by_type(_api::JobsApi, type::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_jobs_by_type(_api, type; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_jobs_by_type(_api::JobsApi, response_stream::Channel, type::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_jobs_by_type(_api, type; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export cancel_job
export create_job
export download_job
export get_job
export get_jobs
export get_jobs_by_type
