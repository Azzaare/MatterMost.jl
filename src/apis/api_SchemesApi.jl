# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct SchemesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `SchemesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ SchemesApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_create_scheme_SchemesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Scheme,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_scheme(_api::SchemesApi, create_scheme_request::CreateSchemeRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_scheme_SchemesApi, "/schemes", ["bearerAuth", ], create_scheme_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a scheme

Create a new scheme.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.0 

Params:
- create_scheme_request::CreateSchemeRequest (required)

Return: Scheme, OpenAPI.Clients.ApiResponse
"""
function create_scheme(_api::SchemesApi, create_scheme_request::CreateSchemeRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_scheme(_api, create_scheme_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_scheme(_api::SchemesApi, response_stream::Channel, create_scheme_request::CreateSchemeRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_scheme(_api, create_scheme_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_scheme_SchemesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_scheme(_api::SchemesApi, scheme_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_scheme_SchemesApi, "/schemes/{scheme_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "scheme_id", scheme_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a scheme

Soft deletes a scheme, by marking the scheme as deleted in the database.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.0 

Params:
- scheme_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_scheme(_api::SchemesApi, scheme_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_scheme(_api, scheme_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_scheme(_api::SchemesApi, response_stream::Channel, scheme_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_scheme(_api, scheme_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channels_for_scheme_SchemesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Channel},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channels_for_scheme(_api::SchemesApi, scheme_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channels_for_scheme_SchemesApi, "/schemes/{scheme_id}/channels", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "scheme_id", scheme_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a page of channels which use this scheme.

Get a page of channels which use this scheme. The provided Scheme ID should be for a Channel-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions `manage_system` permission is required.  __Minimum server version__: 5.0 

Params:
- scheme_id::String (required)
- page::Int64
- per_page::Int64

Return: Vector{Channel}, OpenAPI.Clients.ApiResponse
"""
function get_channels_for_scheme(_api::SchemesApi, scheme_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channels_for_scheme(_api, scheme_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channels_for_scheme(_api::SchemesApi, response_stream::Channel, scheme_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channels_for_scheme(_api, scheme_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_scheme_SchemesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Scheme,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_scheme(_api::SchemesApi, scheme_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_scheme_SchemesApi, "/schemes/{scheme_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "scheme_id", scheme_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a scheme

Get a scheme from the provided scheme id.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.0 

Params:
- scheme_id::String (required)

Return: Scheme, OpenAPI.Clients.ApiResponse
"""
function get_scheme(_api::SchemesApi, scheme_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_scheme(_api, scheme_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_scheme(_api::SchemesApi, response_stream::Channel, scheme_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_scheme(_api, scheme_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_schemes_SchemesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Scheme},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_schemes(_api::SchemesApi; scope=nothing, page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_schemes_SchemesApi, "/schemes", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the schemes.

Get a page of schemes. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.0 

Params:
- scope::String
- page::Int64
- per_page::Int64

Return: Vector{Scheme}, OpenAPI.Clients.ApiResponse
"""
function get_schemes(_api::SchemesApi; scope=nothing, page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_schemes(_api; scope=scope, page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_schemes(_api::SchemesApi, response_stream::Channel; scope=nothing, page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_schemes(_api; scope=scope, page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_teams_for_scheme_SchemesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Team},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_teams_for_scheme(_api::SchemesApi, scheme_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_teams_for_scheme_SchemesApi, "/schemes/{scheme_id}/teams", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "scheme_id", scheme_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a page of teams which use this scheme.

Get a page of teams which use this scheme. The provided Scheme ID should be for a Team-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions `manage_system` permission is required.  __Minimum server version__: 5.0 

Params:
- scheme_id::String (required)
- page::Int64
- per_page::Int64

Return: Vector{Team}, OpenAPI.Clients.ApiResponse
"""
function get_teams_for_scheme(_api::SchemesApi, scheme_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_teams_for_scheme(_api, scheme_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_teams_for_scheme(_api::SchemesApi, response_stream::Channel, scheme_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_teams_for_scheme(_api, scheme_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_scheme_SchemesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Scheme,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_patch_scheme(_api::SchemesApi, scheme_id::String, patch_scheme_request::PatchSchemeRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_patch_scheme_SchemesApi, "/schemes/{scheme_id}/patch", ["bearerAuth", ], patch_scheme_request)
    OpenAPI.Clients.set_param(_ctx.path, "scheme_id", scheme_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Patch a scheme

Partially update a scheme by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions `manage_system` permission is required.  __Minimum server version__: 5.0 

Params:
- scheme_id::String (required)
- patch_scheme_request::PatchSchemeRequest (required)

Return: Scheme, OpenAPI.Clients.ApiResponse
"""
function patch_scheme(_api::SchemesApi, scheme_id::String, patch_scheme_request::PatchSchemeRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_scheme(_api, scheme_id, patch_scheme_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_scheme(_api::SchemesApi, response_stream::Channel, scheme_id::String, patch_scheme_request::PatchSchemeRequest; _mediaType=nothing)
    _ctx = _oacinternal_patch_scheme(_api, scheme_id, patch_scheme_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_scheme
export delete_scheme
export get_channels_for_scheme
export get_scheme
export get_schemes
export get_teams_for_scheme
export patch_scheme
