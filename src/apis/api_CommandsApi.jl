# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct CommandsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `CommandsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ CommandsApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_create_command_CommandsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Command,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_command(_api::CommandsApi, create_command_request::CreateCommandRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_command_CommandsApi, "/commands", ["bearerAuth", ], create_command_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a command

Create a command for a team. ##### Permissions `manage_slash_commands` for the team the command is in. 

Params:
- create_command_request::CreateCommandRequest (required)

Return: Command, OpenAPI.Clients.ApiResponse
"""
function create_command(_api::CommandsApi, create_command_request::CreateCommandRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_command(_api, create_command_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_command(_api::CommandsApi, response_stream::Channel, create_command_request::CreateCommandRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_command(_api, create_command_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_command_CommandsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_command(_api::CommandsApi, command_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_command_CommandsApi, "/commands/{command_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "command_id", command_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a command

Delete a command based on command id string. ##### Permissions Must have `manage_slash_commands` permission for the team the command is in. 

Params:
- command_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_command(_api::CommandsApi, command_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_command(_api, command_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_command(_api::CommandsApi, response_stream::Channel, command_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_command(_api, command_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_execute_command_CommandsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CommandResponse,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_execute_command(_api::CommandsApi, execute_command_request::ExecuteCommandRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_execute_command_CommandsApi, "/commands/execute", ["bearerAuth", ], execute_command_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Execute a command

Execute a command on a team. ##### Permissions Must have `use_slash_commands` permission for the team the command is in. 

Params:
- execute_command_request::ExecuteCommandRequest (required)

Return: CommandResponse, OpenAPI.Clients.ApiResponse
"""
function execute_command(_api::CommandsApi, execute_command_request::ExecuteCommandRequest; _mediaType=nothing)
    _ctx = _oacinternal_execute_command(_api, execute_command_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function execute_command(_api::CommandsApi, response_stream::Channel, execute_command_request::ExecuteCommandRequest; _mediaType=nothing)
    _ctx = _oacinternal_execute_command(_api, execute_command_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_command_by_id_CommandsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Command,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_command_by_id(_api::CommandsApi, command_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_command_by_id_CommandsApi, "/commands/{command_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "command_id", command_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a command

Get a command definition based on command id string. ##### Permissions Must have `manage_slash_commands` permission for the team the command is in.  __Minimum server version__: 5.22 

Params:
- command_id::String (required)

Return: Command, OpenAPI.Clients.ApiResponse
"""
function get_command_by_id(_api::CommandsApi, command_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_command_by_id(_api, command_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_command_by_id(_api::CommandsApi, response_stream::Channel, command_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_command_by_id(_api, command_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_autocomplete_commands_CommandsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Command},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_list_autocomplete_commands(_api::CommandsApi, team_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_autocomplete_commands_CommandsApi, "/teams/{team_id}/commands/autocomplete", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List autocomplete commands

List autocomplete commands in the team. ##### Permissions `view_team` for the team. 

Params:
- team_id::String (required)

Return: Vector{Command}, OpenAPI.Clients.ApiResponse
"""
function list_autocomplete_commands(_api::CommandsApi, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_autocomplete_commands(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_autocomplete_commands(_api::CommandsApi, response_stream::Channel, team_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_autocomplete_commands(_api, team_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_command_autocomplete_suggestions_CommandsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{AutocompleteSuggestion},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_list_command_autocomplete_suggestions(_api::CommandsApi, team_id::String, user_input::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_command_autocomplete_suggestions_CommandsApi, "/teams/{team_id}/commands/autocomplete_suggestions", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "user_input", user_input)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List commands' autocomplete data

List commands' autocomplete data for the team. ##### Permissions `view_team` for the team. __Minimum server version__: 5.24 

Params:
- team_id::String (required)
- user_input::String (required)

Return: Vector{AutocompleteSuggestion}, OpenAPI.Clients.ApiResponse
"""
function list_command_autocomplete_suggestions(_api::CommandsApi, team_id::String, user_input::String; _mediaType=nothing)
    _ctx = _oacinternal_list_command_autocomplete_suggestions(_api, team_id, user_input; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_command_autocomplete_suggestions(_api::CommandsApi, response_stream::Channel, team_id::String, user_input::String; _mediaType=nothing)
    _ctx = _oacinternal_list_command_autocomplete_suggestions(_api, team_id, user_input; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_commands_CommandsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Command},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_list_commands(_api::CommandsApi; team_id=nothing, custom_only=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_commands_CommandsApi, "/commands", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "custom_only", custom_only)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List commands for a team

List commands for a team. ##### Permissions `manage_slash_commands` if need list custom commands. 

Params:
- team_id::String
- custom_only::Bool

Return: Vector{Command}, OpenAPI.Clients.ApiResponse
"""
function list_commands(_api::CommandsApi; team_id=nothing, custom_only=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_commands(_api; team_id=team_id, custom_only=custom_only, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_commands(_api::CommandsApi, response_stream::Channel; team_id=nothing, custom_only=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_commands(_api; team_id=team_id, custom_only=custom_only, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_move_command_CommandsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_move_command(_api::CommandsApi, command_id::String, move_command_request::MoveCommandRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_move_command_CommandsApi, "/commands/{command_id}/move", ["bearerAuth", ], move_command_request)
    OpenAPI.Clients.set_param(_ctx.path, "command_id", command_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Move a command

Move a command to a different team based on command id string. ##### Permissions Must have `manage_slash_commands` permission for the team the command is currently in and the destination team.  __Minimum server version__: 5.22 

Params:
- command_id::String (required)
- move_command_request::MoveCommandRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function move_command(_api::CommandsApi, command_id::String, move_command_request::MoveCommandRequest; _mediaType=nothing)
    _ctx = _oacinternal_move_command(_api, command_id, move_command_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function move_command(_api::CommandsApi, response_stream::Channel, command_id::String, move_command_request::MoveCommandRequest; _mediaType=nothing)
    _ctx = _oacinternal_move_command(_api, command_id, move_command_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_regen_command_token_CommandsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RegenCommandToken200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_regen_command_token(_api::CommandsApi, command_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_regen_command_token_CommandsApi, "/commands/{command_id}/regen_token", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "command_id", command_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Generate a new token

Generate a new token for the command based on command id string. ##### Permissions Must have `manage_slash_commands` permission for the team the command is in. 

Params:
- command_id::String (required)

Return: RegenCommandToken200Response, OpenAPI.Clients.ApiResponse
"""
function regen_command_token(_api::CommandsApi, command_id::String; _mediaType=nothing)
    _ctx = _oacinternal_regen_command_token(_api, command_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function regen_command_token(_api::CommandsApi, response_stream::Channel, command_id::String; _mediaType=nothing)
    _ctx = _oacinternal_regen_command_token(_api, command_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_command_CommandsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Command,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_command(_api::CommandsApi, command_id::String, command::Command; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_command_CommandsApi, "/commands/{command_id}", ["bearerAuth", ], command)
    OpenAPI.Clients.set_param(_ctx.path, "command_id", command_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a command

Update a single command based on command id string and Command struct. ##### Permissions Must have `manage_slash_commands` permission for the team the command is in. 

Params:
- command_id::String (required)
- command::Command (required)

Return: Command, OpenAPI.Clients.ApiResponse
"""
function update_command(_api::CommandsApi, command_id::String, command::Command; _mediaType=nothing)
    _ctx = _oacinternal_update_command(_api, command_id, command; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_command(_api::CommandsApi, response_stream::Channel, command_id::String, command::Command; _mediaType=nothing)
    _ctx = _oacinternal_update_command(_api, command_id, command; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_command
export delete_command
export execute_command
export get_command_by_id
export list_autocomplete_commands
export list_command_autocomplete_suggestions
export list_commands
export move_command
export regen_command_token
export update_command
