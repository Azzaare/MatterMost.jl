# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ReactionsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ReactionsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ReactionsApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_delete_reaction_ReactionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_reaction(_api::ReactionsApi, user_id::String, post_id::String, emoji_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_reaction_ReactionsApi, "/users/{user_id}/posts/{post_id}/reactions/{emoji_name}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "post_id", post_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "emoji_name", emoji_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Remove a reaction from a post

Deletes a reaction made by a user from the given post. ##### Permissions Must be user or have `manage_system` permission. 

Params:
- user_id::String (required)
- post_id::String (required)
- emoji_name::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_reaction(_api::ReactionsApi, user_id::String, post_id::String, emoji_name::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_reaction(_api, user_id, post_id, emoji_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_reaction(_api::ReactionsApi, response_stream::Channel, user_id::String, post_id::String, emoji_name::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_reaction(_api, user_id, post_id, emoji_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_bulk_reactions_ReactionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Dict{String, Vector{Reaction}},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_bulk_reactions(_api::ReactionsApi, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_bulk_reactions_ReactionsApi, "/posts/ids/reactions", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Bulk get the reaction for posts

Get a list of reactions made by all users to a given post. ##### Permissions Must have `read_channel` permission for the channel the post is in.  __Minimum server version__: 5.8 

Params:
- request_body::Vector{String} (required)

Return: Dict{String, Vector{Reaction}}, OpenAPI.Clients.ApiResponse
"""
function get_bulk_reactions(_api::ReactionsApi, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_get_bulk_reactions(_api, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_bulk_reactions(_api::ReactionsApi, response_stream::Channel, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_get_bulk_reactions(_api, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_reactions_ReactionsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Reaction},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_reactions(_api::ReactionsApi, post_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_reactions_ReactionsApi, "/posts/{post_id}/reactions", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "post_id", post_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a list of reactions to a post

Get a list of reactions made by all users to a given post. ##### Permissions Must have `read_channel` permission for the channel the post is in. 

Params:
- post_id::String (required)

Return: Vector{Reaction}, OpenAPI.Clients.ApiResponse
"""
function get_reactions(_api::ReactionsApi, post_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_reactions(_api, post_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_reactions(_api::ReactionsApi, response_stream::Channel, post_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_reactions(_api, post_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_save_reaction_ReactionsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => Reaction,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_save_reaction(_api::ReactionsApi, reaction::Reaction; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_save_reaction_ReactionsApi, "/reactions", ["bearerAuth", ], reaction)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a reaction

Create a reaction. ##### Permissions Must have `read_channel` permission for the channel the post is in. 

Params:
- reaction::Reaction (required)

Return: Reaction, OpenAPI.Clients.ApiResponse
"""
function save_reaction(_api::ReactionsApi, reaction::Reaction; _mediaType=nothing)
    _ctx = _oacinternal_save_reaction(_api, reaction; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function save_reaction(_api::ReactionsApi, response_stream::Channel, reaction::Reaction; _mediaType=nothing)
    _ctx = _oacinternal_save_reaction(_api, reaction; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_reaction
export get_bulk_reactions
export get_reactions
export save_reaction
