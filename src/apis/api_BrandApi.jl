# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct BrandApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `BrandApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ BrandApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_delete_brand_image_BrandApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_brand_image(_api::BrandApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_brand_image_BrandApi, "/brand/image", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete current brand image

Deletes the previously uploaded brand image. Returns 404 if no brand image has been uploaded. ##### Permissions Must have `manage_system` permission. __Minimum server version: 5.6__ 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_brand_image(_api::BrandApi; _mediaType=nothing)
    _ctx = _oacinternal_delete_brand_image(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_brand_image(_api::BrandApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_delete_brand_image(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_brand_image_BrandApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_brand_image(_api::BrandApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_brand_image_BrandApi, "/brand/image", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get brand image

Get the previously uploaded brand image. Returns 404 if no brand image has been uploaded. ##### Permissions No permission required. 

Params:

Return: String, OpenAPI.Clients.ApiResponse
"""
function get_brand_image(_api::BrandApi; _mediaType=nothing)
    _ctx = _oacinternal_get_brand_image(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_brand_image(_api::BrandApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_brand_image(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_brand_image_BrandApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("413", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_upload_brand_image(_api::BrandApi, image::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upload_brand_image_BrandApi, "/brand/image", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "image", image)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload brand image

Uploads a brand image. ##### Permissions Must have `manage_system` permission. 

Params:
- image::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function upload_brand_image(_api::BrandApi, image::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_brand_image(_api, image; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_brand_image(_api::BrandApi, response_stream::Channel, image::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_brand_image(_api, image; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_brand_image
export get_brand_image
export upload_brand_image
