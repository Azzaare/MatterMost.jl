# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct SAMLApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `SAMLApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ SAMLApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_delete_saml_idp_certificate_SAMLApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_saml_idp_certificate(_api::SAMLApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_saml_idp_certificate_SAMLApi, "/saml/certificate/idp", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Remove IDP certificate

Delete the current IDP certificate being used with your SAML configuration. This will also disable SAML on your system as this certificate is required for SAML. ##### Permissions Must have `sysconsole_write_authentication` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_saml_idp_certificate(_api::SAMLApi; _mediaType=nothing)
    _ctx = _oacinternal_delete_saml_idp_certificate(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_saml_idp_certificate(_api::SAMLApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_delete_saml_idp_certificate(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_saml_private_certificate_SAMLApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_saml_private_certificate(_api::SAMLApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_saml_private_certificate_SAMLApi, "/saml/certificate/private", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Remove private key

Delete the current private key being used with your SAML configuration. This will also disable encryption for SAML on your system as this key is required for that. ##### Permissions Must have `sysconsole_write_authentication` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_saml_private_certificate(_api::SAMLApi; _mediaType=nothing)
    _ctx = _oacinternal_delete_saml_private_certificate(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_saml_private_certificate(_api::SAMLApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_delete_saml_private_certificate(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_saml_public_certificate_SAMLApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_saml_public_certificate(_api::SAMLApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_saml_public_certificate_SAMLApi, "/saml/certificate/public", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Remove public certificate

Delete the current public certificate being used with your SAML configuration. This will also disable encryption for SAML on your system as this certificate is required for that. ##### Permissions Must have `sysconsole_write_authentication` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_saml_public_certificate(_api::SAMLApi; _mediaType=nothing)
    _ctx = _oacinternal_delete_saml_public_certificate(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_saml_public_certificate(_api::SAMLApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_delete_saml_public_certificate(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_saml_certificate_status_SAMLApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SamlCertificateStatus,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_saml_certificate_status(_api::SAMLApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_saml_certificate_status_SAMLApi, "/saml/certificate/status", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get certificate status

Get the status of the uploaded certificates and keys in use by your SAML configuration. ##### Permissions Must have `sysconsole_write_authentication` permission. 

Params:

Return: SamlCertificateStatus, OpenAPI.Clients.ApiResponse
"""
function get_saml_certificate_status(_api::SAMLApi; _mediaType=nothing)
    _ctx = _oacinternal_get_saml_certificate_status(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_saml_certificate_status(_api::SAMLApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_saml_certificate_status(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_saml_metadata_SAMLApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_saml_metadata(_api::SAMLApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_saml_metadata_SAMLApi, "/saml/metadata", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get metadata

Get SAML metadata from the server. SAML must be configured properly. ##### Permissions No permission required. 

Params:

Return: String, OpenAPI.Clients.ApiResponse
"""
function get_saml_metadata(_api::SAMLApi; _mediaType=nothing)
    _ctx = _oacinternal_get_saml_metadata(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_saml_metadata(_api::SAMLApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_saml_metadata(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_saml_metadata_from_idp_SAMLApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_saml_metadata_from_idp(_api::SAMLApi; get_saml_metadata_from_idp_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_get_saml_metadata_from_idp_SAMLApi, "/saml/metadatafromidp", ["bearerAuth", ], get_saml_metadata_from_idp_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Get metadata from Identity Provider

Get SAML metadata from the Identity Provider. SAML must be configured properly. ##### Permissions No permission required. 

Params:
- get_saml_metadata_from_idp_request::GetSamlMetadataFromIdpRequest

Return: String, OpenAPI.Clients.ApiResponse
"""
function get_saml_metadata_from_idp(_api::SAMLApi; get_saml_metadata_from_idp_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_saml_metadata_from_idp(_api; get_saml_metadata_from_idp_request=get_saml_metadata_from_idp_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_saml_metadata_from_idp(_api::SAMLApi, response_stream::Channel; get_saml_metadata_from_idp_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_saml_metadata_from_idp(_api; get_saml_metadata_from_idp_request=get_saml_metadata_from_idp_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_migrate_auth_to_saml_SAMLApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_migrate_auth_to_saml(_api::SAMLApi; migrate_auth_to_saml_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_migrate_auth_to_saml_SAMLApi, "/users/migrate_auth/saml", ["bearerAuth", ], migrate_auth_to_saml_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Migrate user accounts authentication type to SAML.

Migrates accounts from one authentication provider to another. For example, you can upgrade your authentication provider from email to SAML. __Minimum server version__: 5.28 ##### Permissions Must have `manage_system` permission. 

Params:
- migrate_auth_to_saml_request::MigrateAuthToSamlRequest

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function migrate_auth_to_saml(_api::SAMLApi; migrate_auth_to_saml_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_migrate_auth_to_saml(_api; migrate_auth_to_saml_request=migrate_auth_to_saml_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function migrate_auth_to_saml(_api::SAMLApi, response_stream::Channel; migrate_auth_to_saml_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_migrate_auth_to_saml(_api; migrate_auth_to_saml_request=migrate_auth_to_saml_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_reset_saml_auth_data_to_email_SAMLApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ResetSamlAuthDataToEmail200Response,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_reset_saml_auth_data_to_email(_api::SAMLApi; reset_saml_auth_data_to_email_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_reset_saml_auth_data_to_email_SAMLApi, "/saml/reset_auth_data", ["bearerAuth", ], reset_saml_auth_data_to_email_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Reset AuthData to Email

Reset the AuthData field of SAML users to their email. This is meant to be used when the \"id\" attribute is set to an empty value (\"\") from a previously non-empty value. __Minimum server version__: 5.35 ##### Permissions Must have `manage_system` permission. 

Params:
- reset_saml_auth_data_to_email_request::ResetSamlAuthDataToEmailRequest

Return: ResetSamlAuthDataToEmail200Response, OpenAPI.Clients.ApiResponse
"""
function reset_saml_auth_data_to_email(_api::SAMLApi; reset_saml_auth_data_to_email_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_reset_saml_auth_data_to_email(_api; reset_saml_auth_data_to_email_request=reset_saml_auth_data_to_email_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function reset_saml_auth_data_to_email(_api::SAMLApi, response_stream::Channel; reset_saml_auth_data_to_email_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_reset_saml_auth_data_to_email(_api; reset_saml_auth_data_to_email_request=reset_saml_auth_data_to_email_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_saml_idp_certificate_SAMLApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_upload_saml_idp_certificate(_api::SAMLApi, certificate::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upload_saml_idp_certificate_SAMLApi, "/saml/certificate/idp", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "certificate", certificate)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload IDP certificate

Upload the IDP certificate to be used with your SAML configuration. The server will pick a hard-coded filename for the IdpCertificateFile setting in your `config.json`. ##### Permissions Must have `sysconsole_write_authentication` permission. 

Params:
- certificate::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function upload_saml_idp_certificate(_api::SAMLApi, certificate::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_saml_idp_certificate(_api, certificate; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_saml_idp_certificate(_api::SAMLApi, response_stream::Channel, certificate::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_saml_idp_certificate(_api, certificate; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_saml_private_certificate_SAMLApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_upload_saml_private_certificate(_api::SAMLApi, certificate::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upload_saml_private_certificate_SAMLApi, "/saml/certificate/private", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "certificate", certificate)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload private key

Upload the private key to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PrivateKeyFile setting in your `config.json`. ##### Permissions Must have `sysconsole_write_authentication` permission. 

Params:
- certificate::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function upload_saml_private_certificate(_api::SAMLApi, certificate::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_saml_private_certificate(_api, certificate; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_saml_private_certificate(_api::SAMLApi, response_stream::Channel, certificate::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_saml_private_certificate(_api, certificate; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_saml_public_certificate_SAMLApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_upload_saml_public_certificate(_api::SAMLApi, certificate::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upload_saml_public_certificate_SAMLApi, "/saml/certificate/public", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "certificate", certificate)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload public certificate

Upload the public certificate to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PublicCertificateFile setting in your `config.json`. ##### Permissions Must have `sysconsole_write_authentication` permission. 

Params:
- certificate::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function upload_saml_public_certificate(_api::SAMLApi, certificate::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_saml_public_certificate(_api, certificate; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_saml_public_certificate(_api::SAMLApi, response_stream::Channel, certificate::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_saml_public_certificate(_api, certificate; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_saml_idp_certificate
export delete_saml_private_certificate
export delete_saml_public_certificate
export get_saml_certificate_status
export get_saml_metadata
export get_saml_metadata_from_idp
export migrate_auth_to_saml
export reset_saml_auth_data_to_email
export upload_saml_idp_certificate
export upload_saml_private_certificate
export upload_saml_public_certificate
