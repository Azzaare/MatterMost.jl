# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct WebhooksApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `WebhooksApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ WebhooksApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_create_incoming_webhook_WebhooksApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => IncomingWebhook,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_incoming_webhook(_api::WebhooksApi, create_incoming_webhook_request::CreateIncomingWebhookRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_incoming_webhook_WebhooksApi, "/hooks/incoming", ["bearerAuth", ], create_incoming_webhook_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create an incoming webhook

Create an incoming webhook for a channel. ##### Permissions `manage_webhooks` for the team the webhook is in.  `manage_others_incoming_webhooks` for the team the webhook is in if the user is different than the requester. 

Params:
- create_incoming_webhook_request::CreateIncomingWebhookRequest (required)

Return: IncomingWebhook, OpenAPI.Clients.ApiResponse
"""
function create_incoming_webhook(_api::WebhooksApi, create_incoming_webhook_request::CreateIncomingWebhookRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_incoming_webhook(_api, create_incoming_webhook_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_incoming_webhook(_api::WebhooksApi, response_stream::Channel, create_incoming_webhook_request::CreateIncomingWebhookRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_incoming_webhook(_api, create_incoming_webhook_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_outgoing_webhook_WebhooksApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => OutgoingWebhook,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_outgoing_webhook(_api::WebhooksApi, create_outgoing_webhook_request::CreateOutgoingWebhookRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_outgoing_webhook_WebhooksApi, "/hooks/outgoing", ["bearerAuth", ], create_outgoing_webhook_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create an outgoing webhook

Create an outgoing webhook for a team. ##### Permissions `manage_webhooks` for the team the webhook is in.  `manage_others_outgoing_webhooks` for the team the webhook is in if the user is different than the requester. 

Params:
- create_outgoing_webhook_request::CreateOutgoingWebhookRequest (required)

Return: OutgoingWebhook, OpenAPI.Clients.ApiResponse
"""
function create_outgoing_webhook(_api::WebhooksApi, create_outgoing_webhook_request::CreateOutgoingWebhookRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_outgoing_webhook(_api, create_outgoing_webhook_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_outgoing_webhook(_api::WebhooksApi, response_stream::Channel, create_outgoing_webhook_request::CreateOutgoingWebhookRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_outgoing_webhook(_api, create_outgoing_webhook_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_incoming_webhook_WebhooksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_incoming_webhook(_api::WebhooksApi, hook_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_incoming_webhook_WebhooksApi, "/hooks/incoming/{hook_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "hook_id", hook_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete an incoming webhook

Delete an incoming webhook given the hook id. ##### Permissions `manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel. 

Params:
- hook_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_incoming_webhook(_api::WebhooksApi, hook_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_incoming_webhook(_api, hook_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_incoming_webhook(_api::WebhooksApi, response_stream::Channel, hook_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_incoming_webhook(_api, hook_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_outgoing_webhook_WebhooksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_outgoing_webhook(_api::WebhooksApi, hook_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_outgoing_webhook_WebhooksApi, "/hooks/outgoing/{hook_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "hook_id", hook_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete an outgoing webhook

Delete an outgoing webhook given the hook id. ##### Permissions `manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel. 

Params:
- hook_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_outgoing_webhook(_api::WebhooksApi, hook_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_outgoing_webhook(_api, hook_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_outgoing_webhook(_api::WebhooksApi, response_stream::Channel, hook_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_outgoing_webhook(_api, hook_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_incoming_webhook_WebhooksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IncomingWebhook,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_incoming_webhook(_api::WebhooksApi, hook_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_incoming_webhook_WebhooksApi, "/hooks/incoming/{hook_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "hook_id", hook_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get an incoming webhook

Get an incoming webhook given the hook id. ##### Permissions `manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel. 

Params:
- hook_id::String (required)

Return: IncomingWebhook, OpenAPI.Clients.ApiResponse
"""
function get_incoming_webhook(_api::WebhooksApi, hook_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_incoming_webhook(_api, hook_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_incoming_webhook(_api::WebhooksApi, response_stream::Channel, hook_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_incoming_webhook(_api, hook_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_incoming_webhooks_WebhooksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{IncomingWebhook},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_incoming_webhooks(_api::WebhooksApi; page=nothing, per_page=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_incoming_webhooks_WebhooksApi, "/hooks/incoming", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "team_id", team_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List incoming webhooks

Get a page of a list of incoming webhooks. Optionally filter for a specific team using query parameters. ##### Permissions `manage_webhooks` for the system or `manage_webhooks` for the specific team. 

Params:
- page::Int64
- per_page::Int64
- team_id::String

Return: Vector{IncomingWebhook}, OpenAPI.Clients.ApiResponse
"""
function get_incoming_webhooks(_api::WebhooksApi; page=nothing, per_page=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_incoming_webhooks(_api; page=page, per_page=per_page, team_id=team_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_incoming_webhooks(_api::WebhooksApi, response_stream::Channel; page=nothing, per_page=nothing, team_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_incoming_webhooks(_api; page=page, per_page=per_page, team_id=team_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_outgoing_webhook_WebhooksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => OutgoingWebhook,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_outgoing_webhook(_api::WebhooksApi, hook_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_outgoing_webhook_WebhooksApi, "/hooks/outgoing/{hook_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "hook_id", hook_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get an outgoing webhook

Get an outgoing webhook given the hook id. ##### Permissions `manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel. 

Params:
- hook_id::String (required)

Return: OutgoingWebhook, OpenAPI.Clients.ApiResponse
"""
function get_outgoing_webhook(_api::WebhooksApi, hook_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_outgoing_webhook(_api, hook_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_outgoing_webhook(_api::WebhooksApi, response_stream::Channel, hook_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_outgoing_webhook(_api, hook_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_outgoing_webhooks_WebhooksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{OutgoingWebhook},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_outgoing_webhooks(_api::WebhooksApi; page=nothing, per_page=nothing, team_id=nothing, channel_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_outgoing_webhooks_WebhooksApi, "/hooks/outgoing", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "team_id", team_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "channel_id", channel_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List outgoing webhooks

Get a page of a list of outgoing webhooks. Optionally filter for a specific team or channel using query parameters. ##### Permissions `manage_webhooks` for the system or `manage_webhooks` for the specific team/channel. 

Params:
- page::Int64
- per_page::Int64
- team_id::String
- channel_id::String

Return: Vector{OutgoingWebhook}, OpenAPI.Clients.ApiResponse
"""
function get_outgoing_webhooks(_api::WebhooksApi; page=nothing, per_page=nothing, team_id=nothing, channel_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_outgoing_webhooks(_api; page=page, per_page=per_page, team_id=team_id, channel_id=channel_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_outgoing_webhooks(_api::WebhooksApi, response_stream::Channel; page=nothing, per_page=nothing, team_id=nothing, channel_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_outgoing_webhooks(_api; page=page, per_page=per_page, team_id=team_id, channel_id=channel_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_regen_outgoing_hook_token_WebhooksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_regen_outgoing_hook_token(_api::WebhooksApi, hook_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_regen_outgoing_hook_token_WebhooksApi, "/hooks/outgoing/{hook_id}/regen_token", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "hook_id", hook_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Regenerate the token for the outgoing webhook.

Regenerate the token for the outgoing webhook. ##### Permissions `manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel. 

Params:
- hook_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function regen_outgoing_hook_token(_api::WebhooksApi, hook_id::String; _mediaType=nothing)
    _ctx = _oacinternal_regen_outgoing_hook_token(_api, hook_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function regen_outgoing_hook_token(_api::WebhooksApi, response_stream::Channel, hook_id::String; _mediaType=nothing)
    _ctx = _oacinternal_regen_outgoing_hook_token(_api, hook_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_incoming_webhook_WebhooksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IncomingWebhook,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_incoming_webhook(_api::WebhooksApi, hook_id::String, update_incoming_webhook_request::UpdateIncomingWebhookRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_incoming_webhook_WebhooksApi, "/hooks/incoming/{hook_id}", ["bearerAuth", ], update_incoming_webhook_request)
    OpenAPI.Clients.set_param(_ctx.path, "hook_id", hook_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update an incoming webhook

Update an incoming webhook given the hook id. ##### Permissions `manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel. 

Params:
- hook_id::String (required)
- update_incoming_webhook_request::UpdateIncomingWebhookRequest (required)

Return: IncomingWebhook, OpenAPI.Clients.ApiResponse
"""
function update_incoming_webhook(_api::WebhooksApi, hook_id::String, update_incoming_webhook_request::UpdateIncomingWebhookRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_incoming_webhook(_api, hook_id, update_incoming_webhook_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_incoming_webhook(_api::WebhooksApi, response_stream::Channel, hook_id::String, update_incoming_webhook_request::UpdateIncomingWebhookRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_incoming_webhook(_api, hook_id, update_incoming_webhook_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_outgoing_webhook_WebhooksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => OutgoingWebhook,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_outgoing_webhook(_api::WebhooksApi, hook_id::String, update_outgoing_webhook_request::UpdateOutgoingWebhookRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_outgoing_webhook_WebhooksApi, "/hooks/outgoing/{hook_id}", ["bearerAuth", ], update_outgoing_webhook_request)
    OpenAPI.Clients.set_param(_ctx.path, "hook_id", hook_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update an outgoing webhook

Update an outgoing webhook given the hook id. ##### Permissions `manage_webhooks` for system or `manage_webhooks` for the specific team or `manage_webhooks` for the channel. 

Params:
- hook_id::String (required)
- update_outgoing_webhook_request::UpdateOutgoingWebhookRequest (required)

Return: OutgoingWebhook, OpenAPI.Clients.ApiResponse
"""
function update_outgoing_webhook(_api::WebhooksApi, hook_id::String, update_outgoing_webhook_request::UpdateOutgoingWebhookRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_outgoing_webhook(_api, hook_id, update_outgoing_webhook_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_outgoing_webhook(_api::WebhooksApi, response_stream::Channel, hook_id::String, update_outgoing_webhook_request::UpdateOutgoingWebhookRequest; _mediaType=nothing)
    _ctx = _oacinternal_update_outgoing_webhook(_api, hook_id, update_outgoing_webhook_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_incoming_webhook
export create_outgoing_webhook
export delete_incoming_webhook
export delete_outgoing_webhook
export get_incoming_webhook
export get_incoming_webhooks
export get_outgoing_webhook
export get_outgoing_webhooks
export regen_outgoing_hook_token
export update_incoming_webhook
export update_outgoing_webhook
