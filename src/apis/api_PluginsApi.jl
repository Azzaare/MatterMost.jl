# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct PluginsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `PluginsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ PluginsApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_disable_plugin_PluginsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_disable_plugin(_api::PluginsApi, plugin_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_disable_plugin_PluginsApi, "/plugins/{plugin_id}/disable", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "plugin_id", plugin_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Disable plugin

Disable a previously enabled plugin. Plugins must be enabled in the server's config settings.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 4.4 

Params:
- plugin_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function disable_plugin(_api::PluginsApi, plugin_id::String; _mediaType=nothing)
    _ctx = _oacinternal_disable_plugin(_api, plugin_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disable_plugin(_api::PluginsApi, response_stream::Channel, plugin_id::String; _mediaType=nothing)
    _ctx = _oacinternal_disable_plugin(_api, plugin_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_enable_plugin_PluginsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_enable_plugin(_api::PluginsApi, plugin_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_enable_plugin_PluginsApi, "/plugins/{plugin_id}/enable", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "plugin_id", plugin_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Enable plugin

Enable a previously uploaded plugin. Plugins must be enabled in the server's config settings.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 4.4 

Params:
- plugin_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function enable_plugin(_api::PluginsApi, plugin_id::String; _mediaType=nothing)
    _ctx = _oacinternal_enable_plugin(_api, plugin_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function enable_plugin(_api::PluginsApi, response_stream::Channel, plugin_id::String; _mediaType=nothing)
    _ctx = _oacinternal_enable_plugin(_api, plugin_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_marketplace_plugins_PluginsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{MarketplacePlugin},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_marketplace_plugins(_api::PluginsApi; page=nothing, per_page=nothing, filter=nothing, server_version=nothing, local_only=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_marketplace_plugins_PluginsApi, "/plugins/marketplace", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "filter", filter)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "server_version", server_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "local_only", local_only)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all the marketplace plugins

Gets all plugins from the marketplace server, merging data from locally installed plugins as well as prepackaged plugins shipped with the server.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.16 

Params:
- page::Int64
- per_page::Int64
- filter::String
- server_version::String
- local_only::Bool

Return: Vector{MarketplacePlugin}, OpenAPI.Clients.ApiResponse
"""
function get_marketplace_plugins(_api::PluginsApi; page=nothing, per_page=nothing, filter=nothing, server_version=nothing, local_only=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_marketplace_plugins(_api; page=page, per_page=per_page, filter=filter, server_version=server_version, local_only=local_only, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_marketplace_plugins(_api::PluginsApi, response_stream::Channel; page=nothing, per_page=nothing, filter=nothing, server_version=nothing, local_only=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_marketplace_plugins(_api; page=page, per_page=per_page, filter=filter, server_version=server_version, local_only=local_only, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_marketplace_visited_by_admin_PluginsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => System,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_marketplace_visited_by_admin(_api::PluginsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_marketplace_visited_by_admin_PluginsApi, "/plugins/marketplace/first_admin_visit", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get if the Plugin Marketplace has been visited by at least an admin.

Retrieves the status that specifies that at least one System Admin has visited the in-product Plugin Marketplace. __Minimum server version: 5.33__ ##### Permissions Must have `manage_system` permissions. 

Params:

Return: System, OpenAPI.Clients.ApiResponse
"""
function get_marketplace_visited_by_admin(_api::PluginsApi; _mediaType=nothing)
    _ctx = _oacinternal_get_marketplace_visited_by_admin(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_marketplace_visited_by_admin(_api::PluginsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_marketplace_visited_by_admin(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_plugin_statuses_PluginsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{PluginStatus},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_plugin_statuses(_api::PluginsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_plugin_statuses_PluginsApi, "/plugins/statuses", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get plugins status

Returns the status for plugins installed anywhere in the cluster  ##### Permissions No permissions required.  __Minimum server version__: 4.4 

Params:

Return: Vector{PluginStatus}, OpenAPI.Clients.ApiResponse
"""
function get_plugin_statuses(_api::PluginsApi; _mediaType=nothing)
    _ctx = _oacinternal_get_plugin_statuses(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_plugin_statuses(_api::PluginsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_plugin_statuses(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_plugins_PluginsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetPlugins200Response,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_plugins(_api::PluginsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_plugins_PluginsApi, "/plugins", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get plugins

Get a list of inactive and a list of active plugin manifests. Plugins must be enabled in the server's config settings.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 4.4 

Params:

Return: GetPlugins200Response, OpenAPI.Clients.ApiResponse
"""
function get_plugins(_api::PluginsApi; _mediaType=nothing)
    _ctx = _oacinternal_get_plugins(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_plugins(_api::PluginsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_plugins(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_webapp_plugins_PluginsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{PluginManifestWebapp},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_webapp_plugins(_api::PluginsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_webapp_plugins_PluginsApi, "/plugins/webapp", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get webapp plugins

Get a list of web app plugins installed and activated on the server.  ##### Permissions No permissions required.  __Minimum server version__: 4.4 

Params:

Return: Vector{PluginManifestWebapp}, OpenAPI.Clients.ApiResponse
"""
function get_webapp_plugins(_api::PluginsApi; _mediaType=nothing)
    _ctx = _oacinternal_get_webapp_plugins(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_webapp_plugins(_api::PluginsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_webapp_plugins(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_install_marketplace_plugin_PluginsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PluginManifest,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_install_marketplace_plugin(_api::PluginsApi, install_marketplace_plugin_request::InstallMarketplacePluginRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_install_marketplace_plugin_PluginsApi, "/plugins/marketplace", ["bearerAuth", ], install_marketplace_plugin_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Installs a marketplace plugin

Installs a plugin listed in the marketplace server.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.16 

Params:
- install_marketplace_plugin_request::InstallMarketplacePluginRequest (required)

Return: PluginManifest, OpenAPI.Clients.ApiResponse
"""
function install_marketplace_plugin(_api::PluginsApi, install_marketplace_plugin_request::InstallMarketplacePluginRequest; _mediaType=nothing)
    _ctx = _oacinternal_install_marketplace_plugin(_api, install_marketplace_plugin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function install_marketplace_plugin(_api::PluginsApi, response_stream::Channel, install_marketplace_plugin_request::InstallMarketplacePluginRequest; _mediaType=nothing)
    _ctx = _oacinternal_install_marketplace_plugin(_api, install_marketplace_plugin_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_install_plugin_from_url_PluginsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_install_plugin_from_url(_api::PluginsApi, plugin_download_url::String; force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_install_plugin_from_url_PluginsApi, "/plugins/install_from_url", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "plugin_download_url", plugin_download_url)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "force", force)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Install plugin from url

Supply a URL to a plugin compressed in a .tar.gz file. Plugins must be enabled in the server's config settings.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.14 

Params:
- plugin_download_url::String (required)
- force::String

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function install_plugin_from_url(_api::PluginsApi, plugin_download_url::String; force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_install_plugin_from_url(_api, plugin_download_url; force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function install_plugin_from_url(_api::PluginsApi, response_stream::Channel, plugin_download_url::String; force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_install_plugin_from_url(_api, plugin_download_url; force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_remove_plugin_PluginsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_remove_plugin(_api::PluginsApi, plugin_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_remove_plugin_PluginsApi, "/plugins/{plugin_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "plugin_id", plugin_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Remove plugin

Remove the plugin with the provided ID from the server. All plugin files are deleted. Plugins must be enabled in the server's config settings.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 4.4 

Params:
- plugin_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function remove_plugin(_api::PluginsApi, plugin_id::String; _mediaType=nothing)
    _ctx = _oacinternal_remove_plugin(_api, plugin_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function remove_plugin(_api::PluginsApi, response_stream::Channel, plugin_id::String; _mediaType=nothing)
    _ctx = _oacinternal_remove_plugin(_api, plugin_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_plugin_PluginsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("413", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_upload_plugin(_api::PluginsApi, plugin::String; force=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upload_plugin_PluginsApi, "/plugins", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "plugin", plugin)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "force", force)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload plugin

Upload a plugin that is contained within a compressed .tar.gz file. Plugins and plugin uploads must be enabled in the server's config settings.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 4.4 

Params:
- plugin::String (required)
- force::String

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function upload_plugin(_api::PluginsApi, plugin::String; force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_upload_plugin(_api, plugin; force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_plugin(_api::PluginsApi, response_stream::Channel, plugin::String; force=nothing, _mediaType=nothing)
    _ctx = _oacinternal_upload_plugin(_api, plugin; force=force, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export disable_plugin
export enable_plugin
export get_marketplace_plugins
export get_marketplace_visited_by_admin
export get_plugin_statuses
export get_plugins
export get_webapp_plugins
export install_marketplace_plugin
export install_plugin_from_url
export remove_plugin
export upload_plugin
