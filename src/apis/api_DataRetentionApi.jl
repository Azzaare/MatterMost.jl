# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DataRetentionApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DataRetentionApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DataRetentionApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_add_channels_to_retention_policy_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_add_channels_to_retention_policy(_api::DataRetentionApi, policy_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_add_channels_to_retention_policy_DataRetentionApi, "/data_retention/policies/{policy_id}/channels", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "policy_id", policy_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add channels to a granular data retention policy

Adds channels to a granular data retention policy.   __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_write_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- policy_id::String (required)
- request_body::Vector{String} (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function add_channels_to_retention_policy(_api::DataRetentionApi, policy_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_add_channels_to_retention_policy(_api, policy_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function add_channels_to_retention_policy(_api::DataRetentionApi, response_stream::Channel, policy_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_add_channels_to_retention_policy(_api, policy_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_add_teams_to_retention_policy_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_add_teams_to_retention_policy(_api::DataRetentionApi, policy_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_add_teams_to_retention_policy_DataRetentionApi, "/data_retention/policies/{policy_id}/teams", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "policy_id", policy_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add teams to a granular data retention policy

Adds teams to a granular data retention policy.   __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_write_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- policy_id::String (required)
- request_body::Vector{String} (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function add_teams_to_retention_policy(_api::DataRetentionApi, policy_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_add_teams_to_retention_policy(_api, policy_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function add_teams_to_retention_policy(_api::DataRetentionApi, response_stream::Channel, policy_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_add_teams_to_retention_policy(_api, policy_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_data_retention_policy_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => DataRetentionPolicyWithTeamAndChannelCounts,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_create_data_retention_policy(_api::DataRetentionApi, data_retention_policy_create::DataRetentionPolicyCreate; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_data_retention_policy_DataRetentionApi, "/data_retention/policies", ["bearerAuth", ], data_retention_policy_create)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a new granular data retention policy

Creates a new granular data retention policy with the specified display name and post duration.  __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_write_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- data_retention_policy_create::DataRetentionPolicyCreate (required)

Return: DataRetentionPolicyWithTeamAndChannelCounts, OpenAPI.Clients.ApiResponse
"""
function create_data_retention_policy(_api::DataRetentionApi, data_retention_policy_create::DataRetentionPolicyCreate; _mediaType=nothing)
    _ctx = _oacinternal_create_data_retention_policy(_api, data_retention_policy_create; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_data_retention_policy(_api::DataRetentionApi, response_stream::Channel, data_retention_policy_create::DataRetentionPolicyCreate; _mediaType=nothing)
    _ctx = _oacinternal_create_data_retention_policy(_api, data_retention_policy_create; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_data_retention_policy_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_data_retention_policy(_api::DataRetentionApi, policy_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_data_retention_policy_DataRetentionApi, "/data_retention/policies/{policy_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "policy_id", policy_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a granular data retention policy

Deletes a granular data retention policy.  __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_write_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- policy_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_data_retention_policy(_api::DataRetentionApi, policy_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_data_retention_policy(_api, policy_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_data_retention_policy(_api::DataRetentionApi, response_stream::Channel, policy_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_data_retention_policy(_api, policy_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channel_policies_for_user_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RetentionPolicyForChannelList,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channel_policies_for_user(_api::DataRetentionApi, user_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channel_policies_for_user_DataRetentionApi, "/users/{user_id}/data_retention/channel_policies", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the policies which are applied to a user's channels

Gets the policies which are applied to the all of the channels to which a user belongs.  __Minimum server version__: 5.35  ##### Permissions Must be logged in as the user or have the `manage_system` permission.  ##### License Requires an E20 license. 

Params:
- user_id::String (required)
- page::Int64
- per_page::Int64

Return: RetentionPolicyForChannelList, OpenAPI.Clients.ApiResponse
"""
function get_channel_policies_for_user(_api::DataRetentionApi, user_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channel_policies_for_user(_api, user_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channel_policies_for_user(_api::DataRetentionApi, response_stream::Channel, user_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channel_policies_for_user(_api, user_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_channels_for_retention_policy_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ChannelWithTeamData},
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_channels_for_retention_policy(_api::DataRetentionApi, policy_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_channels_for_retention_policy_DataRetentionApi, "/data_retention/policies/{policy_id}/channels", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "policy_id", policy_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the channels for a granular data retention policy

Gets the channels to which a granular data retention policy is applied.  __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_read_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- policy_id::String (required)
- page::Int64
- per_page::Int64

Return: Vector{ChannelWithTeamData}, OpenAPI.Clients.ApiResponse
"""
function get_channels_for_retention_policy(_api::DataRetentionApi, policy_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channels_for_retention_policy(_api, policy_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_channels_for_retention_policy(_api::DataRetentionApi, response_stream::Channel, policy_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_channels_for_retention_policy(_api, policy_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_data_retention_policies_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{DataRetentionPolicyWithTeamAndChannelCounts},
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_data_retention_policies(_api::DataRetentionApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_data_retention_policies_DataRetentionApi, "/data_retention/policies", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the granular data retention policies

Gets details about the granular (i.e. team or channel-specific) data retention policies from the server.  __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_read_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- page::Int64
- per_page::Int64

Return: Vector{DataRetentionPolicyWithTeamAndChannelCounts}, OpenAPI.Clients.ApiResponse
"""
function get_data_retention_policies(_api::DataRetentionApi; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_data_retention_policies(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_data_retention_policies(_api::DataRetentionApi, response_stream::Channel; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_data_retention_policies(_api; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_data_retention_policies_count_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GetDataRetentionPoliciesCount200Response,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_data_retention_policies_count(_api::DataRetentionApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_data_retention_policies_count_DataRetentionApi, "/data_retention/policies_count", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the number of granular data retention policies

Gets the number of granular (i.e. team or channel-specific) data retention policies from the server.  __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_read_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:

Return: GetDataRetentionPoliciesCount200Response, OpenAPI.Clients.ApiResponse
"""
function get_data_retention_policies_count(_api::DataRetentionApi; _mediaType=nothing)
    _ctx = _oacinternal_get_data_retention_policies_count(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_data_retention_policies_count(_api::DataRetentionApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_data_retention_policies_count(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_data_retention_policy_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GlobalDataRetentionPolicy,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_data_retention_policy(_api::DataRetentionApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_data_retention_policy_DataRetentionApi, "/data_retention/policy", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the global data retention policy

Gets the current global data retention policy details from the server, including what data should be purged and the cutoff times for each data type that should be purged.  __Minimum server version__: 4.3  ##### Permissions Requires an active session but no other permissions.  ##### License Requires an E20 license. 

Params:

Return: GlobalDataRetentionPolicy, OpenAPI.Clients.ApiResponse
"""
function get_data_retention_policy(_api::DataRetentionApi; _mediaType=nothing)
    _ctx = _oacinternal_get_data_retention_policy(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_data_retention_policy(_api::DataRetentionApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_data_retention_policy(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_data_retention_policy_by_i_d_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DataRetentionPolicyWithTeamAndChannelCounts,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_data_retention_policy_by_i_d(_api::DataRetentionApi, policy_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_data_retention_policy_by_i_d_DataRetentionApi, "/data_retention/policies/{policy_id}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "policy_id", policy_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a granular data retention policy

Gets details about a granular data retention policies by ID.  __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_read_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- policy_id::String (required)

Return: DataRetentionPolicyWithTeamAndChannelCounts, OpenAPI.Clients.ApiResponse
"""
function get_data_retention_policy_by_i_d(_api::DataRetentionApi, policy_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_data_retention_policy_by_i_d(_api, policy_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_data_retention_policy_by_i_d(_api::DataRetentionApi, response_stream::Channel, policy_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_data_retention_policy_by_i_d(_api, policy_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_team_policies_for_user_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RetentionPolicyForTeamList,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_team_policies_for_user(_api::DataRetentionApi, user_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_team_policies_for_user_DataRetentionApi, "/users/{user_id}/data_retention/team_policies", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the policies which are applied to a user's teams

Gets the policies which are applied to the all of the teams to which a user belongs.  __Minimum server version__: 5.35  ##### Permissions Must be logged in as the user or have the `manage_system` permission.  ##### License Requires an E20 license. 

Params:
- user_id::String (required)
- page::Int64
- per_page::Int64

Return: RetentionPolicyForTeamList, OpenAPI.Clients.ApiResponse
"""
function get_team_policies_for_user(_api::DataRetentionApi, user_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_team_policies_for_user(_api, user_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_team_policies_for_user(_api::DataRetentionApi, response_stream::Channel, user_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_team_policies_for_user(_api, user_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_teams_for_retention_policy_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Team},
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_teams_for_retention_policy(_api::DataRetentionApi, policy_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_teams_for_retention_policy_DataRetentionApi, "/data_retention/policies/{policy_id}/teams", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "policy_id", policy_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the teams for a granular data retention policy

Gets the teams to which a granular data retention policy is applied.  __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_read_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- policy_id::String (required)
- page::Int64
- per_page::Int64

Return: Vector{Team}, OpenAPI.Clients.ApiResponse
"""
function get_teams_for_retention_policy(_api::DataRetentionApi, policy_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_teams_for_retention_policy(_api, policy_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_teams_for_retention_policy(_api::DataRetentionApi, response_stream::Channel, policy_id::String; page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_teams_for_retention_policy(_api, policy_id; page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_patch_data_retention_policy_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DataRetentionPolicyWithTeamAndChannelCounts,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_patch_data_retention_policy(_api::DataRetentionApi, policy_id::String, data_retention_policy_with_team_and_channel_ids::DataRetentionPolicyWithTeamAndChannelIds; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_patch_data_retention_policy_DataRetentionApi, "/data_retention/policies/{policy_id}", ["bearerAuth", ], data_retention_policy_with_team_and_channel_ids)
    OpenAPI.Clients.set_param(_ctx.path, "policy_id", policy_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Patch a granular data retention policy

Patches (i.e. replaces the fields of) a granular data retention policy. If any fields are omitted, they will not be changed.  __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_write_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- policy_id::String (required)
- data_retention_policy_with_team_and_channel_ids::DataRetentionPolicyWithTeamAndChannelIds (required)

Return: DataRetentionPolicyWithTeamAndChannelCounts, OpenAPI.Clients.ApiResponse
"""
function patch_data_retention_policy(_api::DataRetentionApi, policy_id::String, data_retention_policy_with_team_and_channel_ids::DataRetentionPolicyWithTeamAndChannelIds; _mediaType=nothing)
    _ctx = _oacinternal_patch_data_retention_policy(_api, policy_id, data_retention_policy_with_team_and_channel_ids; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function patch_data_retention_policy(_api::DataRetentionApi, response_stream::Channel, policy_id::String, data_retention_policy_with_team_and_channel_ids::DataRetentionPolicyWithTeamAndChannelIds; _mediaType=nothing)
    _ctx = _oacinternal_patch_data_retention_policy(_api, policy_id, data_retention_policy_with_team_and_channel_ids; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_remove_channels_from_retention_policy_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_remove_channels_from_retention_policy(_api::DataRetentionApi, policy_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_remove_channels_from_retention_policy_DataRetentionApi, "/data_retention/policies/{policy_id}/channels", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "policy_id", policy_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Delete channels from a granular data retention policy

Delete channels from a granular data retention policy.   __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_write_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- policy_id::String (required)
- request_body::Vector{String} (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function remove_channels_from_retention_policy(_api::DataRetentionApi, policy_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_remove_channels_from_retention_policy(_api, policy_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function remove_channels_from_retention_policy(_api::DataRetentionApi, response_stream::Channel, policy_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_remove_channels_from_retention_policy(_api, policy_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_remove_teams_from_retention_policy_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_remove_teams_from_retention_policy(_api::DataRetentionApi, policy_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_remove_teams_from_retention_policy_DataRetentionApi, "/data_retention/policies/{policy_id}/teams", ["bearerAuth", ], request_body)
    OpenAPI.Clients.set_param(_ctx.path, "policy_id", policy_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Delete teams from a granular data retention policy

Delete teams from a granular data retention policy.   __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_write_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- policy_id::String (required)
- request_body::Vector{String} (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function remove_teams_from_retention_policy(_api::DataRetentionApi, policy_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_remove_teams_from_retention_policy(_api, policy_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function remove_teams_from_retention_policy(_api::DataRetentionApi, response_stream::Channel, policy_id::String, request_body::Vector{String}; _mediaType=nothing)
    _ctx = _oacinternal_remove_teams_from_retention_policy(_api, policy_id, request_body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_channels_for_retention_policy_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ChannelWithTeamData},
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_search_channels_for_retention_policy(_api::DataRetentionApi, policy_id::String, search_channels_for_retention_policy_request::SearchChannelsForRetentionPolicyRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_channels_for_retention_policy_DataRetentionApi, "/data_retention/policies/{policy_id}/channels/search", ["bearerAuth", ], search_channels_for_retention_policy_request)
    OpenAPI.Clients.set_param(_ctx.path, "policy_id", policy_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search for the channels in a granular data retention policy

Searches for the channels to which a granular data retention policy is applied.  __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_read_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- policy_id::String (required)
- search_channels_for_retention_policy_request::SearchChannelsForRetentionPolicyRequest (required)

Return: Vector{ChannelWithTeamData}, OpenAPI.Clients.ApiResponse
"""
function search_channels_for_retention_policy(_api::DataRetentionApi, policy_id::String, search_channels_for_retention_policy_request::SearchChannelsForRetentionPolicyRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_channels_for_retention_policy(_api, policy_id, search_channels_for_retention_policy_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_channels_for_retention_policy(_api::DataRetentionApi, response_stream::Channel, policy_id::String, search_channels_for_retention_policy_request::SearchChannelsForRetentionPolicyRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_channels_for_retention_policy(_api, policy_id, search_channels_for_retention_policy_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_teams_for_retention_policy_DataRetentionApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Team},
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_search_teams_for_retention_policy(_api::DataRetentionApi, policy_id::String, search_teams_for_retention_policy_request::SearchTeamsForRetentionPolicyRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_search_teams_for_retention_policy_DataRetentionApi, "/data_retention/policies/{policy_id}/teams/search", ["bearerAuth", ], search_teams_for_retention_policy_request)
    OpenAPI.Clients.set_param(_ctx.path, "policy_id", policy_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Search for the teams in a granular data retention policy

Searches for the teams to which a granular data retention policy is applied.  __Minimum server version__: 5.35  ##### Permissions Must have the `sysconsole_read_compliance_data_retention` permission.  ##### License Requires an E20 license. 

Params:
- policy_id::String (required)
- search_teams_for_retention_policy_request::SearchTeamsForRetentionPolicyRequest (required)

Return: Vector{Team}, OpenAPI.Clients.ApiResponse
"""
function search_teams_for_retention_policy(_api::DataRetentionApi, policy_id::String, search_teams_for_retention_policy_request::SearchTeamsForRetentionPolicyRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_teams_for_retention_policy(_api, policy_id, search_teams_for_retention_policy_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_teams_for_retention_policy(_api::DataRetentionApi, response_stream::Channel, policy_id::String, search_teams_for_retention_policy_request::SearchTeamsForRetentionPolicyRequest; _mediaType=nothing)
    _ctx = _oacinternal_search_teams_for_retention_policy(_api, policy_id, search_teams_for_retention_policy_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export add_channels_to_retention_policy
export add_teams_to_retention_policy
export create_data_retention_policy
export delete_data_retention_policy
export get_channel_policies_for_user
export get_channels_for_retention_policy
export get_data_retention_policies
export get_data_retention_policies_count
export get_data_retention_policy
export get_data_retention_policy_by_i_d
export get_team_policies_for_user
export get_teams_for_retention_policy
export patch_data_retention_policy
export remove_channels_from_retention_policy
export remove_teams_from_retention_policy
export search_channels_for_retention_policy
export search_teams_for_retention_policy
