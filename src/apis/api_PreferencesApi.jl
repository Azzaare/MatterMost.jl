# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct PreferencesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `PreferencesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ PreferencesApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_delete_preferences_PreferencesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_preferences(_api::PreferencesApi, user_id::String, preference::Vector{Preference}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_delete_preferences_PreferencesApi, "/users/{user_id}/preferences/delete", ["bearerAuth", ], preference)
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Delete user's preferences

Delete a list of the user's preferences. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. 

Params:
- user_id::String (required)
- preference::Vector{Preference} (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_preferences(_api::PreferencesApi, user_id::String, preference::Vector{Preference}; _mediaType=nothing)
    _ctx = _oacinternal_delete_preferences(_api, user_id, preference; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_preferences(_api::PreferencesApi, response_stream::Channel, user_id::String, preference::Vector{Preference}; _mediaType=nothing)
    _ctx = _oacinternal_delete_preferences(_api, user_id, preference; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_preferences_PreferencesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Preference},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_preferences(_api::PreferencesApi, user_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_preferences_PreferencesApi, "/users/{user_id}/preferences", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the user's preferences

Get a list of the user's preferences. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. 

Params:
- user_id::String (required)

Return: Vector{Preference}, OpenAPI.Clients.ApiResponse
"""
function get_preferences(_api::PreferencesApi, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_preferences(_api, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_preferences(_api::PreferencesApi, response_stream::Channel, user_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_preferences(_api, user_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_preferences_by_category_PreferencesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{Preference},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_preferences_by_category(_api::PreferencesApi, user_id::String, category::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_preferences_by_category_PreferencesApi, "/users/{user_id}/preferences/{category}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "category", category)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List a user's preferences by category

Lists the current user's stored preferences in the given category. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. 

Params:
- user_id::String (required)
- category::String (required)

Return: Vector{Preference}, OpenAPI.Clients.ApiResponse
"""
function get_preferences_by_category(_api::PreferencesApi, user_id::String, category::String; _mediaType=nothing)
    _ctx = _oacinternal_get_preferences_by_category(_api, user_id, category; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_preferences_by_category(_api::PreferencesApi, response_stream::Channel, user_id::String, category::String; _mediaType=nothing)
    _ctx = _oacinternal_get_preferences_by_category(_api, user_id, category; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_preferences_by_category_by_name_PreferencesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Preference,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_preferences_by_category_by_name(_api::PreferencesApi, user_id::String, category::String, preference_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_preferences_by_category_by_name_PreferencesApi, "/users/{user_id}/preferences/{category}/name/{preference_name}", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "category", category)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "preference_name", preference_name)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a specific user preference

Gets a single preference for the current user with the given category and name. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. 

Params:
- user_id::String (required)
- category::String (required)
- preference_name::String (required)

Return: Preference, OpenAPI.Clients.ApiResponse
"""
function get_preferences_by_category_by_name(_api::PreferencesApi, user_id::String, category::String, preference_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_preferences_by_category_by_name(_api, user_id, category, preference_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_preferences_by_category_by_name(_api::PreferencesApi, response_stream::Channel, user_id::String, category::String, preference_name::String; _mediaType=nothing)
    _ctx = _oacinternal_get_preferences_by_category_by_name(_api, user_id, category, preference_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_preferences_PreferencesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("404", "x"=>".") * "\$") => AppError,
)

function _oacinternal_update_preferences(_api::PreferencesApi, user_id::String, preference::Vector{Preference}; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_update_preferences_PreferencesApi, "/users/{user_id}/preferences", ["bearerAuth", ], preference)
    OpenAPI.Clients.set_param(_ctx.path, "user_id", user_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Save the user's preferences

Save a list of the user's preferences. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. 

Params:
- user_id::String (required)
- preference::Vector{Preference} (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function update_preferences(_api::PreferencesApi, user_id::String, preference::Vector{Preference}; _mediaType=nothing)
    _ctx = _oacinternal_update_preferences(_api, user_id, preference; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_preferences(_api::PreferencesApi, response_stream::Channel, user_id::String, preference::Vector{Preference}; _mediaType=nothing)
    _ctx = _oacinternal_update_preferences(_api, user_id, preference; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_preferences
export get_preferences
export get_preferences_by_category
export get_preferences_by_category_by_name
export update_preferences
