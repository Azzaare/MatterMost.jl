# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct LDAPApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `LDAPApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ LDAPApi }) = "http://your-mattermost-url.com/api/v4"

const _returntypes_delete_ldap_private_certificate_LDAPApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_ldap_private_certificate(_api::LDAPApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_ldap_private_certificate_LDAPApi, "/ldap/certificate/private", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Remove private key

Delete the current private key being used with your TLS verification. ##### Permissions Must have `manage_system` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_ldap_private_certificate(_api::LDAPApi; _mediaType=nothing)
    _ctx = _oacinternal_delete_ldap_private_certificate(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_ldap_private_certificate(_api::LDAPApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_delete_ldap_private_certificate(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_ldap_public_certificate_LDAPApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_delete_ldap_public_certificate(_api::LDAPApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_ldap_public_certificate_LDAPApi, "/ldap/certificate/public", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Remove public certificate

Delete the current public certificate being used for TLS verification. ##### Permissions Must have `manage_system` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function delete_ldap_public_certificate(_api::LDAPApi; _mediaType=nothing)
    _ctx = _oacinternal_delete_ldap_public_certificate(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_ldap_public_certificate(_api::LDAPApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_delete_ldap_public_certificate(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_ldap_groups_LDAPApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{LDAPGroupsPaged},
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_get_ldap_groups(_api::LDAPApi; q=nothing, page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_ldap_groups_LDAPApi, "/ldap/groups", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "q", q)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "per_page", per_page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns a list of LDAP groups

##### Permissions Must have `manage_system` permission. __Minimum server version__: 5.11 

Params:
- q::String
- page::Int64
- per_page::Int64

Return: Vector{LDAPGroupsPaged}, OpenAPI.Clients.ApiResponse
"""
function get_ldap_groups(_api::LDAPApi; q=nothing, page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_ldap_groups(_api; q=q, page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_ldap_groups(_api::LDAPApi, response_stream::Channel; q=nothing, page=nothing, per_page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_ldap_groups(_api; q=q, page=page, per_page=per_page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_link_ldap_group_LDAPApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
)

function _oacinternal_link_ldap_group(_api::LDAPApi, remote_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_link_ldap_group_LDAPApi, "/ldap/groups/{remote_id}/link", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "remote_id", remote_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Link a LDAP group

##### Permissions Must have `manage_system` permission. __Minimum server version__: 5.11 

Params:
- remote_id::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function link_ldap_group(_api::LDAPApi, remote_id::String; _mediaType=nothing)
    _ctx = _oacinternal_link_ldap_group(_api, remote_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function link_ldap_group(_api::LDAPApi, response_stream::Channel, remote_id::String; _mediaType=nothing)
    _ctx = _oacinternal_link_ldap_group(_api, remote_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_migrate_auth_to_ldap_LDAPApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_migrate_auth_to_ldap(_api::LDAPApi; migrate_auth_to_ldap_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_migrate_auth_to_ldap_LDAPApi, "/users/migrate_auth/ldap", ["bearerAuth", ], migrate_auth_to_ldap_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Migrate user accounts authentication type to LDAP.

Migrates accounts from one authentication provider to another. For example, you can upgrade your authentication provider from email to LDAP. __Minimum server version__: 5.28 ##### Permissions Must have `manage_system` permission. 

Params:
- migrate_auth_to_ldap_request::MigrateAuthToLdapRequest

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function migrate_auth_to_ldap(_api::LDAPApi; migrate_auth_to_ldap_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_migrate_auth_to_ldap(_api; migrate_auth_to_ldap_request=migrate_auth_to_ldap_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function migrate_auth_to_ldap(_api::LDAPApi, response_stream::Channel; migrate_auth_to_ldap_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_migrate_auth_to_ldap(_api; migrate_auth_to_ldap_request=migrate_auth_to_ldap_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_migrate_id_ldap_LDAPApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_migrate_id_ldap(_api::LDAPApi, migrate_id_ldap_request::MigrateIdLdapRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_migrate_id_ldap_LDAPApi, "/ldap/migrateid", ["bearerAuth", ], migrate_id_ldap_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Migrate Id LDAP

Migrate LDAP IdAttribute to new value. ##### Permissions Must have `manage_system` permission. __Minimum server version__: 5.26 

Params:
- migrate_id_ldap_request::MigrateIdLdapRequest (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function migrate_id_ldap(_api::LDAPApi, migrate_id_ldap_request::MigrateIdLdapRequest; _mediaType=nothing)
    _ctx = _oacinternal_migrate_id_ldap(_api, migrate_id_ldap_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function migrate_id_ldap(_api::LDAPApi, response_stream::Channel, migrate_id_ldap_request::MigrateIdLdapRequest; _mediaType=nothing)
    _ctx = _oacinternal_migrate_id_ldap(_api, migrate_id_ldap_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_sync_ldap_LDAPApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_sync_ldap(_api::LDAPApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_sync_ldap_LDAPApi, "/ldap/sync", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Sync with LDAP

Synchronize any user attribute changes in the configured AD/LDAP server with Mattermost. ##### Permissions Must have `manage_system` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function sync_ldap(_api::LDAPApi; _mediaType=nothing)
    _ctx = _oacinternal_sync_ldap(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function sync_ldap(_api::LDAPApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_sync_ldap(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_test_ldap_LDAPApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("500", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_test_ldap(_api::LDAPApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_test_ldap_LDAPApi, "/ldap/test", ["bearerAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Test LDAP configuration

Test the current AD/LDAP configuration to see if the AD/LDAP server can be contacted successfully. ##### Permissions Must have `manage_system` permission. 

Params:

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function test_ldap(_api::LDAPApi; _mediaType=nothing)
    _ctx = _oacinternal_test_ldap(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function test_ldap(_api::LDAPApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_test_ldap(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_ldap_private_certificate_LDAPApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_upload_ldap_private_certificate(_api::LDAPApi, certificate::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upload_ldap_private_certificate_LDAPApi, "/ldap/certificate/private", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "certificate", certificate)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload private key

Upload the private key to be used for TLS verification. The server will pick a hard-coded filename for the PrivateKeyFile setting in your `config.json`. ##### Permissions Must have `manage_system` permission. 

Params:
- certificate::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function upload_ldap_private_certificate(_api::LDAPApi, certificate::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_ldap_private_certificate(_api, certificate; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_ldap_private_certificate(_api::LDAPApi, response_stream::Channel, certificate::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_ldap_private_certificate(_api, certificate; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_ldap_public_certificate_LDAPApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StatusOK,
    Regex("^" * replace("400", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("401", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("403", "x"=>".") * "\$") => AppError,
    Regex("^" * replace("501", "x"=>".") * "\$") => AppError,
)

function _oacinternal_upload_ldap_public_certificate(_api::LDAPApi, certificate::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_upload_ldap_public_certificate_LDAPApi, "/ldap/certificate/public", ["bearerAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "certificate", certificate)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload public certificate

Upload the public certificate to be used for TLS verification. The server will pick a hard-coded filename for the PublicCertificateFile setting in your `config.json`. ##### Permissions Must have `manage_system` permission. 

Params:
- certificate::String (required)

Return: StatusOK, OpenAPI.Clients.ApiResponse
"""
function upload_ldap_public_certificate(_api::LDAPApi, certificate::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_ldap_public_certificate(_api, certificate; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_ldap_public_certificate(_api::LDAPApi, response_stream::Channel, certificate::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_ldap_public_certificate(_api, certificate; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_ldap_private_certificate
export delete_ldap_public_certificate
export get_ldap_groups
export link_ldap_group
export migrate_auth_to_ldap
export migrate_id_ldap
export sync_ldap
export test_ldap
export upload_ldap_private_certificate
export upload_ldap_public_certificate
